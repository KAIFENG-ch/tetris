

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Dec 27 20:30:55 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 2.32
    78                           ; Generated 02/02/2021 GMT
    79                           ; 
    80                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution. Publication is not required when
    94                           ;        this file is used in an embedded application.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16F877A Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232                           
   233                           	psect	strings
   234  0800                     __pstrings:
   235  0800                     stringtab:
   236  0800                     __stringtab:
   237  0800                     stringcode:	
   238                           ;	String table - string pointers are 1 byte each
   239                           
   240  0800                     stringdir:
   241  0800  3008               	movlw	high stringdir
   242  0801  008A               	movwf	10
   243  0802  0804               	movf	4,w
   244  0803  0A84               	incf	4,f
   245  0804  0782               	addwf	2,f
   246  0805                     __stringbase:
   247  0805  3400               	retlw	0
   248  0806                     __end_of__stringtab:
   249  0806                     _table:
   250  0806  3467               	retlw	103
   251  0807  3445               	retlw	69
   252  0808  34AE               	retlw	174
   253  0809  3426               	retlw	38
   254  080A  3498               	retlw	152
   255  080B  34BA               	retlw	186
   256  080C  3451               	retlw	81
   257  080D  34D9               	retlw	217
   258  080E  3440               	retlw	64
   259  080F  3465               	retlw	101
   260  0810  3421               	retlw	33
   261  0811  3495               	retlw	149
   262  0812  3454               	retlw	84
   263  0813  34A6               	retlw	166
   264  0814  3451               	retlw	81
   265  0815  3498               	retlw	152
   266  0816  3442               	retlw	66
   267  0817  3465               	retlw	101
   268  0818  3451               	retlw	81
   269  0819  34A9               	retlw	169
   270  081A  3454               	retlw	84
   271  081B  3486               	retlw	134
   272  081C  3410               	retlw	16
   273  081D  3495               	retlw	149
   274  081E  3421               	retlw	33
   275  081F  3454               	retlw	84
   276  0820  3451               	retlw	81
   277  0821  34A6               	retlw	166
   278  0822  3465               	retlw	101
   279  0823  3498               	retlw	152
   280  0824  3440               	retlw	64
   281  0825  3495               	retlw	149
   282  0826  3410               	retlw	16
   283  0827  3465               	retlw	101
   284  0828  3452               	retlw	82
   285  0829  3496               	retlw	150
   286  082A  3454               	retlw	84
   287  082B  34A9               	retlw	169
   288  082C  3441               	retlw	65
   289  082D  3485               	retlw	133
   290  082E  3441               	retlw	65
   291  082F  3465               	retlw	101
   292  0830  3451               	retlw	81
   293  0831  3496               	retlw	150
   294  0832  3454               	retlw	84
   295  0833  3496               	retlw	150
   296  0834  3441               	retlw	65
   297  0835  3495               	retlw	149
   298  0836  3465               	retlw	101
   299  0837  34A9               	retlw	169
   300  0838                     __end_of_table:
   301  000B                     _INTCON	set	11
   302  001F                     _ADCON0	set	31
   303  0008                     _PORTD	set	8
   304  001A                     _RCREG	set	26
   305  0019                     _TXREG	set	25
   306  0018                     _RCSTA	set	24
   307  0007                     _PORTC	set	7
   308  0066                     _ADIF	set	102
   309  0065                     _RCIF	set	101
   310  0064                     _TXIF	set	100
   311  009E                     _ADRESL	set	158
   312  0085                     _TRISA	set	133
   313  009F                     _ADCON1	set	159
   314  0088                     _TRISD	set	136
   315  0099                     _SPBRG	set	153
   316  0086                     _TRISB	set	134
   317  0098                     _TXSTA	set	152
   318  0087                     _TRISC	set	135
   319  0465                     _RCIE	set	1125
   320  0466                     _ADIE	set	1126
   321  04C1                     _TRMT	set	1217
   322  0838                     STR_11:
   323  0838  34EF               	retlw	-17
   324  0839  34BC               	retlw	-68
   325  083A  3488               	retlw	-120
   326  083B  34E6               	retlw	-26
   327  083C  348C               	retlw	-116
   328  083D  3489               	retlw	-119
   329  083E  34E4               	retlw	-28
   330  083F  34B8               	retlw	-72
   331  0840  348B               	retlw	-117
   332  0841  34E5               	retlw	-27
   333  0842  349B               	retlw	-101
   334  0843  349E               	retlw	-98
   335  0844  34E8               	retlw	-24
   336  0845  34BD               	retlw	-67
   337  0846  34A6               	retlw	-90
   338  0847  34E9               	retlw	-23
   339  0848  3494               	retlw	-108
   340  0849  34AE               	retlw	-82
   341  084A  34EF               	retlw	-17
   342  084B  34BC               	retlw	-68
   343  084C  3489               	retlw	-119
   344  084D  3400               	retlw	0
   345  084E                     STR_9:
   346  084E  34E6               	retlw	-26
   347  084F  34A2               	retlw	-94
   348  0850  3485               	retlw	-123
   349  0851  34E5               	retlw	-27
   350  0852  348A               	retlw	-118
   351  0853  34AA               	retlw	-86
   352  0854  34E6               	retlw	-26
   353  0855  3496               	retlw	-106
   354  0856  34AF               	retlw	-81
   355  0857  34E7               	retlw	-25
   356  0858  3494               	retlw	-108
   357  0859  34B5               	retlw	-75
   358  085A  34E4               	retlw	-28
   359  085B  34BF               	retlw	-65
   360  085C  34A1               	retlw	-95
   361  085D  34E4               	retlw	-28
   362  085E  34B8               	retlw	-72
   363  085F  3489               	retlw	-119
   364  0860  34E7               	retlw	-25
   365  0861  348F               	retlw	-113
   366  0862  34AD               	retlw	-83
   367  0863  3400               	retlw	0
   368  0864                     STR_10:
   369  0864  34E5               	retlw	-27
   370  0865  34BC               	retlw	-68
   371  0866  34A0               	retlw	-96
   372  0867  34E9               	retlw	-23
   373  0868  3492               	retlw	-110
   374  0869  348A               	retlw	-118
   375  086A  34E6               	retlw	-26
   376  086B  34B4               	retlw	-76
   377  086C  348B               	retlw	-117
   378  086D  3420               	retlw	32	;' '
   379  086E  3420               	retlw	32	;' '
   380  086F  34E9               	retlw	-23
   381  0870  3499               	retlw	-103
   382  0871  3488               	retlw	-120
   383  0872  34E6               	retlw	-26
   384  0873  3481               	retlw	-127
   385  0874  34BA               	retlw	-70
   386  0875  34E4               	retlw	-28
   387  0876  34B8               	retlw	-72
   388  0877  34B0               	retlw	-80
   389  0878  3400               	retlw	0
   390  0879                     STR_13:
   391  0879  3420               	retlw	32	;' '
   392  087A  3420               	retlw	32	;' '
   393  087B  3420               	retlw	32	;' '
   394  087C  3420               	retlw	32	;' '
   395  087D  3420               	retlw	32	;' '
   396  087E  3420               	retlw	32	;' '
   397  087F  3420               	retlw	32	;' '
   398  0880  3420               	retlw	32	;' '
   399  0881  3420               	retlw	32	;' '
   400  0882  3420               	retlw	32	;' '
   401  0883  3420               	retlw	32	;' '
   402  0884  3420               	retlw	32	;' '
   403  0885  3420               	retlw	32	;' '
   404  0886  3420               	retlw	32	;' '
   405  0887  3420               	retlw	32	;' '
   406  0888  3420               	retlw	32	;' '
   407  0889  3420               	retlw	32	;' '
   408  088A  3420               	retlw	32	;' '
   409  088B  3420               	retlw	32	;' '
   410  088C  3420               	retlw	32	;' '
   411  088D  3400               	retlw	0
   412  088E                     STR_8:
   413  088E  34E4               	retlw	-28
   414  088F  34BF               	retlw	-65
   415  0890  3484               	retlw	-124
   416  0891  3420               	retlw	32	;' '
   417  0892  34E7               	retlw	-25
   418  0893  34BD               	retlw	-67
   419  0894  3497               	retlw	-105
   420  0895  3420               	retlw	32	;' '
   421  0896  34E6               	retlw	-26
   422  0897  3496               	retlw	-106
   423  0898  34AF               	retlw	-81
   424  0899  3420               	retlw	32	;' '
   425  089A  34E6               	retlw	-26
   426  089B  3496               	retlw	-106
   427  089C  34B9               	retlw	-71
   428  089D  3420               	retlw	32	;' '
   429  089E  34E5               	retlw	-27
   430  089F  349D               	retlw	-99
   431  08A0  3497               	retlw	-105
   432  08A1  3400               	retlw	0
   433  08A2                     STR_18:
   434  08A2  34E2               	retlw	-30
   435  08A3  3494               	retlw	-108
   436  08A4  3482               	retlw	-126
   437  08A5  3420               	retlw	32	;' '
   438  08A6  3420               	retlw	32	;' '
   439  08A7  3420               	retlw	32	;' '
   440  08A8  3420               	retlw	32	;' '
   441  08A9  3420               	retlw	32	;' '
   442  08AA  3420               	retlw	32	;' '
   443  08AB  3420               	retlw	32	;' '
   444  08AC  3420               	retlw	32	;' '
   445  08AD  3420               	retlw	32	;' '
   446  08AE  3420               	retlw	32	;' '
   447  08AF  34E2               	retlw	-30
   448  08B0  3494               	retlw	-108
   449  08B1  3482               	retlw	-126
   450  08B2  3400               	retlw	0
   451  08B3                     STR_22:
   452  08B3  34E4               	retlw	-28
   453  08B4  34B8               	retlw	-72
   454  08B5  348B               	retlw	-117
   455  08B6  34E6               	retlw	-26
   456  08B7  34AC               	retlw	-84
   457  08B8  34A1               	retlw	-95
   458  08B9  34E5               	retlw	-27
   459  08BA  3487               	retlw	-121
   460  08BB  34BA               	retlw	-70
   461  08BC  34E7               	retlw	-25
   462  08BD  348E               	retlw	-114
   463  08BE  34B0               	retlw	-80
   464  08BF  3400               	retlw	0
   465  08C0                     STR_23:
   466  08C0  34E2               	retlw	-30
   467  08C1  3496               	retlw	-106
   468  08C2  3488               	retlw	-120
   469  08C3  34E2               	retlw	-30
   470  08C4  3496               	retlw	-106
   471  08C5  3488               	retlw	-120
   472  08C6  3400               	retlw	0
   473  08C7                     STR_16:
   474  08C7  34E2               	retlw	-30
   475  08C8  3494               	retlw	-108
   476  08C9  3480               	retlw	-128
   477  08CA  3400               	retlw	0
   478  08CB                     STR_15:
   479  08CB  34E2               	retlw	-30
   480  08CC  3494               	retlw	-108
   481  08CD  348C               	retlw	-116
   482  08CE  3400               	retlw	0
   483  08CF                     STR_17:
   484  08CF  34E2               	retlw	-30
   485  08D0  3494               	retlw	-108
   486  08D1  3490               	retlw	-112
   487  08D2  3400               	retlw	0
   488  08D3                     STR_19:
   489  08D3  34E2               	retlw	-30
   490  08D4  3494               	retlw	-108
   491  08D5  3494               	retlw	-108
   492  08D6  3400               	retlw	0
   493  08D7                     STR_21:
   494  08D7  34E2               	retlw	-30
   495  08D8  3494               	retlw	-108
   496  08D9  3498               	retlw	-104
   497  08DA  3400               	retlw	0
   498  08DB                     STR_14:
   499  08DB  34E2               	retlw	-30
   500  08DC  3494               	retlw	-108
   501  08DD  34AC               	retlw	-84
   502  08DE  3400               	retlw	0
   503  08DF                     STR_7:
   504  08DF  340A               	retlw	10
   505  08E0  340D               	retlw	13
   506  08E1  3400               	retlw	0
   507  08E2                     STR_1:
   508  08E2  341B               	retlw	27
   509  08E3  345B               	retlw	91	;'['
   510  08E4  3400               	retlw	0
   511  08E5                     STR_6:
   512  08E5  340C               	retlw	12
   513  08E6  3400               	retlw	0
   514  08C7                     
   515                           	psect	cinit
   516  0015                     start_initialization:	
   517                           ; #config settings
   518                           
   519  0015                     __initialization:
   520                           
   521                           ; Clear objects allocated to BANK0
   522  0015  1283               	bcf	3,5	;RP0=0, select bank0
   523  0016  1303               	bcf	3,6	;RP1=0, select bank0
   524  0017  01DF               	clrf	__pbssBANK0& (0+127)
   525  0018  01E0               	clrf	(__pbssBANK0+1)& (0+127)
   526  0019  01E1               	clrf	(__pbssBANK0+2)& (0+127)
   527                           
   528                           ; Clear objects allocated to BANK1
   529  001A  1383               	bcf	3,7	;select IRP bank0
   530  001B  30CB               	movlw	low __pbssBANK1
   531  001C  0084               	movwf	4
   532  001D  30EE               	movlw	low (__pbssBANK1+35)
   533  001E  160A  118A  22B9   	fcall	clear_ram0
   534  0021                     end_of_initialization:	
   535                           ;End of C runtime variable initialization code
   536                           
   537  0021                     __end_of__initialization:
   538  0021  0183               	clrf	3
   539  0022  160A  118A  2D3F   	ljmp	_main	;jump to C main() function
   540                           
   541                           	psect	bssBANK0
   542  005F                     __pbssBANK0:
   543  005F                     _key:
   544  005F                     	ds	2
   545  0061                     _flag:
   546  0061                     	ds	1
   547                           
   548                           	psect	bssBANK1
   549  00CB                     __pbssBANK1:
   550  00CB                     _game:
   551  00CB                     	ds	32
   552  00EB                     _randset:
   553  00EB                     	ds	3
   554                           
   555                           	psect	clrtext
   556  12B9                     clear_ram0:	
   557                           ;	Called with FSR containing the base address, and
   558                           ;	W with the last address+1
   559                           
   560  12B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   561  12BA                     clrloop0:
   562  12BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   563  12BB  0A84               	incf	4,f	;increment pointer
   564  12BC  0604               	xorwf	4,w	;XOR with final address
   565  12BD  1903               	btfsc	3,2	;have we reached the end yet?
   566  12BE  3400               	retlw	0	;all done for this memory range, return
   567  12BF  0604               	xorwf	4,w	;XOR again to restore value
   568  12C0  2ABA               	goto	clrloop0	;do the next byte
   569                           
   570                           	psect	cstackBANK1
   571  00A0                     __pcstackBANK1:
   572  00A0                     ??_UartInit:
   573  00A0                     ??_UartSendChar:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  00A0                     ??_UartCurShow:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  00A0                     ??_LedInit:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  00A0                     ??_QueueInit:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  00A0                     ??__next:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  00A0                     ??_QueueLength:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  00A0                     ??_AdcInit:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  00A0                     ??_AdcGo:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  00A0                     ?___bmul:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  00A0                     ?___lbdiv:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  00A0                     ?___lbmod:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  00A0                     ?___awdiv:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  00A0                     ?___awmod:	
   610                           ; 2 bytes @ 0x0
   611                           
   612  00A0                     UartSendChar@ch:	
   613                           ; 2 bytes @ 0x0
   614                           
   615  00A0                     QueueInit@q:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  00A0                     ___bmul@multiplicand:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  00A0                     ___lbdiv@divisor:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  00A0                     ___lbmod@divisor:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  00A0                     ___awdiv@divisor:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  00A0                     ___awmod@divisor:	
   631                           ; 2 bytes @ 0x0
   632                           
   633                           
   634                           ; 2 bytes @ 0x0
   635  00A0                     	ds	1
   636  00A1                     ??_setup:
   637  00A1                     ?_UartSendUTF8:	
   638                           ; 1 bytes @ 0x1
   639                           
   640  00A1                     ??_UartSendString:	
   641                           ; 1 bytes @ 0x1
   642                           
   643  00A1                     ??___bmul:	
   644                           ; 1 bytes @ 0x1
   645                           
   646  00A1                     ??___lbdiv:	
   647                           ; 1 bytes @ 0x1
   648                           
   649  00A1                     ??___lbmod:	
   650                           ; 1 bytes @ 0x1
   651                           
   652  00A1                     UartSendUTF8@b:	
   653                           ; 1 bytes @ 0x1
   654                           
   655  00A1                     __next@n:	
   656                           ; 1 bytes @ 0x1
   657                           
   658                           
   659                           ; 1 bytes @ 0x1
   660  00A1                     	ds	1
   661  00A2                     UartSendUTF8@c:
   662  00A2                     UartSendString@str:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  00A2                     ___bmul@product:	
   666                           ; 1 bytes @ 0x2
   667                           
   668  00A2                     ___lbdiv@dividend:	
   669                           ; 1 bytes @ 0x2
   670                           
   671  00A2                     ___awdiv@dividend:	
   672                           ; 1 bytes @ 0x2
   673                           
   674  00A2                     ___awmod@dividend:	
   675                           ; 2 bytes @ 0x2
   676                           
   677                           
   678                           ; 2 bytes @ 0x2
   679  00A2                     	ds	1
   680  00A3                     ??_UartSendUTF8:
   681  00A3                     UartSendUTF8@a:	
   682                           ; 1 bytes @ 0x3
   683                           
   684  00A3                     ___bmul@multiplier:	
   685                           ; 1 bytes @ 0x3
   686                           
   687  00A3                     ___lbdiv@counter:	
   688                           ; 1 bytes @ 0x3
   689                           
   690  00A3                     _QueueLength$117:	
   691                           ; 1 bytes @ 0x3
   692                           
   693                           
   694                           ; 2 bytes @ 0x3
   695  00A3                     	ds	1
   696  00A4                     ??_UIPageMain:
   697  00A4                     ?__getBlock:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  00A4                     ??___awdiv:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  00A4                     ??___awmod:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  00A4                     __getBlock@x:	
   707                           ; 1 bytes @ 0x4
   708                           
   709  00A4                     ___lbdiv@quotient:	
   710                           ; 1 bytes @ 0x4
   711                           
   712  00A4                     ___lbmod@dividend:	
   713                           ; 1 bytes @ 0x4
   714                           
   715                           
   716                           ; 1 bytes @ 0x4
   717  00A4                     	ds	1
   718  00A5                     QueueLength@q:
   719  00A5                     __getBlock@y:	
   720                           ; 1 bytes @ 0x5
   721                           
   722  00A5                     ___awdiv@counter:	
   723                           ; 1 bytes @ 0x5
   724                           
   725  00A5                     ___awmod@counter:	
   726                           ; 1 bytes @ 0x5
   727                           
   728  00A5                     ___lbmod@counter:	
   729                           ; 1 bytes @ 0x5
   730                           
   731                           
   732                           ; 1 bytes @ 0x5
   733  00A5                     	ds	1
   734  00A6                     ??__getBlock:
   735  00A6                     QueueLength@length:	
   736                           ; 1 bytes @ 0x6
   737                           
   738  00A6                     UIPageMain@i:	
   739                           ; 1 bytes @ 0x6
   740                           
   741  00A6                     ___awdiv@sign:	
   742                           ; 1 bytes @ 0x6
   743                           
   744  00A6                     ___awmod@sign:	
   745                           ; 1 bytes @ 0x6
   746                           
   747  00A6                     ___lbmod@rem:	
   748                           ; 1 bytes @ 0x6
   749                           
   750                           
   751                           ; 1 bytes @ 0x6
   752  00A6                     	ds	1
   753  00A7                     ?_UartCurSet:
   754  00A7                     ??_QueuePop:	
   755                           ; 1 bytes @ 0x7
   756                           
   757  00A7                     UartCurSet@y:	
   758                           ; 1 bytes @ 0x7
   759                           
   760  00A7                     UIPageMain@j:	
   761                           ; 1 bytes @ 0x7
   762                           
   763  00A7                     ___awdiv@quotient:	
   764                           ; 1 bytes @ 0x7
   765                           
   766                           
   767                           ; 2 bytes @ 0x7
   768  00A7                     	ds	1
   769  00A8                     ??_UartCurSet:
   770  00A8                     UIPageMain@j_170:	
   771                           ; 1 bytes @ 0x8
   772                           
   773                           
   774                           ; 1 bytes @ 0x8
   775  00A8                     	ds	1
   776  00A9                     ?_UartCurMove:
   777  00A9                     UartCurSet@x:	
   778                           ; 1 bytes @ 0x9
   779                           
   780  00A9                     UartCurMove@y:	
   781                           ; 1 bytes @ 0x9
   782                           
   783  00A9                     UIPageMain@j_171:	
   784                           ; 1 bytes @ 0x9
   785                           
   786  00A9                     __getBlock@n:	
   787                           ; 1 bytes @ 0x9
   788                           
   789                           
   790                           ; 1 bytes @ 0x9
   791  00A9                     	ds	1
   792  00AA                     ??_UartCurMove:
   793  00AA                     ?__drawBlock:	
   794                           ; 1 bytes @ 0xA
   795                           
   796  00AA                     ?__wipeBlock:	
   797                           ; 1 bytes @ 0xA
   798                           
   799  00AA                     UIPageMain@j_173:	
   800                           ; 1 bytes @ 0xA
   801                           
   802  00AA                     __getBlock@t:	
   803                           ; 1 bytes @ 0xA
   804                           
   805  00AA                     __drawBlock@y:	
   806                           ; 1 bytes @ 0xA
   807                           
   808  00AA                     __wipeBlock@y:	
   809                           ; 1 bytes @ 0xA
   810                           
   811                           
   812                           ; 1 bytes @ 0xA
   813  00AA                     	ds	1
   814  00AB                     ??__drawBlock:
   815  00AB                     ??__wipeBlock:	
   816                           ; 1 bytes @ 0xB
   817                           
   818  00AB                     UIPageMain@j_174:	
   819                           ; 1 bytes @ 0xB
   820                           
   821                           
   822                           ; 1 bytes @ 0xB
   823  00AB                     	ds	1
   824  00AC                     UartCurMove@x:
   825  00AC                     UIPageMain@j_176:	
   826                           ; 1 bytes @ 0xC
   827                           
   828                           
   829                           ; 1 bytes @ 0xC
   830  00AC                     	ds	1
   831  00AD                     ??_UIClearGame:
   832  00AD                     UIPageMain@j_177:	
   833                           ; 1 bytes @ 0xD
   834                           
   835  00AD                     __drawBlock@x:	
   836                           ; 1 bytes @ 0xD
   837                           
   838  00AD                     __wipeBlock@x:	
   839                           ; 1 bytes @ 0xD
   840                           
   841                           
   842                           ; 1 bytes @ 0xD
   843  00AD                     	ds	1
   844  00AE                     ?__drawShape:
   845  00AE                     UIPageMain@j_179:	
   846                           ; 1 bytes @ 0xE
   847                           
   848  00AE                     UIClearGame@i:	
   849                           ; 1 bytes @ 0xE
   850                           
   851  00AE                     __drawShape@shape:	
   852                           ; 1 bytes @ 0xE
   853                           
   854                           
   855                           ; 1 bytes @ 0xE
   856  00AE                     	ds	1
   857  00AF                     ??_UIPageMainToGame:
   858  00AF                     UIPageMain@j_180:	
   859                           ; 1 bytes @ 0xF
   860                           
   861  00AF                     __drawShape@x:	
   862                           ; 1 bytes @ 0xF
   863                           
   864                           
   865                           ; 1 bytes @ 0xF
   866  00AF                     	ds	1
   867  00B0                     QueuePop@ret:
   868  00B0                     UIPageMain@i_182:	
   869                           ; 1 bytes @ 0x10
   870                           
   871  00B0                     __drawShape@y:	
   872                           ; 1 bytes @ 0x10
   873                           
   874                           
   875                           ; 1 bytes @ 0x10
   876  00B0                     	ds	1
   877  00B1                     ??__drawShape:
   878  00B1                     QueuePop@q:	
   879                           ; 1 bytes @ 0x11
   880                           
   881  00B1                     UIPageMain@i_166:	
   882                           ; 1 bytes @ 0x11
   883                           
   884  00B1                     UIPageMainToGame@i:	
   885                           ; 1 bytes @ 0x11
   886                           
   887                           
   888                           ; 1 bytes @ 0x11
   889  00B1                     	ds	1
   890  00B2                     ??__randShape:
   891  00B2                     UIPageMainToGame@i_192:	
   892                           ; 1 bytes @ 0x12
   893                           
   894                           
   895                           ; 1 bytes @ 0x12
   896  00B2                     	ds	1
   897  00B3                     UIPageMainToGame@i_194:
   898                           
   899                           ; 1 bytes @ 0x13
   900  00B3                     	ds	1
   901  00B4                     UIPageMainToGame@i_197:
   902  00B4                     __randShape@rotate:	
   903                           ; 1 bytes @ 0x14
   904                           
   905                           
   906                           ; 1 bytes @ 0x14
   907  00B4                     	ds	1
   908  00B5                     UIPageMainToGame@i_200:
   909  00B5                     __randShape@i:	
   910                           ; 1 bytes @ 0x15
   911                           
   912  00B5                     __drawShape@t:	
   913                           ; 1 bytes @ 0x15
   914                           
   915                           
   916                           ; 1 bytes @ 0x15
   917  00B5                     	ds	1
   918  00B6                     __randShape@i_212:
   919  00B6                     __drawShape@bx:	
   920                           ; 1 bytes @ 0x16
   921                           
   922                           
   923                           ; 2 bytes @ 0x16
   924  00B6                     	ds	1
   925  00B7                     __randShape@randset:
   926                           
   927                           ; 1 bytes @ 0x17
   928  00B7                     	ds	1
   929  00B8                     __randShape@shape:
   930  00B8                     __drawShape@by:	
   931                           ; 1 bytes @ 0x18
   932                           
   933                           
   934                           ; 2 bytes @ 0x18
   935  00B8                     	ds	1
   936  00B9                     ??__shapeNext:
   937                           
   938                           ; 1 bytes @ 0x19
   939  00B9                     	ds	1
   940  00BA                     __drawShape@p:
   941                           
   942                           ; 2 bytes @ 0x1A
   943  00BA                     	ds	2
   944  00BC                     __shapeNext@p:
   945                           
   946                           ; 2 bytes @ 0x1C
   947  00BC                     	ds	2
   948  00BE                     __shapeNext@p_287:
   949                           
   950                           ; 2 bytes @ 0x1E
   951  00BE                     	ds	2
   952  00C0                     __shapeNext@p_288:
   953                           
   954                           ; 2 bytes @ 0x20
   955  00C0                     	ds	2
   956  00C2                     __shapeNext@p_289:
   957                           
   958                           ; 2 bytes @ 0x22
   959  00C2                     	ds	2
   960  00C4                     __shapeNext@t:
   961                           
   962                           ; 1 bytes @ 0x24
   963  00C4                     	ds	1
   964  00C5                     ?_TetrisInit:
   965  00C5                     TetrisInit@randset:	
   966                           ; 1 bytes @ 0x25
   967                           
   968                           
   969                           ; 1 bytes @ 0x25
   970  00C5                     	ds	1
   971  00C6                     ??_TetrisInit:
   972                           
   973                           ; 1 bytes @ 0x26
   974  00C6                     	ds	1
   975  00C7                     TetrisInit@t:
   976                           
   977                           ; 1 bytes @ 0x27
   978  00C7                     	ds	1
   979  00C8                     ??_main:
   980                           
   981                           ; 1 bytes @ 0x28
   982  00C8                     	ds	3
   983                           
   984                           	psect	cstackCOMMON
   985  0070                     __pcstackCOMMON:
   986  0070                     ?_setup:
   987  0070                     ?_UartInit:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_UartSendChar:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_UartSendString:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_UartCurShow:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ?_LedInit:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ?_QueueInit:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?__next:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ?_QueueLength:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_QueuePop:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ?_AdcInit:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_AdcGo:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ?__AdcWait:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ??__AdcWait:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_AdcVoltL:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ??_AdcVoltL:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_UIPageMain:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_UIClearGame:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_UIPageMainToGame:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?__randShape:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?__shapeNext:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_TetrisRotate:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?_TetrisNext:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_main:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?_isr:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?i1_UartSendChar:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ??i1_UartSendChar:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?i1_UartSendString:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?i1__next:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ??i1__next:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     ?i1_QueueLength:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     ??i1_QueueLength:	
  1078                           ; 1 bytes @ 0x0
  1079                           
  1080  0070                     ?i1_QueuePop:	
  1081                           ; 1 bytes @ 0x0
  1082                           
  1083  0070                     ?i1_AdcGo:	
  1084                           ; 1 bytes @ 0x0
  1085                           
  1086  0070                     ??i1_AdcGo:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     ?i1_UIClearGame:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092  0070                     ?i1__randShape:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095  0070                     ?i1__shapeNext:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0070                     ?i1___bmul:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0070                     ?i1___lbdiv:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0070                     ?i1___lbmod:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0070                     ?i1___awdiv:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?i1___awmod:	
  1111                           ; 2 bytes @ 0x0
  1112                           
  1113  0070                     UartCurShow@show:	
  1114                           ; 2 bytes @ 0x0
  1115                           
  1116  0070                     i1UartSendChar@ch:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     i1___bmul@multiplicand:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     i1___lbdiv@divisor:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     i1___lbmod@divisor:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     i1___awdiv@divisor:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     i1___awmod@divisor:	
  1132                           ; 2 bytes @ 0x0
  1133                           
  1134                           
  1135                           ; 2 bytes @ 0x0
  1136  0070                     	ds	1
  1137  0071                     ??i1_UartSendString:
  1138  0071                     ??i1___bmul:	
  1139                           ; 1 bytes @ 0x1
  1140                           
  1141  0071                     ??i1___lbdiv:	
  1142                           ; 1 bytes @ 0x1
  1143                           
  1144  0071                     ??i1___lbmod:	
  1145                           ; 1 bytes @ 0x1
  1146                           
  1147  0071                     i1__next@n:	
  1148                           ; 1 bytes @ 0x1
  1149                           
  1150                           
  1151                           ; 1 bytes @ 0x1
  1152  0071                     	ds	1
  1153  0072                     i1UartSendString@str:
  1154  0072                     i1___bmul@product:	
  1155                           ; 1 bytes @ 0x2
  1156                           
  1157  0072                     i1___lbdiv@dividend:	
  1158                           ; 1 bytes @ 0x2
  1159                           
  1160  0072                     i1___awdiv@dividend:	
  1161                           ; 1 bytes @ 0x2
  1162                           
  1163  0072                     i1___awmod@dividend:	
  1164                           ; 2 bytes @ 0x2
  1165                           
  1166                           
  1167                           ; 2 bytes @ 0x2
  1168  0072                     	ds	1
  1169  0073                     i1___bmul@multiplier:
  1170  0073                     i1___lbdiv@counter:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0073                     i1_QueueLength$117:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176                           
  1177                           ; 2 bytes @ 0x3
  1178  0073                     	ds	1
  1179  0074                     ?__clrBlock:
  1180  0074                     ?__setBlock:	
  1181                           ; 1 bytes @ 0x4
  1182                           
  1183  0074                     ?i1__getBlock:	
  1184                           ; 1 bytes @ 0x4
  1185                           
  1186  0074                     ??i1___awdiv:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189  0074                     ??i1___awmod:	
  1190                           ; 1 bytes @ 0x4
  1191                           
  1192  0074                     __clrBlock@x:	
  1193                           ; 1 bytes @ 0x4
  1194                           
  1195  0074                     __setBlock@x:	
  1196                           ; 1 bytes @ 0x4
  1197                           
  1198  0074                     i1__getBlock@x:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     i1___lbdiv@quotient:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     i1___lbmod@dividend:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207                           
  1208                           ; 1 bytes @ 0x4
  1209  0074                     	ds	1
  1210  0075                     __clrBlock@y:
  1211  0075                     __setBlock@y:	
  1212                           ; 1 bytes @ 0x5
  1213                           
  1214  0075                     i1QueueLength@q:	
  1215                           ; 1 bytes @ 0x5
  1216                           
  1217  0075                     i1__getBlock@y:	
  1218                           ; 1 bytes @ 0x5
  1219                           
  1220  0075                     i1___awdiv@counter:	
  1221                           ; 1 bytes @ 0x5
  1222                           
  1223  0075                     i1___awmod@counter:	
  1224                           ; 1 bytes @ 0x5
  1225                           
  1226  0075                     i1___lbmod@counter:	
  1227                           ; 1 bytes @ 0x5
  1228                           
  1229                           
  1230                           ; 1 bytes @ 0x5
  1231  0075                     	ds	1
  1232  0076                     ??__clrBlock:
  1233  0076                     ??__setBlock:	
  1234                           ; 1 bytes @ 0x6
  1235                           
  1236  0076                     ??i1__getBlock:	
  1237                           ; 1 bytes @ 0x6
  1238                           
  1239  0076                     i1QueueLength@length:	
  1240                           ; 1 bytes @ 0x6
  1241                           
  1242  0076                     i1___awdiv@sign:	
  1243                           ; 1 bytes @ 0x6
  1244                           
  1245  0076                     i1___awmod@sign:	
  1246                           ; 1 bytes @ 0x6
  1247                           
  1248  0076                     i1___lbmod@rem:	
  1249                           ; 1 bytes @ 0x6
  1250                           
  1251                           
  1252                           ; 1 bytes @ 0x6
  1253  0076                     	ds	1
  1254  0077                     ?_QueuePush:
  1255  0077                     ?i1_UartCurSet:	
  1256                           ; 1 bytes @ 0x7
  1257                           
  1258  0077                     QueuePush@i:	
  1259                           ; 1 bytes @ 0x7
  1260                           
  1261  0077                     i1UartCurSet@y:	
  1262                           ; 1 bytes @ 0x7
  1263                           
  1264  0077                     i1QueuePop@ret:	
  1265                           ; 1 bytes @ 0x7
  1266                           
  1267  0077                     i1___awdiv@quotient:	
  1268                           ; 1 bytes @ 0x7
  1269                           
  1270                           
  1271                           ; 2 bytes @ 0x7
  1272  0077                     	ds	1
  1273  0078                     ??_QueuePush:
  1274  0078                     ??i1_UartCurSet:	
  1275                           ; 1 bytes @ 0x8
  1276                           
  1277  0078                     i1QueuePop@q:	
  1278                           ; 1 bytes @ 0x8
  1279                           
  1280                           
  1281                           ; 1 bytes @ 0x8
  1282  0078                     	ds	1
  1283  0079                     ?i1_UartCurMove:
  1284  0079                     ??i1__randShape:	
  1285                           ; 1 bytes @ 0x9
  1286                           
  1287  0079                     i1UartCurSet@x:	
  1288                           ; 1 bytes @ 0x9
  1289                           
  1290  0079                     i1UartCurMove@y:	
  1291                           ; 1 bytes @ 0x9
  1292                           
  1293  0079                     i1__getBlock@t:	
  1294                           ; 1 bytes @ 0x9
  1295                           
  1296                           
  1297                           ; 1 bytes @ 0x9
  1298  0079                     	ds	1
  1299  007A                     ??i1_UartCurMove:
  1300  007A                     ?i1__drawBlock:	
  1301                           ; 1 bytes @ 0xA
  1302                           
  1303  007A                     ?i1__wipeBlock:	
  1304                           ; 1 bytes @ 0xA
  1305                           
  1306  007A                     __clrBlock@t:	
  1307                           ; 1 bytes @ 0xA
  1308                           
  1309  007A                     __setBlock@n:	
  1310                           ; 1 bytes @ 0xA
  1311                           
  1312  007A                     i1__getBlock@n:	
  1313                           ; 1 bytes @ 0xA
  1314                           
  1315  007A                     i1__drawBlock@y:	
  1316                           ; 1 bytes @ 0xA
  1317                           
  1318  007A                     i1__wipeBlock@y:	
  1319                           ; 1 bytes @ 0xA
  1320                           
  1321                           
  1322                           ; 1 bytes @ 0xA
  1323  007A                     	ds	1
  1324  007B                     ??i1__drawBlock:
  1325  007B                     ??i1__wipeBlock:	
  1326                           ; 1 bytes @ 0xB
  1327                           
  1328  007B                     QueuePush@q:	
  1329                           ; 1 bytes @ 0xB
  1330                           
  1331  007B                     __clrBlock@n:	
  1332                           ; 1 bytes @ 0xB
  1333                           
  1334  007B                     __setBlock@t:	
  1335                           ; 1 bytes @ 0xB
  1336                           
  1337                           
  1338                           ; 1 bytes @ 0xB
  1339  007B                     	ds	1
  1340  007C                     i1UartCurMove@x:
  1341                           
  1342                           ; 1 bytes @ 0xC
  1343  007C                     	ds	1
  1344  007D                     ??i1_UIClearGame:
  1345  007D                     i1__drawBlock@x:	
  1346                           ; 1 bytes @ 0xD
  1347                           
  1348  007D                     i1__wipeBlock@x:	
  1349                           ; 1 bytes @ 0xD
  1350                           
  1351                           
  1352                           ; 1 bytes @ 0xD
  1353  007D                     	ds	1
  1354  007E                     ??_TetrisRotate:
  1355                           
  1356                           	psect	cstackBANK0
  1357  0020                     __pcstackBANK0:	
  1358                           ; 1 bytes @ 0xE
  1359                           
  1360  0020                     ?__wipeShape:
  1361  0020                     ??i1_QueuePop:	
  1362                           ; 1 bytes @ 0x0
  1363                           
  1364  0020                     ?i1__drawShape:	
  1365                           ; 1 bytes @ 0x0
  1366                           
  1367  0020                     __wipeShape@shape:	
  1368                           ; 1 bytes @ 0x0
  1369                           
  1370  0020                     i1UIClearGame@i:	
  1371                           ; 1 bytes @ 0x0
  1372                           
  1373  0020                     i1__drawShape@shape:	
  1374                           ; 1 bytes @ 0x0
  1375                           
  1376                           
  1377                           ; 1 bytes @ 0x0
  1378  0020                     	ds	1
  1379  0021                     __wipeShape@x:
  1380  0021                     i1__drawShape@x:	
  1381                           ; 1 bytes @ 0x1
  1382                           
  1383                           
  1384                           ; 1 bytes @ 0x1
  1385  0021                     	ds	1
  1386  0022                     __wipeShape@y:
  1387  0022                     i1__drawShape@y:	
  1388                           ; 1 bytes @ 0x2
  1389                           
  1390                           
  1391                           ; 1 bytes @ 0x2
  1392  0022                     	ds	1
  1393  0023                     ??__wipeShape:
  1394  0023                     ??i1__drawShape:	
  1395                           ; 1 bytes @ 0x3
  1396                           
  1397                           
  1398                           ; 1 bytes @ 0x3
  1399  0023                     	ds	4
  1400  0027                     __wipeShape@t:
  1401  0027                     i1__drawShape@t:	
  1402                           ; 1 bytes @ 0x7
  1403                           
  1404                           
  1405                           ; 1 bytes @ 0x7
  1406  0027                     	ds	1
  1407  0028                     __wipeShape@bx:
  1408  0028                     i1__drawShape@bx:	
  1409                           ; 2 bytes @ 0x8
  1410                           
  1411                           
  1412                           ; 2 bytes @ 0x8
  1413  0028                     	ds	1
  1414  0029                     i1__randShape@rotate:
  1415                           
  1416                           ; 1 bytes @ 0x9
  1417  0029                     	ds	1
  1418  002A                     i1__randShape@randset:
  1419  002A                     __wipeShape@by:	
  1420                           ; 1 bytes @ 0xA
  1421                           
  1422  002A                     i1__drawShape@by:	
  1423                           ; 2 bytes @ 0xA
  1424                           
  1425                           
  1426                           ; 2 bytes @ 0xA
  1427  002A                     	ds	1
  1428  002B                     i1__randShape@i:
  1429                           
  1430                           ; 1 bytes @ 0xB
  1431  002B                     	ds	1
  1432  002C                     i1__randShape@i_212:
  1433  002C                     __wipeShape@p:	
  1434                           ; 1 bytes @ 0xC
  1435                           
  1436  002C                     i1__drawShape@p:	
  1437                           ; 2 bytes @ 0xC
  1438                           
  1439                           
  1440                           ; 2 bytes @ 0xC
  1441  002C                     	ds	1
  1442  002D                     i1__randShape@shape:
  1443                           
  1444                           ; 1 bytes @ 0xD
  1445  002D                     	ds	1
  1446  002E                     ?_TetrisMove:
  1447  002E                     ??i1__shapeNext:	
  1448                           ; 1 bytes @ 0xE
  1449                           
  1450  002E                     TetrisMove@direction:	
  1451                           ; 1 bytes @ 0xE
  1452                           
  1453  002E                     TetrisRotate@t:	
  1454                           ; 1 bytes @ 0xE
  1455                           
  1456                           
  1457                           ; 1 bytes @ 0xE
  1458  002E                     	ds	1
  1459  002F                     ??_TetrisMove:
  1460                           
  1461                           ; 1 bytes @ 0xF
  1462  002F                     	ds	2
  1463  0031                     i1__shapeNext@p:
  1464                           
  1465                           ; 2 bytes @ 0x11
  1466  0031                     	ds	2
  1467  0033                     TetrisMove@bx:
  1468  0033                     i1__shapeNext@p_287:	
  1469                           ; 2 bytes @ 0x13
  1470                           
  1471                           
  1472                           ; 2 bytes @ 0x13
  1473  0033                     	ds	2
  1474  0035                     TetrisMove@by:
  1475  0035                     i1__shapeNext@p_288:	
  1476                           ; 2 bytes @ 0x15
  1477                           
  1478                           
  1479                           ; 2 bytes @ 0x15
  1480  0035                     	ds	2
  1481  0037                     TetrisMove@by_321:
  1482  0037                     i1__shapeNext@p_289:	
  1483                           ; 2 bytes @ 0x17
  1484                           
  1485                           
  1486                           ; 2 bytes @ 0x17
  1487  0037                     	ds	2
  1488  0039                     i1__shapeNext@t:
  1489  0039                     TetrisMove@bx_323:	
  1490                           ; 1 bytes @ 0x19
  1491                           
  1492                           
  1493                           ; 2 bytes @ 0x19
  1494  0039                     	ds	1
  1495  003A                     ??_TetrisNext:
  1496                           
  1497                           ; 1 bytes @ 0x1A
  1498  003A                     	ds	1
  1499  003B                     TetrisMove@by_324:
  1500                           
  1501                           ; 2 bytes @ 0x1B
  1502  003B                     	ds	2
  1503  003D                     _TetrisMove$314:
  1504                           
  1505                           ; 2 bytes @ 0x1D
  1506  003D                     	ds	1
  1507  003E                     TetrisNext@bx:
  1508                           
  1509                           ; 2 bytes @ 0x1E
  1510  003E                     	ds	1
  1511  003F                     _TetrisMove$327:
  1512                           
  1513                           ; 2 bytes @ 0x1F
  1514  003F                     	ds	1
  1515  0040                     TetrisNext@by:
  1516                           
  1517                           ; 2 bytes @ 0x20
  1518  0040                     	ds	1
  1519  0041                     TetrisMove@bx_320:
  1520                           
  1521                           ; 2 bytes @ 0x21
  1522  0041                     	ds	1
  1523  0042                     TetrisNext@bx_373:
  1524                           
  1525                           ; 2 bytes @ 0x22
  1526  0042                     	ds	1
  1527  0043                     TetrisMove@p:
  1528                           
  1529                           ; 2 bytes @ 0x23
  1530  0043                     	ds	1
  1531  0044                     TetrisNext@bx_376:
  1532                           
  1533                           ; 2 bytes @ 0x24
  1534  0044                     	ds	1
  1535  0045                     TetrisMove@p_322:
  1536                           
  1537                           ; 2 bytes @ 0x25
  1538  0045                     	ds	1
  1539  0046                     TetrisNext@by_377:
  1540                           
  1541                           ; 2 bytes @ 0x26
  1542  0046                     	ds	1
  1543  0047                     TetrisMove@x:
  1544                           
  1545                           ; 1 bytes @ 0x27
  1546  0047                     	ds	1
  1547  0048                     TetrisMove@i:
  1548  0048                     TetrisNext@by_380:	
  1549                           ; 1 bytes @ 0x28
  1550                           
  1551                           
  1552                           ; 2 bytes @ 0x28
  1553  0048                     	ds	1
  1554  0049                     TetrisMove@j:
  1555                           
  1556                           ; 1 bytes @ 0x29
  1557  0049                     	ds	1
  1558  004A                     TetrisMove@p_319:
  1559  004A                     TetrisNext@by_374:	
  1560                           ; 2 bytes @ 0x2A
  1561                           
  1562                           
  1563                           ; 2 bytes @ 0x2A
  1564  004A                     	ds	2
  1565  004C                     TetrisMove@t:
  1566  004C                     TetrisNext@p:	
  1567                           ; 1 bytes @ 0x2C
  1568                           
  1569                           
  1570                           ; 2 bytes @ 0x2C
  1571  004C                     	ds	2
  1572  004E                     TetrisNext@p_375:
  1573                           
  1574                           ; 2 bytes @ 0x2E
  1575  004E                     	ds	2
  1576  0050                     TetrisNext@p_378:
  1577                           
  1578                           ; 2 bytes @ 0x30
  1579  0050                     	ds	2
  1580  0052                     TetrisNext@y:
  1581                           
  1582                           ; 1 bytes @ 0x32
  1583  0052                     	ds	1
  1584  0053                     TetrisNext@i:
  1585                           
  1586                           ; 1 bytes @ 0x33
  1587  0053                     	ds	1
  1588  0054                     TetrisNext@j:
  1589                           
  1590                           ; 1 bytes @ 0x34
  1591  0054                     	ds	1
  1592  0055                     TetrisNext@p_372:
  1593                           
  1594                           ; 2 bytes @ 0x35
  1595  0055                     	ds	2
  1596  0057                     TetrisNext@t:
  1597                           
  1598                           ; 1 bytes @ 0x37
  1599  0057                     	ds	1
  1600  0058                     ??_isr:
  1601                           
  1602                           ; 1 bytes @ 0x38
  1603  0058                     	ds	6
  1604  005E                     isr@rc:
  1605                           
  1606                           ; 1 bytes @ 0x3E
  1607  005E                     	ds	1
  1608                           
  1609                           	psect	maintext
  1610  153F                     __pmaintext:	
  1611 ;;
  1612 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1613 ;;
  1614 ;; *************** function _main *****************
  1615 ;; Defined at:
  1616 ;;		line 48 in file "main.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : B00/0
  1627 ;;		On exit  : 200/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0
  1632 ;;      Temps:          0       0       3       0       0
  1633 ;;      Totals:         0       0       3       0       0
  1634 ;;Total ram usage:        3 bytes
  1635 ;; Hardware stack levels required when called: 13
  1636 ;; This function calls:
  1637 ;;		_TetrisInit
  1638 ;;		_UIPageMain
  1639 ;;		_UIPageMainToGame
  1640 ;;		__drawShape
  1641 ;;		_setup
  1642 ;; This function is called by:
  1643 ;;		Startup code after reset
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _main
  1649  153F                     _main:
  1650                           
  1651                           ;main.c: 49: setup();
  1652                           
  1653                           ;incstack = 0
  1654 ;; hardware stack exceeded
  1655                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1656  153F  160A  118A  23F2  160A  118A  	fcall	_setup
  1657                           
  1658                           ;main.c: 50: UIPageMain();
  1659  1544  120A  118A  24FD  160A  118A  	fcall	_UIPageMain
  1660                           
  1661                           ;main.c: 51: UIPageMainToGame();
  1662  1549  120A  158A  24A3  160A  118A  	fcall	_UIPageMainToGame
  1663                           
  1664                           ;main.c: 52: TetrisInit(&game, &randset);
  1665  154E  30EB               	movlw	(low (_randset| 0))& (0+255)
  1666  154F  00C8               	movwf	??_main^(0+128)
  1667  1550  0848               	movf	??_main^(0+128),w
  1668  1551  00C5               	movwf	TetrisInit@randset^(0+128)
  1669  1552  30CB               	movlw	(low (_game| 0))& (0+255)
  1670  1553  160A  118A  239E  160A  118A  	fcall	_TetrisInit
  1671                           
  1672                           ;main.c: 53: _drawShape(&game, game.shape, game.x, game.y);
  1673  1558  0864               	movf	(_game^(0+128)+25),w
  1674  1559  00C8               	movwf	??_main^(0+128)
  1675  155A  0848               	movf	??_main^(0+128),w
  1676  155B  00AE               	movwf	__drawShape@shape^(0+128)
  1677  155C  0866               	movf	(_game^(0+128)+27),w
  1678  155D  00C9               	movwf	(??_main+1)^(0+128)
  1679  155E  0849               	movf	(??_main+1)^(0+128),w
  1680  155F  00AF               	movwf	__drawShape@x^(0+128)
  1681  1560  0867               	movf	(_game^(0+128)+28),w
  1682  1561  00CA               	movwf	(??_main+2)^(0+128)
  1683  1562  084A               	movf	(??_main+2)^(0+128),w
  1684  1563  00B0               	movwf	__drawShape@y^(0+128)
  1685  1564  30CB               	movlw	(low (_game| 0))& (0+255)
  1686  1565  120A  158A  2139  160A  118A  	fcall	__drawShape
  1687  156A                     l420:	
  1688                           ;main.c: 54: for (;;) {
  1689                           
  1690                           
  1691                           ;main.c: 55: }
  1692  156A  2D6A               	goto	l420
  1693  156B                     __end_of_main:
  1694                           
  1695                           	psect	text1
  1696  13F2                     __ptext1:	
  1697 ;; *************** function _setup *****************
  1698 ;; Defined at:
  1699 ;;		line 58 in file "main.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;		None
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;		None
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  1    wreg      void 
  1706 ;; Registers used:
  1707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1708 ;; Tracked objects:
  1709 ;;		On entry : B00/0
  1710 ;;		On exit  : 300/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1713 ;;      Params:         0       0       0       0       0
  1714 ;;      Locals:         0       0       0       0       0
  1715 ;;      Temps:          0       0       1       0       0
  1716 ;;      Totals:         0       0       1       0       0
  1717 ;;Total ram usage:        1 bytes
  1718 ;; Hardware stack levels used: 1
  1719 ;; Hardware stack levels required when called: 8
  1720 ;; This function calls:
  1721 ;;		_AdcGo
  1722 ;;		_AdcInit
  1723 ;;		_LedInit
  1724 ;;		_QueueInit
  1725 ;;		_UartInit
  1726 ;; This function is called by:
  1727 ;;		_main
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function _setup
  1733  13F2                     _setup:
  1734                           
  1735                           ;main.c: 61: INTCON |= 0xc0;
  1736                           
  1737                           ;incstack = 0
  1738 ;; hardware stack exceeded
  1739                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1740  13F2  30C0               	movlw	192
  1741  13F3  1683               	bsf	3,5	;RP0=1, select bank1
  1742  13F4  00A1               	movwf	??_setup^(0+128)
  1743  13F5  0821               	movf	??_setup^(0+128),w
  1744  13F6  048B               	iorwf	11,f	;volatile
  1745                           
  1746                           ;main.c: 62: ADIE = 1;
  1747  13F7  170C               	bsf	12,6	;volatile
  1748                           
  1749                           ;main.c: 63: RCIE = 1;
  1750  13F8  168C               	bsf	12,5	;volatile
  1751                           
  1752                           ;main.c: 64: UartInit();
  1753  13F9  160A  118A  230B  160A  118A  	fcall	_UartInit
  1754                           
  1755                           ;main.c: 65: LedInit();
  1756  13FE  160A  118A  22FE  160A  118A  	fcall	_LedInit
  1757                           
  1758                           ;main.c: 66: AdcInit();
  1759  1403  120A  158A  20E7  160A  118A  	fcall	_AdcInit
  1760                           
  1761                           ;main.c: 67: QueueInit(&randset);
  1762  1408  30EB               	movlw	(low (_randset| 0))& (0+255)
  1763  1409  160A  118A  22CC  160A  118A  	fcall	_QueueInit
  1764                           
  1765                           ;main.c: 68: AdcGo();
  1766  140E  160A  118A  22A9   	fcall	_AdcGo
  1767  1411  0008               	return
  1768  1412                     __end_of_setup:
  1769                           
  1770                           	psect	text2
  1771  130B                     __ptext2:	
  1772 ;; *************** function _UartInit *****************
  1773 ;; Defined at:
  1774 ;;		line 40 in file "uart.h"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;		None
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0
  1783 ;; Tracked objects:
  1784 ;;		On entry : B00/100
  1785 ;;		On exit  : B00/100
  1786 ;;		Unchanged: 800/0
  1787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1788 ;;      Params:         0       0       0       0       0
  1789 ;;      Locals:         0       0       0       0       0
  1790 ;;      Temps:          0       0       1       0       0
  1791 ;;      Totals:         0       0       1       0       0
  1792 ;;Total ram usage:        1 bytes
  1793 ;; Hardware stack levels used: 1
  1794 ;; Hardware stack levels required when called: 7
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_setup
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _UartInit
  1804  130B                     _UartInit:
  1805                           
  1806                           ;uart.h: 42: TRISC |= 0xC0;
  1807                           
  1808                           ;incstack = 0
  1809 ;; hardware stack exceeded
  1810                           ; Regs used in _UartInit: [wreg+status,2+status,0]
  1811  130B  30C0               	movlw	192
  1812  130C  00A0               	movwf	??_UartInit^(0+128)
  1813  130D  0820               	movf	??_UartInit^(0+128),w
  1814  130E  0487               	iorwf	7,f	;volatile
  1815                           
  1816                           ;uart.h: 43: TXSTA = 0x24;
  1817  130F  3024               	movlw	36
  1818  1310  0098               	movwf	24	;volatile
  1819                           
  1820                           ;uart.h: 45: TRISB = 0x03;
  1821  1311  3003               	movlw	3
  1822  1312  0086               	movwf	6	;volatile
  1823                           
  1824                           ;uart.h: 46: PORTC = 0x00;
  1825  1313  1283               	bcf	3,5	;RP0=0, select bank0
  1826  1314  0187               	clrf	7	;volatile
  1827                           
  1828                           ;uart.h: 47: RCSTA = 0x90;
  1829  1315  3090               	movlw	144
  1830  1316  0098               	movwf	24	;volatile
  1831                           
  1832                           ;uart.h: 51: SPBRG = 0;
  1833  1317  1683               	bsf	3,5	;RP0=1, select bank1
  1834  1318  0199               	clrf	25	;volatile
  1835  1319  0008               	return
  1836  131A                     __end_of_UartInit:
  1837                           
  1838                           	psect	text3
  1839  12CC                     __ptext3:	
  1840 ;; *************** function _QueueInit *****************
  1841 ;; Defined at:
  1842 ;;		line 43 in file "queue.h"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  q               1    wreg     PTR struct Queue
  1845 ;;		 -> randset(3), 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  q               1    0[BANK1 ] PTR struct Queue
  1848 ;;		 -> randset(3), 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : B00/100
  1855 ;;		On exit  : B00/100
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1858 ;;      Params:         0       0       0       0       0
  1859 ;;      Locals:         0       0       1       0       0
  1860 ;;      Temps:          0       0       0       0       0
  1861 ;;      Totals:         0       0       1       0       0
  1862 ;;Total ram usage:        1 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; Hardware stack levels required when called: 7
  1865 ;; This function calls:
  1866 ;;		Nothing
  1867 ;; This function is called by:
  1868 ;;		_setup
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           
  1873                           ;psect for function _QueueInit
  1874  12CC                     _QueueInit:
  1875                           
  1876                           ;incstack = 0
  1877 ;; hardware stack exceeded
  1878                           ; Regs used in _QueueInit: [wreg-fsr0h+status,2+status,0]
  1879                           ;QueueInit@q stored from wreg
  1880  12CC  00A0               	movwf	QueueInit@q^(0+128)
  1881                           
  1882                           ;queue.h: 44: q->_data = 0;
  1883  12CD  0820               	movf	QueueInit@q^(0+128),w
  1884  12CE  0084               	movwf	4
  1885  12CF  0180               	clrf	0
  1886  12D0  0A84               	incf	4,f
  1887  12D1  0180               	clrf	0
  1888                           
  1889                           ;queue.h: 47: q->ht = 0;
  1890  12D2  0820               	movf	QueueInit@q^(0+128),w
  1891  12D3  3E02               	addlw	2
  1892  12D4  0084               	movwf	4
  1893  12D5  0180               	clrf	0
  1894  12D6  0008               	return
  1895  12D7                     __end_of_QueueInit:
  1896                           
  1897                           	psect	text4
  1898  12FE                     __ptext4:	
  1899 ;; *************** function _LedInit *****************
  1900 ;; Defined at:
  1901 ;;		line 45 in file "led.h"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;		None
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;		None
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0
  1910 ;; Tracked objects:
  1911 ;;		On entry : B00/100
  1912 ;;		On exit  : B00/0
  1913 ;;		Unchanged: 800/0
  1914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1915 ;;      Params:         0       0       0       0       0
  1916 ;;      Locals:         0       0       0       0       0
  1917 ;;      Temps:          0       0       1       0       0
  1918 ;;      Totals:         0       0       1       0       0
  1919 ;;Total ram usage:        1 bytes
  1920 ;; Hardware stack levels used: 1
  1921 ;; Hardware stack levels required when called: 7
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_setup
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _LedInit
  1931  12FE                     _LedInit:
  1932                           
  1933                           ;led.h: 47: TRISC &= 0xfc;
  1934                           
  1935                           ;incstack = 0
  1936 ;; hardware stack exceeded
  1937                           ; Regs used in _LedInit: [wreg+status,2+status,0]
  1938  12FE  30FC               	movlw	252
  1939  12FF  00A0               	movwf	??_LedInit^(0+128)
  1940  1300  0820               	movf	??_LedInit^(0+128),w
  1941  1301  0587               	andwf	7,f	;volatile
  1942                           
  1943                           ;led.h: 48: TRISD = 0x00;
  1944  1302  0188               	clrf	8	;volatile
  1945                           
  1946                           ;led.h: 49: PORTC &= 0xfc;
  1947  1303  30FC               	movlw	252
  1948  1304  00A0               	movwf	??_LedInit^(0+128)
  1949  1305  0820               	movf	??_LedInit^(0+128),w
  1950  1306  1283               	bcf	3,5	;RP0=0, select bank0
  1951  1307  0587               	andwf	7,f	;volatile
  1952                           
  1953                           ;led.h: 50: PORTD = 0xff;
  1954  1308  30FF               	movlw	255
  1955  1309  0088               	movwf	8	;volatile
  1956  130A  0008               	return
  1957  130B                     __end_of_LedInit:
  1958                           
  1959                           	psect	text5
  1960  08E7                     __ptext5:	
  1961 ;; *************** function _AdcInit *****************
  1962 ;; Defined at:
  1963 ;;		line 34 in file "adc.h"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg
  1972 ;; Tracked objects:
  1973 ;;		On entry : B00/0
  1974 ;;		On exit  : B00/100
  1975 ;;		Unchanged: 800/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1977 ;;      Params:         0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0
  1979 ;;      Temps:          0       0       0       0       0
  1980 ;;      Totals:         0       0       0       0       0
  1981 ;;Total ram usage:        0 bytes
  1982 ;; Hardware stack levels used: 1
  1983 ;; Hardware stack levels required when called: 7
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_setup
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _AdcInit
  1993  08E7                     _AdcInit:
  1994                           
  1995                           ;adc.h: 35: ADCON0 = 0x11;
  1996                           
  1997                           ;incstack = 0
  1998 ;; hardware stack exceeded
  1999                           ; Regs used in _AdcInit: [wreg]
  2000  08E7  3011               	movlw	17
  2001  08E8  009F               	movwf	31	;volatile
  2002                           
  2003                           ;adc.h: 36: ADCON1 = 0x02;
  2004  08E9  3002               	movlw	2
  2005  08EA  1683               	bsf	3,5	;RP0=1, select bank1
  2006  08EB  009F               	movwf	31	;volatile
  2007                           
  2008                           ;adc.h: 37: TRISA |= 0x04;
  2009  08EC  1505               	bsf	5,2	;volatile
  2010  08ED  0008               	return
  2011  08EE                     __end_of_AdcInit:
  2012                           
  2013                           	psect	text6
  2014  0939                     __ptext6:	
  2015 ;; *************** function __drawShape *****************
  2016 ;; Defined at:
  2017 ;;		line 108 in file "tetris.h"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  t               1    wreg     PTR struct Tetris
  2020 ;;		 -> game(32), 
  2021 ;;  shape           1   14[BANK1 ] unsigned char 
  2022 ;;  x               1   15[BANK1 ] unsigned char 
  2023 ;;  y               1   16[BANK1 ] unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  t               1   21[BANK1 ] PTR struct Tetris
  2026 ;;		 -> game(32), 
  2027 ;;  p               2   26[BANK1 ] unsigned int 
  2028 ;;  by              2   24[BANK1 ] unsigned int 
  2029 ;;  bx              2   22[BANK1 ] unsigned int 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 300/100
  2036 ;;		On exit  : 300/100
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2039 ;;      Params:         0       0       3       0       0
  2040 ;;      Locals:         0       0       7       0       0
  2041 ;;      Temps:          0       0       4       0       0
  2042 ;;      Totals:         0       0      14       0       0
  2043 ;;Total ram usage:       14 bytes
  2044 ;; Hardware stack levels used: 1
  2045 ;; Hardware stack levels required when called: 11
  2046 ;; This function calls:
  2047 ;;		__drawBlock
  2048 ;;		__getBlock
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function __drawShape
  2056  0939                     __drawShape:
  2057                           
  2058                           ;incstack = 0
  2059 ;; hardware stack exceeded
  2060                           ; Regs used in __drawShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2061                           ;__drawShape@t stored from wreg
  2062  0939  00B5               	movwf	__drawShape@t^(0+128)
  2063                           
  2064                           ;tetris.h: 110: for (uint16_t p=table[shape],bx,by;bx=(uint8_t)(x+p%4),by=(uint8_t)(y+p/
      +                          4%4),p;p>>=4) {
  2065  093A  082E               	movf	__drawShape@shape^(0+128),w
  2066  093B  00B1               	movwf	??__drawShape^(0+128)
  2067  093C  0731               	addwf	??__drawShape^(0+128),w
  2068  093D  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  2069  093E  0084               	movwf	4
  2070  093F  120A  158A  2000  120A  158A  	fcall	stringdir
  2071  0944  00BA               	movwf	__drawShape@p^(0+128)
  2072  0945  120A  158A  2000  120A  158A  	fcall	stringdir
  2073  094A  00BB               	movwf	(__drawShape@p+1)^(0+128)
  2074  094B                     l3499:
  2075  094B  3003               	movlw	3
  2076  094C  053A               	andwf	__drawShape@p^(0+128),w
  2077  094D  00B1               	movwf	??__drawShape^(0+128)
  2078  094E  082F               	movf	__drawShape@x^(0+128),w
  2079  094F  0731               	addwf	??__drawShape^(0+128),w
  2080  0950  00B2               	movwf	(??__drawShape+1)^(0+128)
  2081  0951  01B3               	clrf	((??__drawShape+1)^(0+128)+1)
  2082  0952  0832               	movf	(??__drawShape+1)^(0+128),w
  2083  0953  00B6               	movwf	__drawShape@bx^(0+128)
  2084  0954  0833               	movf	(??__drawShape+2)^(0+128),w
  2085  0955  00B7               	movwf	(__drawShape@bx+1)^(0+128)
  2086  0956  083A               	movf	__drawShape@p^(0+128),w
  2087  0957  00B1               	movwf	??__drawShape^(0+128)
  2088  0958  3002               	movlw	2
  2089  0959                     u4925:
  2090  0959  1003               	clrc
  2091  095A  0CB1               	rrf	??__drawShape^(0+128),f
  2092  095B  3EFF               	addlw	-1
  2093  095C  1D03               	skipz
  2094  095D  2959               	goto	u4925
  2095  095E  3003               	movlw	3
  2096  095F  0531               	andwf	??__drawShape^(0+128),w
  2097  0960  00B2               	movwf	(??__drawShape+1)^(0+128)
  2098  0961  0830               	movf	__drawShape@y^(0+128),w
  2099  0962  0732               	addwf	(??__drawShape+1)^(0+128),w
  2100  0963  00B3               	movwf	(??__drawShape+2)^(0+128)
  2101  0964  01B4               	clrf	((??__drawShape+2)^(0+128)+1)
  2102  0965  0833               	movf	(??__drawShape+2)^(0+128),w
  2103  0966  00B8               	movwf	__drawShape@by^(0+128)
  2104  0967  0834               	movf	(??__drawShape+3)^(0+128),w
  2105  0968  00B9               	movwf	(__drawShape@by+1)^(0+128)
  2106  0969  083A               	movf	__drawShape@p^(0+128),w
  2107  096A  043B               	iorwf	(__drawShape@p+1)^(0+128),w
  2108  096B  1903               	btfsc	3,2
  2109  096C  0008               	return
  2110                           
  2111                           ;tetris.h: 111: if (bx < 10 && by < 20 && _getBlock(t, bx, by)) {
  2112  096D  3000               	movlw	0
  2113  096E  0237               	subwf	(__drawShape@bx+1)^(0+128),w
  2114  096F  300A               	movlw	10
  2115  0970  1903               	skipnz
  2116  0971  0236               	subwf	__drawShape@bx^(0+128),w
  2117  0972  1803               	skipnc
  2118  0973  2996               	goto	l3497
  2119  0974  3000               	movlw	0
  2120  0975  0239               	subwf	(__drawShape@by+1)^(0+128),w
  2121  0976  3014               	movlw	20
  2122  0977  1903               	skipnz
  2123  0978  0238               	subwf	__drawShape@by^(0+128),w
  2124  0979  1803               	skipnc
  2125  097A  2996               	goto	l3497
  2126  097B  0836               	movf	__drawShape@bx^(0+128),w
  2127  097C  00B1               	movwf	??__drawShape^(0+128)
  2128  097D  0831               	movf	??__drawShape^(0+128),w
  2129  097E  00A4               	movwf	__getBlock@x^(0+128)
  2130  097F  0838               	movf	__drawShape@by^(0+128),w
  2131  0980  00B2               	movwf	(??__drawShape+1)^(0+128)
  2132  0981  0832               	movf	(??__drawShape+1)^(0+128),w
  2133  0982  00A5               	movwf	__getBlock@y^(0+128)
  2134  0983  0835               	movf	__drawShape@t^(0+128),w
  2135  0984  160A  118A  25D5  120A  158A  	fcall	__getBlock
  2136  0989  3A00               	xorlw	0
  2137  098A  1903               	skipnz
  2138  098B  2996               	goto	l3497
  2139                           
  2140                           ;tetris.h: 112: _drawBlock(bx, by);
  2141  098C  0838               	movf	__drawShape@by^(0+128),w
  2142  098D  00B1               	movwf	??__drawShape^(0+128)
  2143  098E  0831               	movf	??__drawShape^(0+128),w
  2144  098F  00AA               	movwf	__drawBlock@y^(0+128)
  2145  0990  0836               	movf	__drawShape@bx^(0+128),w
  2146  0991  160A  118A  2376  120A  158A  	fcall	__drawBlock
  2147  0996                     l3497:
  2148  0996  3004               	movlw	4
  2149  0997                     u4915:
  2150  0997  1003               	clrc
  2151  0998  0CBB               	rrf	(__drawShape@p+1)^(0+128),f
  2152  0999  0CBA               	rrf	__drawShape@p^(0+128),f
  2153  099A  3EFF               	addlw	-1
  2154  099B  1D03               	skipz
  2155  099C  2997               	goto	u4915
  2156  099D  294B               	goto	l3499
  2157  099E                     __end_of__drawShape:
  2158                           
  2159                           	psect	text7
  2160  15D5                     __ptext7:	
  2161 ;; *************** function __getBlock *****************
  2162 ;; Defined at:
  2163 ;;		line 76 in file "tetris.h"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  t               1    wreg     PTR struct Tetris
  2166 ;;		 -> game(32), 
  2167 ;;  x               1    4[BANK1 ] unsigned char 
  2168 ;;  y               1    5[BANK1 ] unsigned char 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  t               1   10[BANK1 ] PTR struct Tetris
  2171 ;;		 -> game(32), 
  2172 ;;  n               1    9[BANK1 ] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      unsigned char 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 300/100
  2179 ;;		On exit  : 300/100
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2182 ;;      Params:         0       0       2       0       0
  2183 ;;      Locals:         0       0       2       0       0
  2184 ;;      Temps:          0       0       3       0       0
  2185 ;;      Totals:         0       0       7       0       0
  2186 ;;Total ram usage:        7 bytes
  2187 ;; Hardware stack levels used: 1
  2188 ;; Hardware stack levels required when called: 8
  2189 ;; This function calls:
  2190 ;;		___bmul
  2191 ;; This function is called by:
  2192 ;;		__drawShape
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function __getBlock
  2198  15D5                     __getBlock:
  2199                           
  2200                           ;incstack = 0
  2201 ;; hardware stack exceeded
  2202                           ; Regs used in __getBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2203                           ;__getBlock@t stored from wreg
  2204  15D5  00AA               	movwf	__getBlock@t^(0+128)
  2205                           
  2206                           ;tetris.h: 77: if (x < 10 && y < 20) {
  2207  15D6  300A               	movlw	10
  2208  15D7  0224               	subwf	__getBlock@x^(0+128),w
  2209  15D8  1803               	skipnc
  2210  15D9  2E08               	goto	l3025
  2211  15DA  3014               	movlw	20
  2212  15DB  0225               	subwf	__getBlock@y^(0+128),w
  2213  15DC  1803               	skipnc
  2214  15DD  2E08               	goto	l3025
  2215                           
  2216                           ;tetris.h: 78: uint8_t n = 10 * y + x;
  2217  15DE  300A               	movlw	10
  2218  15DF  00A6               	movwf	??__getBlock^(0+128)
  2219  15E0  0826               	movf	??__getBlock^(0+128),w
  2220  15E1  00A0               	movwf	___bmul@multiplicand^(0+128)
  2221  15E2  0825               	movf	__getBlock@y^(0+128),w
  2222  15E3  160A  118A  232B  160A  118A  	fcall	___bmul
  2223  15E8  0724               	addwf	__getBlock@x^(0+128),w
  2224  15E9  00A7               	movwf	(??__getBlock+1)^(0+128)
  2225  15EA  0827               	movf	(??__getBlock+1)^(0+128),w
  2226  15EB  00A9               	movwf	__getBlock@n^(0+128)
  2227                           
  2228                           ;tetris.h: 79: return (t->map[n / 8] >> (n % 8)) & 1;
  2229  15EC  0829               	movf	__getBlock@n^(0+128),w
  2230  15ED  00A6               	movwf	??__getBlock^(0+128)
  2231  15EE  3003               	movlw	3
  2232  15EF                     u3925:
  2233  15EF  1003               	clrc
  2234  15F0  0CA6               	rrf	??__getBlock^(0+128),f
  2235  15F1  3EFF               	addlw	-1
  2236  15F2  1D03               	skipz
  2237  15F3  2DEF               	goto	u3925
  2238  15F4  0826               	movf	??__getBlock^(0+128),w
  2239  15F5  072A               	addwf	__getBlock@t^(0+128),w
  2240  15F6  00A7               	movwf	(??__getBlock+1)^(0+128)
  2241  15F7  0827               	movf	(??__getBlock+1)^(0+128),w
  2242  15F8  0084               	movwf	4
  2243  15F9  1383               	bcf	3,7	;select IRP bank0
  2244  15FA  0800               	movf	0,w
  2245  15FB  00A8               	movwf	(??__getBlock+2)^(0+128)
  2246  15FC  0829               	movf	__getBlock@n^(0+128),w
  2247  15FD  3907               	andlw	7
  2248  15FE  3E01               	addlw	1
  2249  15FF  2E02               	goto	u3934
  2250  1600                     u3935:
  2251  1600  1003               	clrc
  2252  1601  0CA8               	rrf	(??__getBlock+2)^(0+128),f
  2253  1602                     u3934:
  2254  1602  3EFF               	addlw	-1
  2255  1603  1D03               	skipz
  2256  1604  2E00               	goto	u3935
  2257  1605  0828               	movf	(??__getBlock+2)^(0+128),w
  2258  1606  3901               	andlw	1
  2259  1607  0008               	return
  2260  1608                     l3025:
  2261                           
  2262                           ;tetris.h: 80: };tetris.h: 81: return 0;
  2263  1608  3000               	movlw	0
  2264  1609  0008               	return
  2265  160A                     __end_of__getBlock:
  2266                           
  2267                           	psect	text8
  2268  132B                     __ptext8:	
  2269 ;; *************** function ___bmul *****************
  2270 ;; Defined at:
  2271 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  multiplier      1    wreg     unsigned char 
  2274 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  multiplier      1    3[BANK1 ] unsigned char 
  2277 ;;  product         1    2[BANK1 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      unsigned char 
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 300/100
  2284 ;;		On exit  : 300/100
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2287 ;;      Params:         0       0       1       0       0
  2288 ;;      Locals:         0       0       2       0       0
  2289 ;;      Temps:          0       0       1       0       0
  2290 ;;      Totals:         0       0       4       0       0
  2291 ;;Total ram usage:        4 bytes
  2292 ;; Hardware stack levels used: 1
  2293 ;; Hardware stack levels required when called: 7
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		__getBlock
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function ___bmul
  2303  132B                     ___bmul:
  2304                           
  2305                           ;incstack = 0
  2306 ;; hardware stack exceeded
  2307                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2308                           ;___bmul@multiplier stored from wreg
  2309  132B  00A3               	movwf	___bmul@multiplier^(0+128)
  2310  132C  01A2               	clrf	___bmul@product^(0+128)
  2311  132D                     l2809:
  2312  132D  1C23               	btfss	___bmul@multiplier^(0+128),0
  2313  132E  2B33               	goto	l2813
  2314  132F  0820               	movf	___bmul@multiplicand^(0+128),w
  2315  1330  00A1               	movwf	??___bmul^(0+128)
  2316  1331  0821               	movf	??___bmul^(0+128),w
  2317  1332  07A2               	addwf	___bmul@product^(0+128),f
  2318  1333                     l2813:
  2319  1333  1003               	clrc
  2320  1334  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  2321  1335  1003               	clrc
  2322  1336  0CA3               	rrf	___bmul@multiplier^(0+128),f
  2323  1337  0823               	movf	___bmul@multiplier^(0+128),w
  2324  1338  1D03               	btfss	3,2
  2325  1339  2B2D               	goto	l2809
  2326  133A  0822               	movf	___bmul@product^(0+128),w
  2327  133B  0008               	return
  2328  133C                     __end_of___bmul:
  2329                           
  2330                           	psect	text9
  2331  0CA3                     __ptext9:	
  2332 ;; *************** function _UIPageMainToGame *****************
  2333 ;; Defined at:
  2334 ;;		line 77 in file "ui.h"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  i               1   21[BANK1 ] unsigned char 
  2339 ;;  i               1   20[BANK1 ] unsigned char 
  2340 ;;  i               1   19[BANK1 ] unsigned char 
  2341 ;;  i               1   18[BANK1 ] unsigned char 
  2342 ;;  i               1   17[BANK1 ] unsigned char 
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2347 ;; Tracked objects:
  2348 ;;		On entry : 300/100
  2349 ;;		On exit  : 300/100
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2352 ;;      Params:         0       0       0       0       0
  2353 ;;      Locals:         0       0       5       0       0
  2354 ;;      Temps:          0       0       2       0       0
  2355 ;;      Totals:         0       0       7       0       0
  2356 ;;Total ram usage:        7 bytes
  2357 ;; Hardware stack levels used: 1
  2358 ;; Hardware stack levels required when called: 11
  2359 ;; This function calls:
  2360 ;;		_UIClearGame
  2361 ;;		_UartCurMove
  2362 ;;		_UartCurSet
  2363 ;;		_UartSendString
  2364 ;;		_UartSendUTF8
  2365 ;; This function is called by:
  2366 ;;		_main
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           
  2371                           ;psect for function _UIPageMainToGame
  2372  0CA3                     _UIPageMainToGame:
  2373                           
  2374                           ;ui.h: 78: UIClearGame();
  2375                           
  2376                           ;incstack = 0
  2377 ;; hardware stack exceeded
  2378                           ; Regs used in _UIPageMainToGame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2379  0CA3  160A  118A  249A  120A  158A  	fcall	_UIClearGame
  2380                           
  2381                           ;ui.h: 79: UartCurSet(44, 1);
  2382  0CA8  01A7               	clrf	UartCurSet@y^(0+128)
  2383  0CA9  0AA7               	incf	UartCurSet@y^(0+128),f
  2384  0CAA  302C               	movlw	44
  2385  0CAB  120A  158A  23A6  120A  158A  	fcall	_UartCurSet
  2386                           
  2387                           ;ui.h: 80: UartSendString("\xe2\x94\xac");
  2388  0CB0  30D6               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2389  0CB1  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2390                           
  2391                           ;ui.h: 81: for (uint8_t i = 2; i < 22; i++) {
  2392  0CB6  3002               	movlw	2
  2393  0CB7  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2394  0CB8  082F               	movf	??_UIPageMainToGame^(0+128),w
  2395  0CB9  00B1               	movwf	UIPageMainToGame@i^(0+128)
  2396  0CBA                     l3409:
  2397                           
  2398                           ;ui.h: 82: UartCurMove(-1, 1);
  2399  0CBA  01A9               	clrf	UartCurMove@y^(0+128)
  2400  0CBB  0AA9               	incf	UartCurMove@y^(0+128),f
  2401  0CBC  30FF               	movlw	255
  2402  0CBD  120A  158A  26D5  120A  158A  	fcall	_UartCurMove
  2403                           
  2404                           ;ui.h: 83: UartSendUTF8(0xe2, 0x94, 0x82);
  2405  0CC2  3094               	movlw	148
  2406  0CC3  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2407  0CC4  082F               	movf	??_UIPageMainToGame^(0+128),w
  2408  0CC5  00A1               	movwf	UartSendUTF8@b^(0+128)
  2409  0CC6  3082               	movlw	130
  2410  0CC7  00B0               	movwf	(??_UIPageMainToGame+1)^(0+128)
  2411  0CC8  0830               	movf	(??_UIPageMainToGame+1)^(0+128),w
  2412  0CC9  00A2               	movwf	UartSendUTF8@c^(0+128)
  2413  0CCA  30E2               	movlw	226
  2414  0CCB  160A  118A  233C  120A  158A  	fcall	_UartSendUTF8
  2415  0CD0  3001               	movlw	1
  2416  0CD1  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2417  0CD2  082F               	movf	??_UIPageMainToGame^(0+128),w
  2418  0CD3  07B1               	addwf	UIPageMainToGame@i^(0+128),f
  2419  0CD4  3016               	movlw	22
  2420  0CD5  0231               	subwf	UIPageMainToGame@i^(0+128),w
  2421  0CD6  1C03               	skipc
  2422  0CD7  2CBA               	goto	l3409
  2423                           
  2424                           ;ui.h: 84: };ui.h: 85: UartCurMove(-1, 1);
  2425  0CD8  01A9               	clrf	UartCurMove@y^(0+128)
  2426  0CD9  0AA9               	incf	UartCurMove@y^(0+128),f
  2427  0CDA  30FF               	movlw	255
  2428  0CDB  120A  158A  26D5  120A  158A  	fcall	_UartCurMove
  2429                           
  2430                           ;ui.h: 86: UartSendUTF8(0xe2, 0x94, 0xB4);
  2431  0CE0  3094               	movlw	148
  2432  0CE1  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2433  0CE2  082F               	movf	??_UIPageMainToGame^(0+128),w
  2434  0CE3  00A1               	movwf	UartSendUTF8@b^(0+128)
  2435  0CE4  30B4               	movlw	180
  2436  0CE5  00B0               	movwf	(??_UIPageMainToGame+1)^(0+128)
  2437  0CE6  0830               	movf	(??_UIPageMainToGame+1)^(0+128),w
  2438  0CE7  00A2               	movwf	UartSendUTF8@c^(0+128)
  2439  0CE8  30E2               	movlw	226
  2440  0CE9  160A  118A  233C  120A  158A  	fcall	_UartSendUTF8
  2441                           
  2442                           ;ui.h: 87: UartCurSet(23, 1);
  2443  0CEE  01A7               	clrf	UartCurSet@y^(0+128)
  2444  0CEF  0AA7               	incf	UartCurSet@y^(0+128),f
  2445  0CF0  3017               	movlw	23
  2446  0CF1  120A  158A  23A6  120A  158A  	fcall	_UartCurSet
  2447                           
  2448                           ;ui.h: 88: UartSendUTF8(0xE2, 0x94, 0xac);
  2449  0CF6  3094               	movlw	148
  2450  0CF7  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2451  0CF8  082F               	movf	??_UIPageMainToGame^(0+128),w
  2452  0CF9  00A1               	movwf	UartSendUTF8@b^(0+128)
  2453  0CFA  30AC               	movlw	172
  2454  0CFB  00B0               	movwf	(??_UIPageMainToGame+1)^(0+128)
  2455  0CFC  0830               	movf	(??_UIPageMainToGame+1)^(0+128),w
  2456  0CFD  00A2               	movwf	UartSendUTF8@c^(0+128)
  2457  0CFE  30E2               	movlw	226
  2458  0CFF  160A  118A  233C  120A  158A  	fcall	_UartSendUTF8
  2459                           
  2460                           ;ui.h: 89: for (uint8_t i = 2; i < 22; i++) {
  2461  0D04  3002               	movlw	2
  2462  0D05  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2463  0D06  082F               	movf	??_UIPageMainToGame^(0+128),w
  2464  0D07  00B2               	movwf	UIPageMainToGame@i_192^(0+128)
  2465  0D08                     l3429:
  2466                           
  2467                           ;ui.h: 90: UartCurMove(-1, 1);
  2468  0D08  01A9               	clrf	UartCurMove@y^(0+128)
  2469  0D09  0AA9               	incf	UartCurMove@y^(0+128),f
  2470  0D0A  30FF               	movlw	255
  2471  0D0B  120A  158A  26D5  120A  158A  	fcall	_UartCurMove
  2472                           
  2473                           ;ui.h: 91: UartSendUTF8(0xe2, 0x94, 0x82);
  2474  0D10  3094               	movlw	148
  2475  0D11  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2476  0D12  082F               	movf	??_UIPageMainToGame^(0+128),w
  2477  0D13  00A1               	movwf	UartSendUTF8@b^(0+128)
  2478  0D14  3082               	movlw	130
  2479  0D15  00B0               	movwf	(??_UIPageMainToGame+1)^(0+128)
  2480  0D16  0830               	movf	(??_UIPageMainToGame+1)^(0+128),w
  2481  0D17  00A2               	movwf	UartSendUTF8@c^(0+128)
  2482  0D18  30E2               	movlw	226
  2483  0D19  160A  118A  233C  120A  158A  	fcall	_UartSendUTF8
  2484  0D1E  3001               	movlw	1
  2485  0D1F  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2486  0D20  082F               	movf	??_UIPageMainToGame^(0+128),w
  2487  0D21  07B2               	addwf	UIPageMainToGame@i_192^(0+128),f
  2488  0D22  3016               	movlw	22
  2489  0D23  0232               	subwf	UIPageMainToGame@i_192^(0+128),w
  2490  0D24  1C03               	skipc
  2491  0D25  2D08               	goto	l3429
  2492                           
  2493                           ;ui.h: 92: };ui.h: 93: UartCurMove(-1, 1);
  2494  0D26  01A9               	clrf	UartCurMove@y^(0+128)
  2495  0D27  0AA9               	incf	UartCurMove@y^(0+128),f
  2496  0D28  30FF               	movlw	255
  2497  0D29  120A  158A  26D5  120A  158A  	fcall	_UartCurMove
  2498                           
  2499                           ;ui.h: 94: UartSendUTF8(0xe2, 0x94, 0xB4);
  2500  0D2E  3094               	movlw	148
  2501  0D2F  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2502  0D30  082F               	movf	??_UIPageMainToGame^(0+128),w
  2503  0D31  00A1               	movwf	UartSendUTF8@b^(0+128)
  2504  0D32  30B4               	movlw	180
  2505  0D33  00B0               	movwf	(??_UIPageMainToGame+1)^(0+128)
  2506  0D34  0830               	movf	(??_UIPageMainToGame+1)^(0+128),w
  2507  0D35  00A2               	movwf	UartSendUTF8@c^(0+128)
  2508  0D36  30E2               	movlw	226
  2509  0D37  160A  118A  233C  120A  158A  	fcall	_UartSendUTF8
  2510                           
  2511                           ;ui.h: 95: UartCurSet(50, 4);
  2512  0D3C  3004               	movlw	4
  2513  0D3D  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2514  0D3E  082F               	movf	??_UIPageMainToGame^(0+128),w
  2515  0D3F  00A7               	movwf	UartCurSet@y^(0+128)
  2516  0D40  3032               	movlw	50
  2517  0D41  120A  158A  23A6  120A  158A  	fcall	_UartCurSet
  2518                           
  2519                           ;ui.h: 96: UartSendString("\xe2\x94\x8c");
  2520  0D46  30C6               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2521  0D47  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2522                           
  2523                           ;ui.h: 97: for (uint8_t i = 0; i < 10; i++) UartSendString("\xe2\x94\x80");
  2524  0D4C  01B3               	clrf	UIPageMainToGame@i_194^(0+128)
  2525  0D4D                     l3451:
  2526  0D4D  30C2               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2527  0D4E  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2528  0D53  3001               	movlw	1
  2529  0D54  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2530  0D55  082F               	movf	??_UIPageMainToGame^(0+128),w
  2531  0D56  07B3               	addwf	UIPageMainToGame@i_194^(0+128),f
  2532  0D57  300A               	movlw	10
  2533  0D58  0233               	subwf	UIPageMainToGame@i_194^(0+128),w
  2534  0D59  1C03               	skipc
  2535  0D5A  2D4D               	goto	l3451
  2536                           
  2537                           ;ui.h: 98: UartSendString("\xe2\x94\x90");
  2538  0D5B  30CA               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2539  0D5C  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2540                           
  2541                           ;ui.h: 99: for (uint8_t i = 0; i < 4; i++) {
  2542  0D61  01B4               	clrf	UIPageMainToGame@i_197^(0+128)
  2543  0D62                     l3465:
  2544                           
  2545                           ;ui.h: 100: UartCurMove(-12, 1);
  2546  0D62  01A9               	clrf	UartCurMove@y^(0+128)
  2547  0D63  0AA9               	incf	UartCurMove@y^(0+128),f
  2548  0D64  30F4               	movlw	244
  2549  0D65  120A  158A  26D5  120A  158A  	fcall	_UartCurMove
  2550                           
  2551                           ;ui.h: 101: UartSendString("\xe2\x94\x82          \xe2\x94\x82");
  2552  0D6A  309D               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2553  0D6B  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2554  0D70  3001               	movlw	1
  2555  0D71  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2556  0D72  082F               	movf	??_UIPageMainToGame^(0+128),w
  2557  0D73  07B4               	addwf	UIPageMainToGame@i_197^(0+128),f
  2558  0D74  3004               	movlw	4
  2559  0D75  0234               	subwf	UIPageMainToGame@i_197^(0+128),w
  2560  0D76  1C03               	skipc
  2561  0D77  2D62               	goto	l3465
  2562                           
  2563                           ;ui.h: 102: };ui.h: 103: UartCurMove(-12, 1);
  2564  0D78  01A9               	clrf	UartCurMove@y^(0+128)
  2565  0D79  0AA9               	incf	UartCurMove@y^(0+128),f
  2566  0D7A  30F4               	movlw	244
  2567  0D7B  120A  158A  26D5  120A  158A  	fcall	_UartCurMove
  2568                           
  2569                           ;ui.h: 104: UartSendString("\xe2\x94\x94");
  2570  0D80  30CE               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2571  0D81  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2572                           
  2573                           ;ui.h: 105: for (uint8_t i = 0; i < 10; i++) UartSendString("\xe2\x94\x80");
  2574  0D86  01B5               	clrf	UIPageMainToGame@i_200^(0+128)
  2575  0D87                     l3479:
  2576  0D87  30C2               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2577  0D88  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2578  0D8D  3001               	movlw	1
  2579  0D8E  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2580  0D8F  082F               	movf	??_UIPageMainToGame^(0+128),w
  2581  0D90  07B5               	addwf	UIPageMainToGame@i_200^(0+128),f
  2582  0D91  300A               	movlw	10
  2583  0D92  0235               	subwf	UIPageMainToGame@i_200^(0+128),w
  2584  0D93  1C03               	skipc
  2585  0D94  2D87               	goto	l3479
  2586                           
  2587                           ;ui.h: 106: UartSendString("\xe2\x94\x98");
  2588  0D95  30D2               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2589  0D96  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2590                           
  2591                           ;ui.h: 107: UartCurSet(52, 3);
  2592  0D9B  3003               	movlw	3
  2593  0D9C  00AF               	movwf	??_UIPageMainToGame^(0+128)
  2594  0D9D  082F               	movf	??_UIPageMainToGame^(0+128),w
  2595  0D9E  00A7               	movwf	UartCurSet@y^(0+128)
  2596  0D9F  3034               	movlw	52
  2597  0DA0  120A  158A  23A6  120A  158A  	fcall	_UartCurSet
  2598                           
  2599                           ;ui.h: 108: UartSendString("\xe4\xb8\x8b\xe6\xac\xa1\xE5\x87\xBA\xE7\x8E\xB0");
  2600  0DA5  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2601  0DA6  160A  118A  23D5   	fcall	_UartSendString
  2602  0DA9  0008               	return
  2603  0DAA                     __end_of_UIPageMainToGame:
  2604                           
  2605                           	psect	text10
  2606  149A                     __ptext10:	
  2607 ;; *************** function _UIClearGame *****************
  2608 ;; Defined at:
  2609 ;;		line 69 in file "ui.h"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  i               1   14[BANK1 ] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 300/100
  2620 ;;		On exit  : 300/100
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2623 ;;      Params:         0       0       0       0       0
  2624 ;;      Locals:         0       0       1       0       0
  2625 ;;      Temps:          0       0       1       0       0
  2626 ;;      Totals:         0       0       2       0       0
  2627 ;;Total ram usage:        2 bytes
  2628 ;; Hardware stack levels used: 1
  2629 ;; Hardware stack levels required when called: 10
  2630 ;; This function calls:
  2631 ;;		_UartCurMove
  2632 ;;		_UartCurSet
  2633 ;;		_UartSendString
  2634 ;; This function is called by:
  2635 ;;		_UIPageMainToGame
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function _UIClearGame
  2641  149A                     _UIClearGame:
  2642                           
  2643                           ;ui.h: 70: UartCurSet(24, 2);
  2644                           
  2645                           ;incstack = 0
  2646 ;; hardware stack exceeded
  2647                           ; Regs used in _UIClearGame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2648  149A  3002               	movlw	2
  2649  149B  00AD               	movwf	??_UIClearGame^(0+128)
  2650  149C  082D               	movf	??_UIClearGame^(0+128),w
  2651  149D  00A7               	movwf	UartCurSet@y^(0+128)
  2652  149E  3018               	movlw	24
  2653  149F  120A  158A  23A6  160A  118A  	fcall	_UartCurSet
  2654                           
  2655                           ;ui.h: 71: for (uint8_t i = 0; i < 20; i++) {
  2656  14A4  01AE               	clrf	UIClearGame@i^(0+128)
  2657  14A5                     l3005:
  2658                           
  2659                           ;ui.h: 72: UartSendString("                    ");
  2660  14A5  3074               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2661  14A6  160A  118A  23D5  160A  118A  	fcall	_UartSendString
  2662                           
  2663                           ;ui.h: 73: if (i != 19) UartCurMove(-20, 1);
  2664  14AB  3013               	movlw	19
  2665  14AC  062E               	xorwf	UIClearGame@i^(0+128),w
  2666  14AD  1903               	btfsc	3,2
  2667  14AE  2CB7               	goto	l3011
  2668  14AF  01A9               	clrf	UartCurMove@y^(0+128)
  2669  14B0  0AA9               	incf	UartCurMove@y^(0+128),f
  2670  14B1  30EC               	movlw	236
  2671  14B2  120A  158A  26D5  160A  118A  	fcall	_UartCurMove
  2672  14B7                     l3011:
  2673  14B7  3001               	movlw	1
  2674  14B8  00AD               	movwf	??_UIClearGame^(0+128)
  2675  14B9  082D               	movf	??_UIClearGame^(0+128),w
  2676  14BA  07AE               	addwf	UIClearGame@i^(0+128),f
  2677  14BB  3014               	movlw	20
  2678  14BC  022E               	subwf	UIClearGame@i^(0+128),w
  2679  14BD  1803               	btfsc	3,0
  2680  14BE  0008               	return
  2681  14BF  2CA5               	goto	l3005
  2682  14C0                     __end_of_UIClearGame:
  2683                           
  2684                           	psect	text11
  2685  0ED5                     __ptext11:	
  2686 ;; *************** function _UartCurMove *****************
  2687 ;; Defined at:
  2688 ;;		line 103 in file "uart.h"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  x               1    wreg     char 
  2691 ;;  y               1    9[BANK1 ] char 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  x               1   12[BANK1 ] char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 300/100
  2700 ;;		On exit  : 300/100
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2703 ;;      Params:         0       0       1       0       0
  2704 ;;      Locals:         0       0       1       0       0
  2705 ;;      Temps:          0       0       2       0       0
  2706 ;;      Totals:         0       0       4       0       0
  2707 ;;Total ram usage:        4 bytes
  2708 ;; Hardware stack levels used: 1
  2709 ;; Hardware stack levels required when called: 9
  2710 ;; This function calls:
  2711 ;;		_UartSendChar
  2712 ;;		_UartSendString
  2713 ;;		___awdiv
  2714 ;;		___awmod
  2715 ;; This function is called by:
  2716 ;;		_UIClearGame
  2717 ;;		_UIPageMainToGame
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _UartCurMove
  2723  0ED5                     _UartCurMove:
  2724                           
  2725                           ;incstack = 0
  2726 ;; hardware stack exceeded
  2727                           ; Regs used in _UartCurMove: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2728                           ;UartCurMove@x stored from wreg
  2729  0ED5  00AC               	movwf	UartCurMove@x^(0+128)
  2730                           
  2731                           ;uart.h: 104: UartSendString("\033[");
  2732  0ED6  30DD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2733  0ED7  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2734                           
  2735                           ;uart.h: 105: if (y > 0) {
  2736  0EDC  0829               	movf	UartCurMove@y^(0+128),w
  2737  0EDD  3A80               	xorlw	128
  2738  0EDE  3E7F               	addlw	-129
  2739  0EDF  1C03               	skipc
  2740  0EE0  2F1F               	goto	l2743
  2741                           
  2742                           ;uart.h: 106: if (y / 10) UartSendChar(y / 10 + '0');
  2743  0EE1  300A               	movlw	10
  2744  0EE2  00A0               	movwf	___awdiv@divisor^(0+128)
  2745  0EE3  3000               	movlw	0
  2746  0EE4  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2747  0EE5  0829               	movf	UartCurMove@y^(0+128),w
  2748  0EE6  00A2               	movwf	___awdiv@dividend^(0+128)
  2749  0EE7  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2750  0EE8  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2751  0EE9  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2752  0EEA  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2753  0EEF  0820               	movf	?___awdiv^(0+128),w
  2754  0EF0  0421               	iorwf	(?___awdiv+1)^(0+128),w
  2755  0EF1  1903               	btfsc	3,2
  2756  0EF2  2F08               	goto	l94
  2757  0EF3  300A               	movlw	10
  2758  0EF4  00A0               	movwf	___awdiv@divisor^(0+128)
  2759  0EF5  3000               	movlw	0
  2760  0EF6  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2761  0EF7  0829               	movf	UartCurMove@y^(0+128),w
  2762  0EF8  00A2               	movwf	___awdiv@dividend^(0+128)
  2763  0EF9  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2764  0EFA  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2765  0EFB  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2766  0EFC  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2767  0F01  0820               	movf	?___awdiv^(0+128),w
  2768  0F02  3E30               	addlw	48
  2769  0F03  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2770  0F08                     l94:
  2771                           
  2772                           ;uart.h: 107: UartSendChar(y % 10 + '0');
  2773  0F08  300A               	movlw	10
  2774  0F09  00A0               	movwf	___awmod@divisor^(0+128)
  2775  0F0A  3000               	movlw	0
  2776  0F0B  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  2777  0F0C  0829               	movf	UartCurMove@y^(0+128),w
  2778  0F0D  00A2               	movwf	___awmod@dividend^(0+128)
  2779  0F0E  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  2780  0F0F  1BA2               	btfsc	___awmod@dividend^(0+128),7
  2781  0F10  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  2782  0F11  120A  158A  20EE  120A  158A  	fcall	___awmod
  2783  0F16  0820               	movf	?___awmod^(0+128),w
  2784  0F17  3E30               	addlw	48
  2785  0F18  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2786                           
  2787                           ;uart.h: 108: UartSendChar('B');
  2788  0F1D  3042               	movlw	66
  2789  0F1E  2F65               	goto	L1
  2790  0F1F                     l2743:	
  2791                           ;uart.h: 109: } else {
  2792                           
  2793                           
  2794                           ;uart.h: 110: if (-y / 10) UartSendChar(-y / 10 + '0');
  2795  0F1F  30F6               	movlw	246
  2796  0F20  00A0               	movwf	___awdiv@divisor^(0+128)
  2797  0F21  30FF               	movlw	255
  2798  0F22  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2799  0F23  0829               	movf	UartCurMove@y^(0+128),w
  2800  0F24  00A2               	movwf	___awdiv@dividend^(0+128)
  2801  0F25  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2802  0F26  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2803  0F27  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2804  0F28  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2805  0F2D  0820               	movf	?___awdiv^(0+128),w
  2806  0F2E  0421               	iorwf	(?___awdiv+1)^(0+128),w
  2807  0F2F  1903               	btfsc	3,2
  2808  0F30  2F46               	goto	l96
  2809  0F31  30F6               	movlw	246
  2810  0F32  00A0               	movwf	___awdiv@divisor^(0+128)
  2811  0F33  30FF               	movlw	255
  2812  0F34  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2813  0F35  0829               	movf	UartCurMove@y^(0+128),w
  2814  0F36  00A2               	movwf	___awdiv@dividend^(0+128)
  2815  0F37  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2816  0F38  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2817  0F39  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2818  0F3A  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2819  0F3F  0820               	movf	?___awdiv^(0+128),w
  2820  0F40  3E30               	addlw	48
  2821  0F41  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2822  0F46                     l96:
  2823                           
  2824                           ;uart.h: 111: UartSendChar(-y % 10 + '0');
  2825  0F46  300A               	movlw	10
  2826  0F47  00A0               	movwf	___awmod@divisor^(0+128)
  2827  0F48  3000               	movlw	0
  2828  0F49  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  2829  0F4A  0829               	movf	UartCurMove@y^(0+128),w
  2830  0F4B  00AA               	movwf	??_UartCurMove^(0+128)
  2831  0F4C  01AB               	clrf	(??_UartCurMove^(0+128)+1)
  2832  0F4D  1BAA               	btfsc	??_UartCurMove^(0+128),7
  2833  0F4E  03AB               	decf	(??_UartCurMove^(0+128)+1),f
  2834  0F4F  09AA               	comf	??_UartCurMove^(0+128),f
  2835  0F50  09AB               	comf	(??_UartCurMove^(0+128)+1),f
  2836  0F51  0AAA               	incf	??_UartCurMove^(0+128),f
  2837  0F52  1903               	skipnz
  2838  0F53  0AAB               	incf	(??_UartCurMove^(0+128)+1),f
  2839  0F54  082A               	movf	??_UartCurMove^(0+128),w
  2840  0F55  00A2               	movwf	___awmod@dividend^(0+128)
  2841  0F56  082B               	movf	(??_UartCurMove+1)^(0+128),w
  2842  0F57  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  2843  0F58  120A  158A  20EE  120A  158A  	fcall	___awmod
  2844  0F5D  0820               	movf	?___awmod^(0+128),w
  2845  0F5E  3E30               	addlw	48
  2846  0F5F  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2847                           
  2848                           ;uart.h: 112: UartSendChar('A');
  2849  0F64  3041               	movlw	65
  2850  0F65                     L1:
  2851  0F65  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2852                           
  2853                           ;uart.h: 113: };uart.h: 114: UartSendString("\033[");
  2854  0F6A  30DD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2855  0F6B  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  2856                           
  2857                           ;uart.h: 115: if (x > 0) {
  2858  0F70  082C               	movf	UartCurMove@x^(0+128),w
  2859  0F71  3A80               	xorlw	128
  2860  0F72  3E7F               	addlw	-129
  2861  0F73  1C03               	skipc
  2862  0F74  2FB6               	goto	l2755
  2863                           
  2864                           ;uart.h: 116: if (x / 10) UartSendChar(x / 10 + '0');
  2865  0F75  300A               	movlw	10
  2866  0F76  00A0               	movwf	___awdiv@divisor^(0+128)
  2867  0F77  3000               	movlw	0
  2868  0F78  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2869  0F79  082C               	movf	UartCurMove@x^(0+128),w
  2870  0F7A  00A2               	movwf	___awdiv@dividend^(0+128)
  2871  0F7B  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2872  0F7C  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2873  0F7D  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2874  0F7E  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2875  0F83  0820               	movf	?___awdiv^(0+128),w
  2876  0F84  0421               	iorwf	(?___awdiv+1)^(0+128),w
  2877  0F85  1903               	btfsc	3,2
  2878  0F86  2F9C               	goto	l98
  2879  0F87  300A               	movlw	10
  2880  0F88  00A0               	movwf	___awdiv@divisor^(0+128)
  2881  0F89  3000               	movlw	0
  2882  0F8A  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2883  0F8B  082C               	movf	UartCurMove@x^(0+128),w
  2884  0F8C  00A2               	movwf	___awdiv@dividend^(0+128)
  2885  0F8D  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2886  0F8E  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2887  0F8F  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2888  0F90  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2889  0F95  0820               	movf	?___awdiv^(0+128),w
  2890  0F96  3E30               	addlw	48
  2891  0F97  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2892  0F9C                     l98:
  2893                           
  2894                           ;uart.h: 117: UartSendChar(x % 10 + '0');
  2895  0F9C  300A               	movlw	10
  2896  0F9D  00A0               	movwf	___awmod@divisor^(0+128)
  2897  0F9E  3000               	movlw	0
  2898  0F9F  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  2899  0FA0  082C               	movf	UartCurMove@x^(0+128),w
  2900  0FA1  00A2               	movwf	___awmod@dividend^(0+128)
  2901  0FA2  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  2902  0FA3  1BA2               	btfsc	___awmod@dividend^(0+128),7
  2903  0FA4  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  2904  0FA5  120A  158A  20EE  120A  158A  	fcall	___awmod
  2905  0FAA  0820               	movf	?___awmod^(0+128),w
  2906  0FAB  3E30               	addlw	48
  2907  0FAC  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2908                           
  2909                           ;uart.h: 118: UartSendChar('C');
  2910  0FB1  3043               	movlw	67
  2911  0FB2  160A  118A  22E4   	fcall	_UartSendChar
  2912                           
  2913                           ;uart.h: 119: } else {
  2914  0FB5  0008               	return
  2915  0FB6                     l2755:
  2916                           
  2917                           ;uart.h: 120: if (-x / 10) UartSendChar(-x / 10 + '0');
  2918  0FB6  30F6               	movlw	246
  2919  0FB7  00A0               	movwf	___awdiv@divisor^(0+128)
  2920  0FB8  30FF               	movlw	255
  2921  0FB9  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2922  0FBA  082C               	movf	UartCurMove@x^(0+128),w
  2923  0FBB  00A2               	movwf	___awdiv@dividend^(0+128)
  2924  0FBC  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2925  0FBD  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2926  0FBE  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2927  0FBF  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2928  0FC4  0820               	movf	?___awdiv^(0+128),w
  2929  0FC5  0421               	iorwf	(?___awdiv+1)^(0+128),w
  2930  0FC6  1903               	btfsc	3,2
  2931  0FC7  2FDD               	goto	l100
  2932  0FC8  30F6               	movlw	246
  2933  0FC9  00A0               	movwf	___awdiv@divisor^(0+128)
  2934  0FCA  30FF               	movlw	255
  2935  0FCB  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  2936  0FCC  082C               	movf	UartCurMove@x^(0+128),w
  2937  0FCD  00A2               	movwf	___awdiv@dividend^(0+128)
  2938  0FCE  01A3               	clrf	(___awdiv@dividend+1)^(0+128)
  2939  0FCF  1BA2               	btfsc	___awdiv@dividend^(0+128),7
  2940  0FD0  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2941  0FD1  120A  118A  27A7  120A  158A  	fcall	___awdiv
  2942  0FD6  0820               	movf	?___awdiv^(0+128),w
  2943  0FD7  3E30               	addlw	48
  2944  0FD8  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2945  0FDD                     l100:
  2946                           
  2947                           ;uart.h: 121: UartSendChar(-x % 10 + '0');
  2948  0FDD  300A               	movlw	10
  2949  0FDE  00A0               	movwf	___awmod@divisor^(0+128)
  2950  0FDF  3000               	movlw	0
  2951  0FE0  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  2952  0FE1  082C               	movf	UartCurMove@x^(0+128),w
  2953  0FE2  00AA               	movwf	??_UartCurMove^(0+128)
  2954  0FE3  01AB               	clrf	(??_UartCurMove^(0+128)+1)
  2955  0FE4  1BAA               	btfsc	??_UartCurMove^(0+128),7
  2956  0FE5  03AB               	decf	(??_UartCurMove^(0+128)+1),f
  2957  0FE6  09AA               	comf	??_UartCurMove^(0+128),f
  2958  0FE7  09AB               	comf	(??_UartCurMove^(0+128)+1),f
  2959  0FE8  0AAA               	incf	??_UartCurMove^(0+128),f
  2960  0FE9  1903               	skipnz
  2961  0FEA  0AAB               	incf	(??_UartCurMove^(0+128)+1),f
  2962  0FEB  082A               	movf	??_UartCurMove^(0+128),w
  2963  0FEC  00A2               	movwf	___awmod@dividend^(0+128)
  2964  0FED  082B               	movf	(??_UartCurMove+1)^(0+128),w
  2965  0FEE  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  2966  0FEF  120A  158A  20EE  120A  158A  	fcall	___awmod
  2967  0FF4  0820               	movf	?___awmod^(0+128),w
  2968  0FF5  3E30               	addlw	48
  2969  0FF6  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  2970                           
  2971                           ;uart.h: 122: UartSendChar('D');
  2972  0FFB  3044               	movlw	68
  2973  0FFC  160A  118A  22E4   	fcall	_UartSendChar
  2974  0FFF  0008               	return
  2975  1000                     __end_of_UartCurMove:
  2976                           
  2977                           	psect	text12
  2978  08EE                     __ptext12:	
  2979 ;; *************** function ___awmod *****************
  2980 ;; Defined at:
  2981 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  divisor         2    0[BANK1 ] int 
  2984 ;;  dividend        2    2[BANK1 ] int 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  sign            1    6[BANK1 ] unsigned char 
  2987 ;;  counter         1    5[BANK1 ] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  2    0[BANK1 ] int 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0
  2992 ;; Tracked objects:
  2993 ;;		On entry : 300/100
  2994 ;;		On exit  : 300/100
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2997 ;;      Params:         0       0       4       0       0
  2998 ;;      Locals:         0       0       2       0       0
  2999 ;;      Temps:          0       0       1       0       0
  3000 ;;      Totals:         0       0       7       0       0
  3001 ;;Total ram usage:        7 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; Hardware stack levels required when called: 7
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_UartCurMove
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           
  3012                           ;psect for function ___awmod
  3013  08EE                     ___awmod:
  3014                           
  3015                           ;incstack = 0
  3016 ;; hardware stack exceeded
  3017                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3018  08EE  01A6               	clrf	___awmod@sign^(0+128)
  3019  08EF  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  3020  08F0  28F8               	goto	l2667
  3021  08F1  09A2               	comf	___awmod@dividend^(0+128),f
  3022  08F2  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  3023  08F3  0AA2               	incf	___awmod@dividend^(0+128),f
  3024  08F4  1903               	skipnz
  3025  08F5  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  3026  08F6  01A6               	clrf	___awmod@sign^(0+128)
  3027  08F7  0AA6               	incf	___awmod@sign^(0+128),f
  3028  08F8                     l2667:
  3029  08F8  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  3030  08F9  28FF               	goto	l2671
  3031  08FA  09A0               	comf	___awmod@divisor^(0+128),f
  3032  08FB  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  3033  08FC  0AA0               	incf	___awmod@divisor^(0+128),f
  3034  08FD  1903               	skipnz
  3035  08FE  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  3036  08FF                     l2671:
  3037  08FF  0820               	movf	___awmod@divisor^(0+128),w
  3038  0900  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  3039  0901  1903               	btfsc	3,2
  3040  0902  292C               	goto	l2689
  3041  0903  01A5               	clrf	___awmod@counter^(0+128)
  3042  0904  0AA5               	incf	___awmod@counter^(0+128),f
  3043  0905                     l2679:
  3044  0905  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  3045  0906  2913               	goto	l2681
  3046  0907  3001               	movlw	1
  3047  0908                     u3245:
  3048  0908  1003               	clrc
  3049  0909  0DA0               	rlf	___awmod@divisor^(0+128),f
  3050  090A  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  3051  090B  3EFF               	addlw	-1
  3052  090C  1D03               	skipz
  3053  090D  2908               	goto	u3245
  3054  090E  3001               	movlw	1
  3055  090F  00A4               	movwf	??___awmod^(0+128)
  3056  0910  0824               	movf	??___awmod^(0+128),w
  3057  0911  07A5               	addwf	___awmod@counter^(0+128),f
  3058  0912  2905               	goto	l2679
  3059  0913                     l2681:
  3060  0913  0821               	movf	(___awmod@divisor+1)^(0+128),w
  3061  0914  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  3062  0915  1D03               	skipz
  3063  0916  2919               	goto	u3265
  3064  0917  0820               	movf	___awmod@divisor^(0+128),w
  3065  0918  0222               	subwf	___awmod@dividend^(0+128),w
  3066  0919                     u3265:
  3067  0919  1C03               	skipc
  3068  091A  2921               	goto	l2685
  3069  091B  0820               	movf	___awmod@divisor^(0+128),w
  3070  091C  02A2               	subwf	___awmod@dividend^(0+128),f
  3071  091D  0821               	movf	(___awmod@divisor+1)^(0+128),w
  3072  091E  1C03               	skipc
  3073  091F  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3074  0920  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  3075  0921                     l2685:
  3076  0921  3001               	movlw	1
  3077  0922                     u3275:
  3078  0922  1003               	clrc
  3079  0923  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  3080  0924  0CA0               	rrf	___awmod@divisor^(0+128),f
  3081  0925  3EFF               	addlw	-1
  3082  0926  1D03               	skipz
  3083  0927  2922               	goto	u3275
  3084  0928  3001               	movlw	1
  3085  0929  02A5               	subwf	___awmod@counter^(0+128),f
  3086  092A  1D03               	btfss	3,2
  3087  092B  2913               	goto	l2681
  3088  092C                     l2689:
  3089  092C  0826               	movf	___awmod@sign^(0+128),w
  3090  092D  1903               	btfsc	3,2
  3091  092E  2934               	goto	l2693
  3092  092F  09A2               	comf	___awmod@dividend^(0+128),f
  3093  0930  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  3094  0931  0AA2               	incf	___awmod@dividend^(0+128),f
  3095  0932  1903               	skipnz
  3096  0933  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  3097  0934                     l2693:
  3098  0934  0823               	movf	(___awmod@dividend+1)^(0+128),w
  3099  0935  00A1               	movwf	(?___awmod+1)^(0+128)
  3100  0936  0822               	movf	___awmod@dividend^(0+128),w
  3101  0937  00A0               	movwf	?___awmod^(0+128)
  3102  0938  0008               	return
  3103  0939                     __end_of___awmod:
  3104                           
  3105                           	psect	text13
  3106  07A7                     __ptext13:	
  3107 ;; *************** function ___awdiv *****************
  3108 ;; Defined at:
  3109 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  divisor         2    0[BANK1 ] int 
  3112 ;;  dividend        2    2[BANK1 ] int 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  quotient        2    7[BANK1 ] int 
  3115 ;;  sign            1    6[BANK1 ] unsigned char 
  3116 ;;  counter         1    5[BANK1 ] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  2    0[BANK1 ] int 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0
  3121 ;; Tracked objects:
  3122 ;;		On entry : 300/100
  3123 ;;		On exit  : 300/100
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3126 ;;      Params:         0       0       4       0       0
  3127 ;;      Locals:         0       0       4       0       0
  3128 ;;      Temps:          0       0       1       0       0
  3129 ;;      Totals:         0       0       9       0       0
  3130 ;;Total ram usage:        9 bytes
  3131 ;; Hardware stack levels used: 1
  3132 ;; Hardware stack levels required when called: 7
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_UartCurMove
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function ___awdiv
  3142  07A7                     ___awdiv:
  3143                           
  3144                           ;incstack = 0
  3145 ;; hardware stack exceeded
  3146                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3147  07A7  01A6               	clrf	___awdiv@sign^(0+128)
  3148  07A8  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  3149  07A9  2FB1               	goto	l2623
  3150  07AA  09A0               	comf	___awdiv@divisor^(0+128),f
  3151  07AB  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  3152  07AC  0AA0               	incf	___awdiv@divisor^(0+128),f
  3153  07AD  1903               	skipnz
  3154  07AE  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  3155  07AF  01A6               	clrf	___awdiv@sign^(0+128)
  3156  07B0  0AA6               	incf	___awdiv@sign^(0+128),f
  3157  07B1                     l2623:
  3158  07B1  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  3159  07B2  2FBC               	goto	l2629
  3160  07B3  09A2               	comf	___awdiv@dividend^(0+128),f
  3161  07B4  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  3162  07B5  0AA2               	incf	___awdiv@dividend^(0+128),f
  3163  07B6  1903               	skipnz
  3164  07B7  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  3165  07B8  3001               	movlw	1
  3166  07B9  00A4               	movwf	??___awdiv^(0+128)
  3167  07BA  0824               	movf	??___awdiv^(0+128),w
  3168  07BB  06A6               	xorwf	___awdiv@sign^(0+128),f
  3169  07BC                     l2629:
  3170  07BC  01A7               	clrf	___awdiv@quotient^(0+128)
  3171  07BD  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
  3172  07BE  0820               	movf	___awdiv@divisor^(0+128),w
  3173  07BF  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  3174  07C0  1903               	btfsc	3,2
  3175  07C1  2FF3               	goto	l2651
  3176  07C2  01A5               	clrf	___awdiv@counter^(0+128)
  3177  07C3  0AA5               	incf	___awdiv@counter^(0+128),f
  3178  07C4                     l2639:
  3179  07C4  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  3180  07C5  2FD2               	goto	l2641
  3181  07C6  3001               	movlw	1
  3182  07C7                     u3145:
  3183  07C7  1003               	clrc
  3184  07C8  0DA0               	rlf	___awdiv@divisor^(0+128),f
  3185  07C9  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  3186  07CA  3EFF               	addlw	-1
  3187  07CB  1D03               	skipz
  3188  07CC  2FC7               	goto	u3145
  3189  07CD  3001               	movlw	1
  3190  07CE  00A4               	movwf	??___awdiv^(0+128)
  3191  07CF  0824               	movf	??___awdiv^(0+128),w
  3192  07D0  07A5               	addwf	___awdiv@counter^(0+128),f
  3193  07D1  2FC4               	goto	l2639
  3194  07D2                     l2641:
  3195  07D2  3001               	movlw	1
  3196  07D3                     u3165:
  3197  07D3  1003               	clrc
  3198  07D4  0DA7               	rlf	___awdiv@quotient^(0+128),f
  3199  07D5  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
  3200  07D6  3EFF               	addlw	-1
  3201  07D7  1D03               	skipz
  3202  07D8  2FD3               	goto	u3165
  3203  07D9  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  3204  07DA  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  3205  07DB  1D03               	skipz
  3206  07DC  2FDF               	goto	u3175
  3207  07DD  0820               	movf	___awdiv@divisor^(0+128),w
  3208  07DE  0222               	subwf	___awdiv@dividend^(0+128),w
  3209  07DF                     u3175:
  3210  07DF  1C03               	skipc
  3211  07E0  2FE8               	goto	l2647
  3212  07E1  0820               	movf	___awdiv@divisor^(0+128),w
  3213  07E2  02A2               	subwf	___awdiv@dividend^(0+128),f
  3214  07E3  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  3215  07E4  1C03               	skipc
  3216  07E5  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  3217  07E6  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  3218  07E7  1427               	bsf	___awdiv@quotient^(0+128),0
  3219  07E8                     l2647:
  3220  07E8  3001               	movlw	1
  3221  07E9                     u3185:
  3222  07E9  1003               	clrc
  3223  07EA  0CA1               	rrf	(___awdiv@divisor+1)^(0+128),f
  3224  07EB  0CA0               	rrf	___awdiv@divisor^(0+128),f
  3225  07EC  3EFF               	addlw	-1
  3226  07ED  1D03               	skipz
  3227  07EE  2FE9               	goto	u3185
  3228  07EF  3001               	movlw	1
  3229  07F0  02A5               	subwf	___awdiv@counter^(0+128),f
  3230  07F1  1D03               	btfss	3,2
  3231  07F2  2FD2               	goto	l2641
  3232  07F3                     l2651:
  3233  07F3  0826               	movf	___awdiv@sign^(0+128),w
  3234  07F4  1903               	btfsc	3,2
  3235  07F5  2FFB               	goto	l2655
  3236  07F6  09A7               	comf	___awdiv@quotient^(0+128),f
  3237  07F7  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
  3238  07F8  0AA7               	incf	___awdiv@quotient^(0+128),f
  3239  07F9  1903               	skipnz
  3240  07FA  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
  3241  07FB                     l2655:
  3242  07FB  0828               	movf	(___awdiv@quotient+1)^(0+128),w
  3243  07FC  00A1               	movwf	(?___awdiv+1)^(0+128)
  3244  07FD  0827               	movf	___awdiv@quotient^(0+128),w
  3245  07FE  00A0               	movwf	?___awdiv^(0+128)
  3246  07FF  0008               	return
  3247  0800                     __end_of___awdiv:
  3248                           
  3249                           	psect	text14
  3250  04FD                     __ptext14:	
  3251 ;; *************** function _UIPageMain *****************
  3252 ;; Defined at:
  3253 ;;		line 29 in file "ui.h"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  j               1   15[BANK1 ] unsigned char 
  3258 ;;  j               1   14[BANK1 ] unsigned char 
  3259 ;;  j               1   13[BANK1 ] unsigned char 
  3260 ;;  j               1   12[BANK1 ] unsigned char 
  3261 ;;  j               1   11[BANK1 ] unsigned char 
  3262 ;;  j               1   10[BANK1 ] unsigned char 
  3263 ;;  j               1    9[BANK1 ] unsigned char 
  3264 ;;  j               1    8[BANK1 ] unsigned char 
  3265 ;;  j               1    7[BANK1 ] unsigned char 
  3266 ;;  i               1   16[BANK1 ] unsigned char 
  3267 ;;  i               1   17[BANK1 ] unsigned char 
  3268 ;;  i               1    6[BANK1 ] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 300/0
  3275 ;;		On exit  : 300/100
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3278 ;;      Params:         0       0       0       0       0
  3279 ;;      Locals:         0       0      12       0       0
  3280 ;;      Temps:          0       0       2       0       0
  3281 ;;      Totals:         0       0      14       0       0
  3282 ;;Total ram usage:       14 bytes
  3283 ;; Hardware stack levels used: 1
  3284 ;; Hardware stack levels required when called: 9
  3285 ;; This function calls:
  3286 ;;		_UartCurShow
  3287 ;;		_UartSendChar
  3288 ;;		_UartSendString
  3289 ;;		_UartSendUTF8
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           
  3296                           ;psect for function _UIPageMain
  3297  04FD                     _UIPageMain:
  3298                           
  3299                           ;ui.h: 30: UartCurShow(0);
  3300                           
  3301                           ;incstack = 0
  3302 ;; hardware stack exceeded
  3303                           ; Regs used in _UIPageMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3304  04FD  3000               	movlw	0
  3305  04FE  120A  118A  2003  120A  118A  	fcall	_UartCurShow
  3306                           
  3307                           ;ui.h: 31: UartSendString("\f");
  3308  0503  30E0               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  3309  0504  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3310                           
  3311                           ;ui.h: 32: UartSendUTF8(0xe2, 0x94, 0x8c);
  3312  0509  3094               	movlw	148
  3313  050A  00A4               	movwf	??_UIPageMain^(0+128)
  3314  050B  0824               	movf	??_UIPageMain^(0+128),w
  3315  050C  00A1               	movwf	UartSendUTF8@b^(0+128)
  3316  050D  308C               	movlw	140
  3317  050E  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3318  050F  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3319  0510  00A2               	movwf	UartSendUTF8@c^(0+128)
  3320  0511  30E2               	movlw	226
  3321  0512  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3322                           
  3323                           ;ui.h: 33: for (uint8_t i = 0; i < 64; i++) {
  3324  0517  01A6               	clrf	UIPageMain@i^(0+128)
  3325  0518                     l3235:
  3326                           
  3327                           ;ui.h: 34: UartSendUTF8(0xe2, 0x94, 0x80);
  3328  0518  3094               	movlw	148
  3329  0519  00A4               	movwf	??_UIPageMain^(0+128)
  3330  051A  0824               	movf	??_UIPageMain^(0+128),w
  3331  051B  00A1               	movwf	UartSendUTF8@b^(0+128)
  3332  051C  3080               	movlw	128
  3333  051D  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3334  051E  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3335  051F  00A2               	movwf	UartSendUTF8@c^(0+128)
  3336  0520  30E2               	movlw	226
  3337  0521  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3338  0526  3001               	movlw	1
  3339  0527  00A4               	movwf	??_UIPageMain^(0+128)
  3340  0528  0824               	movf	??_UIPageMain^(0+128),w
  3341  0529  07A6               	addwf	UIPageMain@i^(0+128),f
  3342  052A  3040               	movlw	64
  3343  052B  0226               	subwf	UIPageMain@i^(0+128),w
  3344  052C  1C03               	skipc
  3345  052D  2D18               	goto	l3235
  3346                           
  3347                           ;ui.h: 35: };ui.h: 36: UartSendUTF8(0xe2, 0x94, 0x90);
  3348  052E  3094               	movlw	148
  3349  052F  00A4               	movwf	??_UIPageMain^(0+128)
  3350  0530  0824               	movf	??_UIPageMain^(0+128),w
  3351  0531  00A1               	movwf	UartSendUTF8@b^(0+128)
  3352  0532  3090               	movlw	144
  3353  0533  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3354  0534  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3355  0535  00A2               	movwf	UartSendUTF8@c^(0+128)
  3356  0536  30E2               	movlw	226
  3357  0537  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3358                           
  3359                           ;ui.h: 37: for (uint8_t i = 0; i < 20; i++) {
  3360  053C  01B1               	clrf	UIPageMain@i_166^(0+128)
  3361  053D                     l3249:
  3362                           
  3363                           ;ui.h: 38: UartSendString("\n\r");
  3364  053D  30DA               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3365  053E  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3366                           
  3367                           ;ui.h: 39: UartSendUTF8(0xe2, 0x94, 0x82);
  3368  0543  3094               	movlw	148
  3369  0544  00A4               	movwf	??_UIPageMain^(0+128)
  3370  0545  0824               	movf	??_UIPageMain^(0+128),w
  3371  0546  00A1               	movwf	UartSendUTF8@b^(0+128)
  3372  0547  3082               	movlw	130
  3373  0548  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3374  0549  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3375  054A  00A2               	movwf	UartSendUTF8@c^(0+128)
  3376  054B  30E2               	movlw	226
  3377  054C  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3378                           
  3379                           ;ui.h: 40: if (i == 5) {
  3380  0551  3005               	movlw	5
  3381  0552  0631               	xorwf	UIPageMain@i_166^(0+128),w
  3382  0553  1D03               	btfss	3,2
  3383  0554  2D7A               	goto	l3281
  3384                           
  3385                           ;ui.h: 41: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3386  0555  01A7               	clrf	UIPageMain@j^(0+128)
  3387  0556                     l3261:
  3388  0556  3020               	movlw	32
  3389  0557  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3390  055C  3001               	movlw	1
  3391  055D  00A4               	movwf	??_UIPageMain^(0+128)
  3392  055E  0824               	movf	??_UIPageMain^(0+128),w
  3393  055F  07A7               	addwf	UIPageMain@j^(0+128),f
  3394  0560  3019               	movlw	25
  3395  0561  0227               	subwf	UIPageMain@j^(0+128),w
  3396  0562  1C03               	skipc
  3397  0563  2D56               	goto	l3261
  3398                           
  3399                           ;ui.h: 42: UartSendString("\xe4\xbf\x84 \xe7\xbd\x97 \xe6\x96\xaf \xe6\x96\xb9 \xe5\x9d\
      +                          x97");
  3400  0564  3089               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3401  0565  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3402                           
  3403                           ;ui.h: 43: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3404  056A  01A8               	clrf	UIPageMain@j_170^(0+128)
  3405  056B                     l3275:
  3406  056B  3020               	movlw	32
  3407  056C  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3408  0571  3001               	movlw	1
  3409  0572  00A4               	movwf	??_UIPageMain^(0+128)
  3410  0573  0824               	movf	??_UIPageMain^(0+128),w
  3411  0574  07A8               	addwf	UIPageMain@j_170^(0+128),f
  3412  0575  3019               	movlw	25
  3413  0576  0228               	subwf	UIPageMain@j_170^(0+128),w
  3414  0577  1803               	btfsc	3,0
  3415  0578  2E04               	goto	l3377
  3416  0579  2D6B               	goto	l3275
  3417  057A                     l3281:
  3418  057A  3007               	movlw	7
  3419  057B  0631               	xorwf	UIPageMain@i_166^(0+128),w
  3420  057C  1D03               	btfss	3,2
  3421  057D  2DA3               	goto	l3309
  3422                           
  3423                           ;ui.h: 45: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3424  057E  01A9               	clrf	UIPageMain@j_171^(0+128)
  3425  057F                     l3289:
  3426  057F  3020               	movlw	32
  3427  0580  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3428  0585  3001               	movlw	1
  3429  0586  00A4               	movwf	??_UIPageMain^(0+128)
  3430  0587  0824               	movf	??_UIPageMain^(0+128),w
  3431  0588  07A9               	addwf	UIPageMain@j_171^(0+128),f
  3432  0589  3019               	movlw	25
  3433  058A  0229               	subwf	UIPageMain@j_171^(0+128),w
  3434  058B  1C03               	skipc
  3435  058C  2D7F               	goto	l3289
  3436                           
  3437                           ;ui.h: 46: UartSendString("\xe6\xa2\x85\xe5\x8a\xaa\xe6\x96\xaf\xe7\x94\xb5\xe4\xbf\xa1\
      +                          xe4\xb8\x89\xe7\x8f\xad");
  3438  058D  3049               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3439  058E  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3440                           
  3441                           ;ui.h: 47: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3442  0593  01AA               	clrf	UIPageMain@j_173^(0+128)
  3443  0594                     l3303:
  3444  0594  3020               	movlw	32
  3445  0595  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3446  059A  3001               	movlw	1
  3447  059B  00A4               	movwf	??_UIPageMain^(0+128)
  3448  059C  0824               	movf	??_UIPageMain^(0+128),w
  3449  059D  07AA               	addwf	UIPageMain@j_173^(0+128),f
  3450  059E  3019               	movlw	25
  3451  059F  022A               	subwf	UIPageMain@j_173^(0+128),w
  3452  05A0  1803               	btfsc	3,0
  3453  05A1  2E04               	goto	l3377
  3454  05A2  2D94               	goto	l3303
  3455  05A3                     l3309:
  3456  05A3  3009               	movlw	9
  3457  05A4  0631               	xorwf	UIPageMain@i_166^(0+128),w
  3458  05A5  1D03               	btfss	3,2
  3459  05A6  2DCC               	goto	l3337
  3460                           
  3461                           ;ui.h: 49: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3462  05A7  01AB               	clrf	UIPageMain@j_174^(0+128)
  3463  05A8                     l3317:
  3464  05A8  3020               	movlw	32
  3465  05A9  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3466  05AE  3001               	movlw	1
  3467  05AF  00A4               	movwf	??_UIPageMain^(0+128)
  3468  05B0  0824               	movf	??_UIPageMain^(0+128),w
  3469  05B1  07AB               	addwf	UIPageMain@j_174^(0+128),f
  3470  05B2  3019               	movlw	25
  3471  05B3  022B               	subwf	UIPageMain@j_174^(0+128),w
  3472  05B4  1C03               	skipc
  3473  05B5  2DA8               	goto	l3317
  3474                           
  3475                           ;ui.h: 50: UartSendString("\xe5\xbc\xa0\xe9\x92\x8a\xe6\xb4\x8b  \xe9\x99\x88\xe6\x81\xb
      +                          a\xe4\xb8\xb0");
  3476  05B6  305F               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3477  05B7  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3478                           
  3479                           ;ui.h: 51: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3480  05BC  01AC               	clrf	UIPageMain@j_176^(0+128)
  3481  05BD                     l3331:
  3482  05BD  3020               	movlw	32
  3483  05BE  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3484  05C3  3001               	movlw	1
  3485  05C4  00A4               	movwf	??_UIPageMain^(0+128)
  3486  05C5  0824               	movf	??_UIPageMain^(0+128),w
  3487  05C6  07AC               	addwf	UIPageMain@j_176^(0+128),f
  3488  05C7  3019               	movlw	25
  3489  05C8  022C               	subwf	UIPageMain@j_176^(0+128),w
  3490  05C9  1803               	btfsc	3,0
  3491  05CA  2E04               	goto	l3377
  3492  05CB  2DBD               	goto	l3331
  3493  05CC                     l3337:
  3494  05CC  300F               	movlw	15
  3495  05CD  0631               	xorwf	UIPageMain@i_166^(0+128),w
  3496  05CE  1D03               	btfss	3,2
  3497  05CF  2DF5               	goto	l3365
  3498                           
  3499                           ;ui.h: 53: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3500  05D0  01AD               	clrf	UIPageMain@j_177^(0+128)
  3501  05D1                     l3345:
  3502  05D1  3020               	movlw	32
  3503  05D2  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3504  05D7  3001               	movlw	1
  3505  05D8  00A4               	movwf	??_UIPageMain^(0+128)
  3506  05D9  0824               	movf	??_UIPageMain^(0+128),w
  3507  05DA  07AD               	addwf	UIPageMain@j_177^(0+128),f
  3508  05DB  3019               	movlw	25
  3509  05DC  022D               	subwf	UIPageMain@j_177^(0+128),w
  3510  05DD  1C03               	skipc
  3511  05DE  2DD1               	goto	l3345
  3512                           
  3513                           ;ui.h: 54: UartSendString("\xef\xbc\x88\xe6\x8c\x89\xe4\xb8\x8b\xe5\x9b\x9e\xe8\xbd\xa6\
      +                          xe9\x94\xae\xef\xbc\x89");
  3514  05DF  3033               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3515  05E0  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3516                           
  3517                           ;ui.h: 55: for (uint8_t j = 0; j < 25; j++) UartSendChar(' ');
  3518  05E5  01AE               	clrf	UIPageMain@j_179^(0+128)
  3519  05E6                     l3359:
  3520  05E6  3020               	movlw	32
  3521  05E7  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3522  05EC  3001               	movlw	1
  3523  05ED  00A4               	movwf	??_UIPageMain^(0+128)
  3524  05EE  0824               	movf	??_UIPageMain^(0+128),w
  3525  05EF  07AE               	addwf	UIPageMain@j_179^(0+128),f
  3526  05F0  3019               	movlw	25
  3527  05F1  022E               	subwf	UIPageMain@j_179^(0+128),w
  3528  05F2  1803               	btfsc	3,0
  3529  05F3  2E04               	goto	l3377
  3530  05F4  2DE6               	goto	l3359
  3531  05F5                     l3365:
  3532                           
  3533                           ;ui.h: 57: for (uint8_t j = 0; j < 64; j++) UartSendChar(' ');
  3534  05F5  01AF               	clrf	UIPageMain@j_180^(0+128)
  3535  05F6                     l3371:
  3536  05F6  3020               	movlw	32
  3537  05F7  160A  118A  22E4  120A  118A  	fcall	_UartSendChar
  3538  05FC  3001               	movlw	1
  3539  05FD  00A4               	movwf	??_UIPageMain^(0+128)
  3540  05FE  0824               	movf	??_UIPageMain^(0+128),w
  3541  05FF  07AF               	addwf	UIPageMain@j_180^(0+128),f
  3542  0600  3040               	movlw	64
  3543  0601  022F               	subwf	UIPageMain@j_180^(0+128),w
  3544  0602  1C03               	skipc
  3545  0603  2DF6               	goto	l3371
  3546  0604                     l3377:
  3547                           
  3548                           ;ui.h: 58: };ui.h: 59: UartSendUTF8(0xe2, 0x94, 0x82);
  3549  0604  3094               	movlw	148
  3550  0605  00A4               	movwf	??_UIPageMain^(0+128)
  3551  0606  0824               	movf	??_UIPageMain^(0+128),w
  3552  0607  00A1               	movwf	UartSendUTF8@b^(0+128)
  3553  0608  3082               	movlw	130
  3554  0609  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3555  060A  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3556  060B  00A2               	movwf	UartSendUTF8@c^(0+128)
  3557  060C  30E2               	movlw	226
  3558  060D  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3559  0612  3001               	movlw	1
  3560  0613  00A4               	movwf	??_UIPageMain^(0+128)
  3561  0614  0824               	movf	??_UIPageMain^(0+128),w
  3562  0615  07B1               	addwf	UIPageMain@i_166^(0+128),f
  3563  0616  3014               	movlw	20
  3564  0617  0231               	subwf	UIPageMain@i_166^(0+128),w
  3565  0618  1C03               	skipc
  3566  0619  2D3D               	goto	l3249
  3567                           
  3568                           ;ui.h: 60: };ui.h: 61: UartSendString("\n\r");
  3569  061A  30DA               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3570  061B  160A  118A  23D5  120A  118A  	fcall	_UartSendString
  3571                           
  3572                           ;ui.h: 62: UartSendUTF8(0xe2, 0x94, 0x94);
  3573  0620  3094               	movlw	148
  3574  0621  00A4               	movwf	??_UIPageMain^(0+128)
  3575  0622  0824               	movf	??_UIPageMain^(0+128),w
  3576  0623  00A1               	movwf	UartSendUTF8@b^(0+128)
  3577  0624  3094               	movlw	148
  3578  0625  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3579  0626  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3580  0627  00A2               	movwf	UartSendUTF8@c^(0+128)
  3581  0628  30E2               	movlw	226
  3582  0629  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3583                           
  3584                           ;ui.h: 63: for (uint8_t i = 0; i < 64; i++) {
  3585  062E  01B0               	clrf	UIPageMain@i_182^(0+128)
  3586  062F                     l3393:
  3587                           
  3588                           ;ui.h: 64: UartSendUTF8(0xe2, 0x94, 0x80);
  3589  062F  3094               	movlw	148
  3590  0630  00A4               	movwf	??_UIPageMain^(0+128)
  3591  0631  0824               	movf	??_UIPageMain^(0+128),w
  3592  0632  00A1               	movwf	UartSendUTF8@b^(0+128)
  3593  0633  3080               	movlw	128
  3594  0634  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3595  0635  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3596  0636  00A2               	movwf	UartSendUTF8@c^(0+128)
  3597  0637  30E2               	movlw	226
  3598  0638  160A  118A  233C  120A  118A  	fcall	_UartSendUTF8
  3599  063D  3001               	movlw	1
  3600  063E  00A4               	movwf	??_UIPageMain^(0+128)
  3601  063F  0824               	movf	??_UIPageMain^(0+128),w
  3602  0640  07B0               	addwf	UIPageMain@i_182^(0+128),f
  3603  0641  3040               	movlw	64
  3604  0642  0230               	subwf	UIPageMain@i_182^(0+128),w
  3605  0643  1C03               	skipc
  3606  0644  2E2F               	goto	l3393
  3607                           
  3608                           ;ui.h: 65: };ui.h: 66: UartSendUTF8(0xe2, 0x94, 0x98);
  3609  0645  3094               	movlw	148
  3610  0646  00A4               	movwf	??_UIPageMain^(0+128)
  3611  0647  0824               	movf	??_UIPageMain^(0+128),w
  3612  0648  00A1               	movwf	UartSendUTF8@b^(0+128)
  3613  0649  3098               	movlw	152
  3614  064A  00A5               	movwf	(??_UIPageMain+1)^(0+128)
  3615  064B  0825               	movf	(??_UIPageMain+1)^(0+128),w
  3616  064C  00A2               	movwf	UartSendUTF8@c^(0+128)
  3617  064D  30E2               	movlw	226
  3618  064E  160A  118A  233C   	fcall	_UartSendUTF8
  3619  0651  0008               	return
  3620  0652                     __end_of_UIPageMain:
  3621                           
  3622                           	psect	text15
  3623  133C                     __ptext15:	
  3624 ;; *************** function _UartSendUTF8 *****************
  3625 ;; Defined at:
  3626 ;;		line 63 in file "uart.h"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  a               1    wreg     unsigned char 
  3629 ;;  b               1    1[BANK1 ] unsigned char 
  3630 ;;  c               1    2[BANK1 ] unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  a               1    3[BANK1 ] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0, pclath, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 300/100
  3639 ;;		On exit  : 300/100
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3642 ;;      Params:         0       0       2       0       0
  3643 ;;      Locals:         0       0       1       0       0
  3644 ;;      Temps:          0       0       0       0       0
  3645 ;;      Totals:         0       0       3       0       0
  3646 ;;Total ram usage:        3 bytes
  3647 ;; Hardware stack levels used: 1
  3648 ;; Hardware stack levels required when called: 8
  3649 ;; This function calls:
  3650 ;;		_UartSendChar
  3651 ;; This function is called by:
  3652 ;;		_UIPageMain
  3653 ;;		_UIPageMainToGame
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           
  3658                           ;psect for function _UartSendUTF8
  3659  133C                     _UartSendUTF8:
  3660                           
  3661                           ;incstack = 0
  3662 ;; hardware stack exceeded
  3663                           ; Regs used in _UartSendUTF8: [wreg+status,2+status,0+pclath+cstack]
  3664                           ;UartSendUTF8@a stored from wreg
  3665  133C  00A3               	movwf	UartSendUTF8@a^(0+128)
  3666                           
  3667                           ;uart.h: 64: UartSendChar(a);
  3668  133D  0823               	movf	UartSendUTF8@a^(0+128),w
  3669  133E  160A  118A  22E4  160A  118A  	fcall	_UartSendChar
  3670                           
  3671                           ;uart.h: 65: UartSendChar(b);
  3672  1343  0821               	movf	UartSendUTF8@b^(0+128),w
  3673  1344  160A  118A  22E4  160A  118A  	fcall	_UartSendChar
  3674                           
  3675                           ;uart.h: 66: UartSendChar(c);
  3676  1349  0822               	movf	UartSendUTF8@c^(0+128),w
  3677  134A  160A  118A  22E4   	fcall	_UartSendChar
  3678  134D  0008               	return
  3679  134E                     __end_of_UartSendUTF8:
  3680                           
  3681                           	psect	text16
  3682  0003                     __ptext16:	
  3683 ;; *************** function _UartCurShow *****************
  3684 ;; Defined at:
  3685 ;;		line 126 in file "uart.h"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  show            1    wreg     char 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  show            1    0[COMMON] char 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg
  3694 ;; Tracked objects:
  3695 ;;		On entry : 300/0
  3696 ;;		On exit  : 300/0
  3697 ;;		Unchanged: 300/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3699 ;;      Params:         0       0       0       0       0
  3700 ;;      Locals:         0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0
  3702 ;;      Totals:         0       0       0       0       0
  3703 ;;Total ram usage:        0 bytes
  3704 ;; Hardware stack levels used: 1
  3705 ;; Hardware stack levels required when called: 7
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_UIPageMain
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           
  3714                           ;psect for function _UartCurShow
  3715  0003                     _UartCurShow:
  3716                           
  3717                           ;incstack = 0
  3718 ;; hardware stack exceeded
  3719                           ; Regs used in _UartCurShow: [wreg]
  3720  0003  0008               	return
  3721  0004                     __end_of_UartCurShow:
  3722                           
  3723                           	psect	text17
  3724  139E                     __ptext17:	
  3725 ;; *************** function _TetrisInit *****************
  3726 ;; Defined at:
  3727 ;;		line 160 in file "tetris.h"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  t               1    wreg     PTR struct Tetris
  3730 ;;		 -> game(32), 
  3731 ;;  randset         1   37[BANK1 ] PTR struct Queue
  3732 ;;		 -> randset(3), 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  t               1   39[BANK1 ] PTR struct Tetris
  3735 ;;		 -> game(32), 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3740 ;; Tracked objects:
  3741 ;;		On entry : 300/100
  3742 ;;		On exit  : 300/100
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3745 ;;      Params:         0       0       1       0       0
  3746 ;;      Locals:         0       0       1       0       0
  3747 ;;      Temps:          0       0       1       0       0
  3748 ;;      Totals:         0       0       3       0       0
  3749 ;;Total ram usage:        3 bytes
  3750 ;; Hardware stack levels used: 1
  3751 ;; Hardware stack levels required when called: 12
  3752 ;; This function calls:
  3753 ;;		__randShape
  3754 ;;		__shapeNext
  3755 ;; This function is called by:
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _TetrisInit
  3762  139E                     _TetrisInit:
  3763                           
  3764                           ;incstack = 0
  3765 ;; hardware stack exceeded
  3766                           ; Regs used in _TetrisInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3767                           ;TetrisInit@t stored from wreg
  3768  139E  00C7               	movwf	TetrisInit@t^(0+128)
  3769                           
  3770                           ;tetris.h: 161: t->randset = randset;
  3771  139F  0845               	movf	TetrisInit@randset^(0+128),w
  3772  13A0  00C6               	movwf	??_TetrisInit^(0+128)
  3773  13A1  0847               	movf	TetrisInit@t^(0+128),w
  3774  13A2  3E1F               	addlw	31
  3775  13A3  0084               	movwf	4
  3776  13A4  0846               	movf	??_TetrisInit^(0+128),w
  3777  13A5  1383               	bcf	3,7	;select IRP bank0
  3778  13A6  0080               	movwf	0
  3779                           
  3780                           ;tetris.h: 162: t->shapeNext = _randShape(randset);
  3781  13A7  0845               	movf	TetrisInit@randset^(0+128),w
  3782  13A8  160A  118A  279B  160A  118A  	fcall	__randShape
  3783  13AD  00C6               	movwf	??_TetrisInit^(0+128)
  3784  13AE  0847               	movf	TetrisInit@t^(0+128),w
  3785  13AF  3E1A               	addlw	26
  3786  13B0  0084               	movwf	4
  3787  13B1  0846               	movf	??_TetrisInit^(0+128),w
  3788  13B2  1383               	bcf	3,7	;select IRP bank0
  3789  13B3  0080               	movwf	0
  3790                           
  3791                           ;tetris.h: 163: _shapeNext(t);
  3792  13B4  0847               	movf	TetrisInit@t^(0+128),w
  3793  13B5  120A  118A  2652   	fcall	__shapeNext
  3794  13B8  0008               	return
  3795  13B9                     __end_of_TetrisInit:
  3796                           
  3797                           	psect	text18
  3798  0652                     __ptext18:	
  3799 ;; *************** function __shapeNext *****************
  3800 ;; Defined at:
  3801 ;;		line 140 in file "tetris.h"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  t               1    wreg     PTR struct Tetris
  3804 ;;		 -> game(32), 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  t               1   36[BANK1 ] PTR struct Tetris
  3807 ;;		 -> game(32), 
  3808 ;;  p               2   34[BANK1 ] unsigned int 
  3809 ;;  p               2   32[BANK1 ] unsigned int 
  3810 ;;  p               2   30[BANK1 ] unsigned int 
  3811 ;;  p               2   28[BANK1 ] unsigned int 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : B00/100
  3818 ;;		On exit  : 300/100
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3821 ;;      Params:         0       0       0       0       0
  3822 ;;      Locals:         0       0       9       0       0
  3823 ;;      Temps:          0       0       3       0       0
  3824 ;;      Totals:         0       0      12       0       0
  3825 ;;Total ram usage:       12 bytes
  3826 ;; Hardware stack levels used: 1
  3827 ;; Hardware stack levels required when called: 11
  3828 ;; This function calls:
  3829 ;;		__drawBlock
  3830 ;;		__randShape
  3831 ;;		__wipeBlock
  3832 ;; This function is called by:
  3833 ;;		_TetrisInit
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function __shapeNext
  3839  0652                     __shapeNext:
  3840                           
  3841                           ;incstack = 0
  3842 ;; hardware stack exceeded
  3843                           ; Regs used in __shapeNext: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3844                           ;__shapeNext@t stored from wreg
  3845  0652  00C4               	movwf	__shapeNext@t^(0+128)
  3846                           
  3847                           ;tetris.h: 141: t->shape = t->shapeNext;
  3848  0653  0844               	movf	__shapeNext@t^(0+128),w
  3849  0654  3E1A               	addlw	26
  3850  0655  0084               	movwf	4
  3851  0656  0800               	movf	0,w
  3852  0657  00B9               	movwf	??__shapeNext^(0+128)
  3853  0658  0844               	movf	__shapeNext@t^(0+128),w
  3854  0659  3E19               	addlw	25
  3855  065A  0084               	movwf	4
  3856  065B  0839               	movf	??__shapeNext^(0+128),w
  3857  065C  0080               	movwf	0
  3858                           
  3859                           ;tetris.h: 142: t->x = 3;
  3860  065D  3003               	movlw	3
  3861  065E  00B9               	movwf	??__shapeNext^(0+128)
  3862  065F  0844               	movf	__shapeNext@t^(0+128),w
  3863  0660  3E1B               	addlw	27
  3864  0661  0084               	movwf	4
  3865  0662  0839               	movf	??__shapeNext^(0+128),w
  3866  0663  0080               	movwf	0
  3867                           
  3868                           ;tetris.h: 146: if (t->shape % 4 == 0 && t->shape != 24) t->y = -2;
  3869  0664  0844               	movf	__shapeNext@t^(0+128),w
  3870  0665  3E19               	addlw	25
  3871  0666  0084               	movwf	4
  3872  0667  0800               	movf	0,w
  3873  0668  3903               	andlw	3
  3874  0669  1D03               	btfss	3,2
  3875  066A  2E74               	goto	l3069
  3876  066B  0844               	movf	__shapeNext@t^(0+128),w
  3877  066C  3E19               	addlw	25
  3878  066D  0084               	movwf	4
  3879  066E  3018               	movlw	24
  3880  066F  0600               	xorwf	0,w
  3881  0670  1903               	btfsc	3,2
  3882  0671  2E74               	goto	l3069
  3883  0672  30FE               	movlw	254
  3884  0673  2E84               	goto	L2
  3885  0674                     l3069:
  3886                           
  3887                           ;tetris.h: 147: else if (t->shape == 1 || t->shape == 3) t->y = -4;
  3888  0674  0844               	movf	__shapeNext@t^(0+128),w
  3889  0675  3E19               	addlw	25
  3890  0676  0084               	movwf	4
  3891  0677  0300               	decf	0,w
  3892  0678  1903               	btfsc	3,2
  3893  0679  2E81               	goto	l3073
  3894  067A  0844               	movf	__shapeNext@t^(0+128),w
  3895  067B  3E19               	addlw	25
  3896  067C  0084               	movwf	4
  3897  067D  3003               	movlw	3
  3898  067E  0600               	xorwf	0,w
  3899  067F  1D03               	btfss	3,2
  3900  0680  2E83               	goto	l3075
  3901  0681                     l3073:
  3902  0681  30FC               	movlw	252
  3903  0682  2E84               	goto	L2
  3904  0683                     l3075:
  3905                           
  3906                           ;tetris.h: 148: else t->y = -3;
  3907  0683  30FD               	movlw	253
  3908  0684                     L2:
  3909  0684  00B9               	movwf	??__shapeNext^(0+128)
  3910  0685  0844               	movf	__shapeNext@t^(0+128),w
  3911  0686  3E1C               	addlw	28
  3912  0687  0084               	movwf	4
  3913  0688  0839               	movf	??__shapeNext^(0+128),w
  3914  0689  0080               	movwf	0
  3915                           
  3916                           ;tetris.h: 149: t->shapeNext = _randShape(t->randset);
  3917  068A  0844               	movf	__shapeNext@t^(0+128),w
  3918  068B  3E1F               	addlw	31
  3919  068C  0084               	movwf	4
  3920  068D  0800               	movf	0,w
  3921  068E  160A  118A  279B  120A  118A  	fcall	__randShape
  3922  0693  00B9               	movwf	??__shapeNext^(0+128)
  3923  0694  0844               	movf	__shapeNext@t^(0+128),w
  3924  0695  3E1A               	addlw	26
  3925  0696  0084               	movwf	4
  3926  0697  0839               	movf	??__shapeNext^(0+128),w
  3927  0698  1383               	bcf	3,7	;select IRP bank0
  3928  0699  0080               	movwf	0
  3929                           
  3930                           ;tetris.h: 150: for (uint16_t p = table[t->shape]; p; p >>= 4) t->nextMap &= ~(1 << (p &
      +                           15));
  3931  069A  0844               	movf	__shapeNext@t^(0+128),w
  3932  069B  3E19               	addlw	25
  3933  069C  0084               	movwf	4
  3934  069D  0800               	movf	0,w
  3935  069E  00B9               	movwf	??__shapeNext^(0+128)
  3936  069F  0739               	addwf	??__shapeNext^(0+128),w
  3937  06A0  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  3938  06A1  0084               	movwf	4
  3939  06A2  120A  158A  2000  120A  118A  	fcall	stringdir
  3940  06A7  00BC               	movwf	__shapeNext@p^(0+128)
  3941  06A8  120A  158A  2000  120A  118A  	fcall	stringdir
  3942  06AD  00BD               	movwf	(__shapeNext@p+1)^(0+128)
  3943  06AE                     l3085:
  3944  06AE  083C               	movf	__shapeNext@p^(0+128),w
  3945  06AF  043D               	iorwf	(__shapeNext@p+1)^(0+128),w
  3946  06B0  1903               	btfsc	3,2
  3947  06B1  2ED2               	goto	l3087
  3948  06B2  083C               	movf	__shapeNext@p^(0+128),w
  3949  06B3  390F               	andlw	15
  3950  06B4  00B9               	movwf	??__shapeNext^(0+128)
  3951  06B5  0AB9               	incf	??__shapeNext^(0+128),f
  3952  06B6  3001               	movlw	1
  3953  06B7  00BA               	movwf	(??__shapeNext+1)^(0+128)
  3954  06B8  3000               	movlw	0
  3955  06B9  00BB               	movwf	((??__shapeNext+1)^(0+128)+1)
  3956  06BA  2EBE               	goto	u4124
  3957  06BB                     u4125:
  3958  06BB  1003               	clrc
  3959  06BC  0DBA               	rlf	(??__shapeNext+1)^(0+128),f
  3960  06BD  0DBB               	rlf	((??__shapeNext+1)^(0+128)+1),f
  3961  06BE                     u4124:
  3962  06BE  0BB9               	decfsz	??__shapeNext^(0+128),f
  3963  06BF  2EBB               	goto	u4125
  3964  06C0  09BA               	comf	(??__shapeNext+1)^(0+128),f
  3965  06C1  09BB               	comf	((??__shapeNext+1)^(0+128)+1),f
  3966  06C2  0844               	movf	__shapeNext@t^(0+128),w
  3967  06C3  3E1D               	addlw	29
  3968  06C4  0084               	movwf	4
  3969  06C5  083A               	movf	(??__shapeNext+1)^(0+128),w
  3970  06C6  0580               	andwf	0,f
  3971  06C7  0A84               	incf	4,f
  3972  06C8  083B               	movf	(??__shapeNext+2)^(0+128),w
  3973  06C9  0580               	andwf	0,f
  3974  06CA  3004               	movlw	4
  3975  06CB                     u4135:
  3976  06CB  1003               	clrc
  3977  06CC  0CBD               	rrf	(__shapeNext@p+1)^(0+128),f
  3978  06CD  0CBC               	rrf	__shapeNext@p^(0+128),f
  3979  06CE  3EFF               	addlw	-1
  3980  06CF  1D03               	skipz
  3981  06D0  2ECB               	goto	u4135
  3982  06D1  2EAE               	goto	l3085
  3983  06D2                     l3087:
  3984                           
  3985                           ;tetris.h: 151: for (uint16_t p = table[t->shapeNext]; p; p >>= 4) t->nextMap |= (1 << (
      +                          p & 15));
  3986  06D2  0844               	movf	__shapeNext@t^(0+128),w
  3987  06D3  3E1A               	addlw	26
  3988  06D4  0084               	movwf	4
  3989  06D5  0800               	movf	0,w
  3990  06D6  00B9               	movwf	??__shapeNext^(0+128)
  3991  06D7  0739               	addwf	??__shapeNext^(0+128),w
  3992  06D8  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  3993  06D9  0084               	movwf	4
  3994  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3995  06DF  00BE               	movwf	__shapeNext@p_287^(0+128)
  3996  06E0  120A  158A  2000  120A  118A  	fcall	stringdir
  3997  06E5  00BF               	movwf	(__shapeNext@p_287+1)^(0+128)
  3998  06E6                     l3093:
  3999  06E6  083E               	movf	__shapeNext@p_287^(0+128),w
  4000  06E7  043F               	iorwf	(__shapeNext@p_287+1)^(0+128),w
  4001  06E8  1903               	btfsc	3,2
  4002  06E9  2F08               	goto	l3095
  4003  06EA  083E               	movf	__shapeNext@p_287^(0+128),w
  4004  06EB  390F               	andlw	15
  4005  06EC  00B9               	movwf	??__shapeNext^(0+128)
  4006  06ED  0AB9               	incf	??__shapeNext^(0+128),f
  4007  06EE  3001               	movlw	1
  4008  06EF  00BA               	movwf	(??__shapeNext+1)^(0+128)
  4009  06F0  3000               	movlw	0
  4010  06F1  00BB               	movwf	((??__shapeNext+1)^(0+128)+1)
  4011  06F2  2EF6               	goto	u4154
  4012  06F3                     u4155:
  4013  06F3  1003               	clrc
  4014  06F4  0DBA               	rlf	(??__shapeNext+1)^(0+128),f
  4015  06F5  0DBB               	rlf	((??__shapeNext+1)^(0+128)+1),f
  4016  06F6                     u4154:
  4017  06F6  0BB9               	decfsz	??__shapeNext^(0+128),f
  4018  06F7  2EF3               	goto	u4155
  4019  06F8  0844               	movf	__shapeNext@t^(0+128),w
  4020  06F9  3E1D               	addlw	29
  4021  06FA  0084               	movwf	4
  4022  06FB  083A               	movf	(??__shapeNext+1)^(0+128),w
  4023  06FC  0480               	iorwf	0,f
  4024  06FD  0A84               	incf	4,f
  4025  06FE  083B               	movf	(??__shapeNext+2)^(0+128),w
  4026  06FF  0480               	iorwf	0,f
  4027  0700  3004               	movlw	4
  4028  0701                     u4165:
  4029  0701  1003               	clrc
  4030  0702  0CBF               	rrf	(__shapeNext@p_287+1)^(0+128),f
  4031  0703  0CBE               	rrf	__shapeNext@p_287^(0+128),f
  4032  0704  3EFF               	addlw	-1
  4033  0705  1D03               	skipz
  4034  0706  2F01               	goto	u4165
  4035  0707  2EE6               	goto	l3093
  4036  0708                     l3095:
  4037                           
  4038                           ;tetris.h: 152: for (uint16_t p = table[t->shape]; p; p >>= 4) {
  4039  0708  0844               	movf	__shapeNext@t^(0+128),w
  4040  0709  3E19               	addlw	25
  4041  070A  0084               	movwf	4
  4042  070B  0800               	movf	0,w
  4043  070C  00B9               	movwf	??__shapeNext^(0+128)
  4044  070D  0739               	addwf	??__shapeNext^(0+128),w
  4045  070E  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  4046  070F  0084               	movwf	4
  4047  0710  120A  158A  2000  120A  118A  	fcall	stringdir
  4048  0715  00C0               	movwf	__shapeNext@p_288^(0+128)
  4049  0716  120A  158A  2000  120A  118A  	fcall	stringdir
  4050  071B  00C1               	movwf	(__shapeNext@p_288+1)^(0+128)
  4051  071C                     l3103:
  4052  071C  0840               	movf	__shapeNext@p_288^(0+128),w
  4053  071D  0441               	iorwf	(__shapeNext@p_288+1)^(0+128),w
  4054  071E  1903               	btfsc	3,2
  4055  071F  2F5B               	goto	l3105
  4056                           
  4057                           ;tetris.h: 153: if (!(t->nextMap >> (p & 15))&1) _wipeBlock(p % 4 + 14, p / 4 % 4 + 3);
  4058  0720  0844               	movf	__shapeNext@t^(0+128),w
  4059  0721  3E1D               	addlw	29
  4060  0722  0084               	movwf	4
  4061  0723  1383               	bcf	3,7	;select IRP bank0
  4062  0724  0800               	movf	0,w
  4063  0725  00B9               	movwf	??__shapeNext^(0+128)
  4064  0726  0A84               	incf	4,f
  4065  0727  0800               	movf	0,w
  4066  0728  00BA               	movwf	(??__shapeNext^(0+128)+1)
  4067  0729  0840               	movf	__shapeNext@p_288^(0+128),w
  4068  072A  390F               	andlw	15
  4069  072B  3E01               	addlw	1
  4070  072C  2F30               	goto	u4184
  4071  072D                     u4185:
  4072  072D  1003               	clrc
  4073  072E  0CBA               	rrf	(??__shapeNext^(0+128)+1),f
  4074  072F  0CB9               	rrf	??__shapeNext^(0+128),f
  4075  0730                     u4184:
  4076  0730  3EFF               	addlw	-1
  4077  0731  1D03               	skipz
  4078  0732  2F2D               	goto	u4185
  4079  0733  0839               	movf	??__shapeNext^(0+128),w
  4080  0734  043A               	iorwf	(??__shapeNext^(0+128)+1),w
  4081  0735  1D03               	btfss	3,2
  4082  0736  2F39               	goto	u4190
  4083  0737  3001               	movlw	1
  4084  0738  2F3A               	goto	u4200
  4085  0739                     u4190:
  4086  0739  3000               	movlw	0
  4087  073A                     u4200:
  4088  073A  3901               	andlw	1
  4089  073B  1903               	btfsc	3,2
  4090  073C  2F53               	goto	l3101
  4091  073D  0840               	movf	__shapeNext@p_288^(0+128),w
  4092  073E  00B9               	movwf	??__shapeNext^(0+128)
  4093  073F  3002               	movlw	2
  4094  0740                     u4225:
  4095  0740  1003               	clrc
  4096  0741  0CB9               	rrf	??__shapeNext^(0+128),f
  4097  0742  3EFF               	addlw	-1
  4098  0743  1D03               	skipz
  4099  0744  2F40               	goto	u4225
  4100  0745  0839               	movf	??__shapeNext^(0+128),w
  4101  0746  3903               	andlw	3
  4102  0747  3E03               	addlw	3
  4103  0748  00BA               	movwf	(??__shapeNext+1)^(0+128)
  4104  0749  083A               	movf	(??__shapeNext+1)^(0+128),w
  4105  074A  00AA               	movwf	__wipeBlock@y^(0+128)
  4106  074B  0840               	movf	__shapeNext@p_288^(0+128),w
  4107  074C  3903               	andlw	3
  4108  074D  3E0E               	addlw	14
  4109  074E  160A  118A  238A  120A  118A  	fcall	__wipeBlock
  4110  0753                     l3101:
  4111  0753  3004               	movlw	4
  4112  0754                     u4235:
  4113  0754  1003               	clrc
  4114  0755  0CC1               	rrf	(__shapeNext@p_288+1)^(0+128),f
  4115  0756  0CC0               	rrf	__shapeNext@p_288^(0+128),f
  4116  0757  3EFF               	addlw	-1
  4117  0758  1D03               	skipz
  4118  0759  2F54               	goto	u4235
  4119  075A  2F1C               	goto	l3103
  4120  075B                     l3105:
  4121                           
  4122                           ;tetris.h: 154: };tetris.h: 155: for (uint16_t p = table[t->shapeNext]; p; p >>= 4) {
  4123  075B  0844               	movf	__shapeNext@t^(0+128),w
  4124  075C  3E1A               	addlw	26
  4125  075D  0084               	movwf	4
  4126  075E  1383               	bcf	3,7	;select IRP bank0
  4127  075F  0800               	movf	0,w
  4128  0760  00B9               	movwf	??__shapeNext^(0+128)
  4129  0761  0739               	addwf	??__shapeNext^(0+128),w
  4130  0762  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  4131  0763  0084               	movwf	4
  4132  0764  120A  158A  2000  120A  118A  	fcall	stringdir
  4133  0769  00C2               	movwf	__shapeNext@p_289^(0+128)
  4134  076A  120A  158A  2000  120A  118A  	fcall	stringdir
  4135  076F  00C3               	movwf	(__shapeNext@p_289+1)^(0+128)
  4136  0770                     l3113:
  4137  0770  0842               	movf	__shapeNext@p_289^(0+128),w
  4138  0771  0443               	iorwf	(__shapeNext@p_289+1)^(0+128),w
  4139  0772  1903               	btfsc	3,2
  4140  0773  0008               	return
  4141                           
  4142                           ;tetris.h: 156: if ((t->nextMap >> (p & 15))&1) _drawBlock(p % 4 + 14, p / 4 % 4 + 3);
  4143  0774  0844               	movf	__shapeNext@t^(0+128),w
  4144  0775  3E1D               	addlw	29
  4145  0776  0084               	movwf	4
  4146  0777  1383               	bcf	3,7	;select IRP bank0
  4147  0778  0800               	movf	0,w
  4148  0779  00B9               	movwf	??__shapeNext^(0+128)
  4149  077A  0A84               	incf	4,f
  4150  077B  0800               	movf	0,w
  4151  077C  00BA               	movwf	(??__shapeNext^(0+128)+1)
  4152  077D  0842               	movf	__shapeNext@p_289^(0+128),w
  4153  077E  390F               	andlw	15
  4154  077F  3E01               	addlw	1
  4155  0780  2F84               	goto	u4254
  4156  0781                     u4255:
  4157  0781  1003               	clrc
  4158  0782  0CBA               	rrf	(??__shapeNext^(0+128)+1),f
  4159  0783  0CB9               	rrf	??__shapeNext^(0+128),f
  4160  0784                     u4254:
  4161  0784  3EFF               	addlw	-1
  4162  0785  1D03               	skipz
  4163  0786  2F81               	goto	u4255
  4164  0787  1C39               	btfss	??__shapeNext^(0+128),0
  4165  0788  2F9F               	goto	l3111
  4166  0789  0842               	movf	__shapeNext@p_289^(0+128),w
  4167  078A  00B9               	movwf	??__shapeNext^(0+128)
  4168  078B  3002               	movlw	2
  4169  078C                     u4275:
  4170  078C  1003               	clrc
  4171  078D  0CB9               	rrf	??__shapeNext^(0+128),f
  4172  078E  3EFF               	addlw	-1
  4173  078F  1D03               	skipz
  4174  0790  2F8C               	goto	u4275
  4175  0791  0839               	movf	??__shapeNext^(0+128),w
  4176  0792  3903               	andlw	3
  4177  0793  3E03               	addlw	3
  4178  0794  00BA               	movwf	(??__shapeNext+1)^(0+128)
  4179  0795  083A               	movf	(??__shapeNext+1)^(0+128),w
  4180  0796  00AA               	movwf	__drawBlock@y^(0+128)
  4181  0797  0842               	movf	__shapeNext@p_289^(0+128),w
  4182  0798  3903               	andlw	3
  4183  0799  3E0E               	addlw	14
  4184  079A  160A  118A  2376  120A  118A  	fcall	__drawBlock
  4185  079F                     l3111:
  4186  079F  3004               	movlw	4
  4187  07A0                     u4285:
  4188  07A0  1003               	clrc
  4189  07A1  0CC3               	rrf	(__shapeNext@p_289+1)^(0+128),f
  4190  07A2  0CC2               	rrf	__shapeNext@p_289^(0+128),f
  4191  07A3  3EFF               	addlw	-1
  4192  07A4  1D03               	skipz
  4193  07A5  2FA0               	goto	u4285
  4194  07A6  2F70               	goto	l3113
  4195  07A7                     __end_of__shapeNext:
  4196                           
  4197                           	psect	text19
  4198  138A                     __ptext19:	
  4199 ;; *************** function __wipeBlock *****************
  4200 ;; Defined at:
  4201 ;;		line 103 in file "tetris.h"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  x               1    wreg     unsigned char 
  4204 ;;  y               1   10[BANK1 ] unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  x               1   13[BANK1 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : B00/100
  4213 ;;		On exit  : 300/100
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4216 ;;      Params:         0       0       1       0       0
  4217 ;;      Locals:         0       0       1       0       0
  4218 ;;      Temps:          0       0       2       0       0
  4219 ;;      Totals:         0       0       4       0       0
  4220 ;;Total ram usage:        4 bytes
  4221 ;; Hardware stack levels used: 1
  4222 ;; Hardware stack levels required when called: 10
  4223 ;; This function calls:
  4224 ;;		_UartCurSet
  4225 ;;		_UartSendString
  4226 ;; This function is called by:
  4227 ;;		__shapeNext
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function __wipeBlock
  4233  138A                     __wipeBlock:
  4234                           
  4235                           ;incstack = 0
  4236 ;; hardware stack exceeded
  4237                           ; Regs used in __wipeBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4238                           ;__wipeBlock@x stored from wreg
  4239  138A  00AD               	movwf	__wipeBlock@x^(0+128)
  4240                           
  4241                           ;tetris.h: 104: UartCurSet(2 * x + 24, y + 2);
  4242  138B  082A               	movf	__wipeBlock@y^(0+128),w
  4243  138C  3E02               	addlw	2
  4244  138D  00AB               	movwf	??__wipeBlock^(0+128)
  4245  138E  082B               	movf	??__wipeBlock^(0+128),w
  4246  138F  00A7               	movwf	UartCurSet@y^(0+128)
  4247  1390  082D               	movf	__wipeBlock@x^(0+128),w
  4248  1391  00AC               	movwf	(??__wipeBlock+1)^(0+128)
  4249  1392  072C               	addwf	(??__wipeBlock+1)^(0+128),w
  4250  1393  3E18               	addlw	24
  4251  1394  120A  158A  23A6  160A  118A  	fcall	_UartCurSet
  4252                           
  4253                           ;tetris.h: 105: UartSendString("  ");
  4254  1399  3086               	movlw	(low (((STR_13+18)-__stringbase)| (0+32768)))& (0+255)
  4255  139A  160A  118A  23D5   	fcall	_UartSendString
  4256  139D  0008               	return
  4257  139E                     __end_of__wipeBlock:
  4258                           
  4259                           	psect	text20
  4260  179B                     __ptext20:	
  4261 ;; *************** function __randShape *****************
  4262 ;; Defined at:
  4263 ;;		line 58 in file "tetris.h"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  randset         1    wreg     PTR struct Queue
  4266 ;;		 -> randset(3), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  randset         1   23[BANK1 ] PTR struct Queue
  4269 ;;		 -> randset(3), 
  4270 ;;  i               1   22[BANK1 ] unsigned char 
  4271 ;;  i               1   21[BANK1 ] unsigned char 
  4272 ;;  shape           1   24[BANK1 ] unsigned char 
  4273 ;;  rotate          1   20[BANK1 ] unsigned char 
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      unsigned char 
  4276 ;; Registers used:
  4277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : B00/100
  4280 ;;		On exit  : 300/100
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4283 ;;      Params:         0       0       0       0       0
  4284 ;;      Locals:         0       0       5       0       0
  4285 ;;      Temps:          0       0       2       0       0
  4286 ;;      Totals:         0       0       7       0       0
  4287 ;;Total ram usage:        7 bytes
  4288 ;; Hardware stack levels used: 1
  4289 ;; Hardware stack levels required when called: 9
  4290 ;; This function calls:
  4291 ;;		_AdcGo
  4292 ;;		_QueuePop
  4293 ;; This function is called by:
  4294 ;;		__shapeNext
  4295 ;;		_TetrisInit
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function __randShape
  4301  179B                     __randShape:
  4302                           
  4303                           ;incstack = 0
  4304 ;; hardware stack exceeded
  4305                           ; Regs used in __randShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4306                           ;__randShape@randset stored from wreg
  4307  179B  00B7               	movwf	__randShape@randset^(0+128)
  4308                           
  4309                           ;tetris.h: 59: uint8_t shape = 0, rotate = 0;
  4310  179C  01B8               	clrf	__randShape@shape^(0+128)
  4311  179D  01B4               	clrf	__randShape@rotate^(0+128)
  4312                           
  4313                           ;tetris.h: 60: for (uint8_t i = 0; i < 3; i++) {
  4314  179E  01B5               	clrf	__randShape@i^(0+128)
  4315  179F                     l2765:
  4316                           
  4317                           ;tetris.h: 61: shape |= (QueuePop(randset) << i);
  4318  179F  0837               	movf	__randShape@randset^(0+128),w
  4319  17A0  160A  118A  2739  160A  118A  	fcall	_QueuePop
  4320  17A5  00B2               	movwf	??__randShape^(0+128)
  4321  17A6  0A35               	incf	__randShape@i^(0+128),w
  4322  17A7  2FAA               	goto	u3474
  4323  17A8                     u3475:
  4324  17A8  1003               	clrc
  4325  17A9  0DB2               	rlf	??__randShape^(0+128),f
  4326  17AA                     u3474:
  4327  17AA  3EFF               	addlw	-1
  4328  17AB  1D03               	skipz
  4329  17AC  2FA8               	goto	u3475
  4330  17AD  0832               	movf	??__randShape^(0+128),w
  4331  17AE  00B3               	movwf	(??__randShape+1)^(0+128)
  4332  17AF  0833               	movf	(??__randShape+1)^(0+128),w
  4333  17B0  04B8               	iorwf	__randShape@shape^(0+128),f
  4334  17B1  3001               	movlw	1
  4335  17B2  00B2               	movwf	??__randShape^(0+128)
  4336  17B3  0832               	movf	??__randShape^(0+128),w
  4337  17B4  07B5               	addwf	__randShape@i^(0+128),f
  4338  17B5  3003               	movlw	3
  4339  17B6  0235               	subwf	__randShape@i^(0+128),w
  4340  17B7  1C03               	skipc
  4341  17B8  2F9F               	goto	l2765
  4342                           
  4343                           ;tetris.h: 62: };tetris.h: 63: AdcGo();
  4344  17B9  160A  118A  22A9  160A  118A  	fcall	_AdcGo
  4345  17BE                     l2779:	
  4346                           ;tetris.h: 64: while (shape == 7) {
  4347                           
  4348  17BE  3007               	movlw	7
  4349  17BF  1683               	bsf	3,5	;RP0=1, select bank1
  4350  17C0  0638               	xorwf	__randShape@shape^(0+128),w
  4351  17C1  1D03               	btfss	3,2
  4352  17C2  2FD4               	goto	l2781
  4353                           
  4354                           ;tetris.h: 65: shape <<= 1;
  4355  17C3  1003               	clrc
  4356  17C4  0DB8               	rlf	__randShape@shape^(0+128),f
  4357                           
  4358                           ;tetris.h: 66: shape &= 7;
  4359  17C5  3007               	movlw	7
  4360  17C6  00B2               	movwf	??__randShape^(0+128)
  4361  17C7  0832               	movf	??__randShape^(0+128),w
  4362  17C8  05B8               	andwf	__randShape@shape^(0+128),f
  4363                           
  4364                           ;tetris.h: 67: shape |= (QueuePop(randset) & 1);
  4365  17C9  0837               	movf	__randShape@randset^(0+128),w
  4366  17CA  160A  118A  2739  160A  118A  	fcall	_QueuePop
  4367  17CF  3901               	andlw	1
  4368  17D0  00B2               	movwf	??__randShape^(0+128)
  4369  17D1  0832               	movf	??__randShape^(0+128),w
  4370  17D2  04B8               	iorwf	__randShape@shape^(0+128),f
  4371  17D3  2FBE               	goto	l2779
  4372  17D4                     l2781:
  4373                           
  4374                           ;tetris.h: 68: };tetris.h: 69: if (shape == 6) return 24;
  4375  17D4  3006               	movlw	6
  4376  17D5  0638               	xorwf	__randShape@shape^(0+128),w
  4377  17D6  1D03               	btfss	3,2
  4378  17D7  2FDA               	goto	l2787
  4379  17D8  3018               	movlw	24
  4380  17D9  0008               	return
  4381  17DA                     l2787:
  4382                           
  4383                           ;tetris.h: 70: for (uint8_t i = 0; i < 2; i++) {
  4384  17DA  01B6               	clrf	__randShape@i_212^(0+128)
  4385  17DB                     l2793:
  4386                           
  4387                           ;tetris.h: 71: rotate |= (QueuePop(randset) << i);
  4388  17DB  0837               	movf	__randShape@randset^(0+128),w
  4389  17DC  160A  118A  2739  160A  118A  	fcall	_QueuePop
  4390  17E1  00B2               	movwf	??__randShape^(0+128)
  4391  17E2  0A36               	incf	__randShape@i_212^(0+128),w
  4392  17E3  2FE6               	goto	u3514
  4393  17E4                     u3515:
  4394  17E4  1003               	clrc
  4395  17E5  0DB2               	rlf	??__randShape^(0+128),f
  4396  17E6                     u3514:
  4397  17E6  3EFF               	addlw	-1
  4398  17E7  1D03               	skipz
  4399  17E8  2FE4               	goto	u3515
  4400  17E9  0832               	movf	??__randShape^(0+128),w
  4401  17EA  00B3               	movwf	(??__randShape+1)^(0+128)
  4402  17EB  0833               	movf	(??__randShape+1)^(0+128),w
  4403  17EC  04B4               	iorwf	__randShape@rotate^(0+128),f
  4404  17ED  3001               	movlw	1
  4405  17EE  00B2               	movwf	??__randShape^(0+128)
  4406  17EF  0832               	movf	??__randShape^(0+128),w
  4407  17F0  07B6               	addwf	__randShape@i_212^(0+128),f
  4408  17F1  3002               	movlw	2
  4409  17F2  0236               	subwf	__randShape@i_212^(0+128),w
  4410  17F3  1C03               	skipc
  4411  17F4  2FDB               	goto	l2793
  4412                           
  4413                           ;tetris.h: 72: };tetris.h: 73: return 4 * shape + rotate;
  4414  17F5  0838               	movf	__randShape@shape^(0+128),w
  4415  17F6  00B2               	movwf	??__randShape^(0+128)
  4416  17F7  3002               	movlw	2
  4417  17F8                     u3535:
  4418  17F8  1003               	clrc
  4419  17F9  0DB2               	rlf	??__randShape^(0+128),f
  4420  17FA  3EFF               	addlw	-1
  4421  17FB  1D03               	skipz
  4422  17FC  2FF8               	goto	u3535
  4423  17FD  0834               	movf	__randShape@rotate^(0+128),w
  4424  17FE  0732               	addwf	??__randShape^(0+128),w
  4425  17FF  0008               	return
  4426  1800                     __end_of__randShape:
  4427                           
  4428                           	psect	text21
  4429  1739                     __ptext21:	
  4430 ;; *************** function _QueuePop *****************
  4431 ;; Defined at:
  4432 ;;		line 75 in file "queue.h"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  q               1    wreg     PTR struct Queue
  4435 ;;		 -> randset(3), 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  q               1   17[BANK1 ] PTR struct Queue
  4438 ;;		 -> randset(3), 
  4439 ;;  ret             1   16[BANK1 ] unsigned char 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      unsigned char 
  4442 ;; Registers used:
  4443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 300/100
  4446 ;;		On exit  : 300/100
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4449 ;;      Params:         0       0       0       0       0
  4450 ;;      Locals:         0       0       2       0       0
  4451 ;;      Temps:          0       0       9       0       0
  4452 ;;      Totals:         0       0      11       0       0
  4453 ;;Total ram usage:       11 bytes
  4454 ;; Hardware stack levels used: 1
  4455 ;; Hardware stack levels required when called: 8
  4456 ;; This function calls:
  4457 ;;		_QueueLength
  4458 ;;		__next
  4459 ;; This function is called by:
  4460 ;;		__randShape
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _QueuePop
  4466  1739                     _QueuePop:
  4467                           
  4468                           ;incstack = 0
  4469 ;; hardware stack exceeded
  4470                           ; Regs used in _QueuePop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4471                           ;QueuePop@q stored from wreg
  4472  1739  00B1               	movwf	QueuePop@q^(0+128)
  4473                           
  4474                           ;queue.h: 76: if (QueueLength(q) == 0) return 2;
  4475  173A  0831               	movf	QueuePop@q^(0+128),w
  4476  173B  160A  118A  2513  160A  118A  	fcall	_QueueLength
  4477  1740  3A00               	xorlw	0
  4478  1741  1D03               	skipz
  4479  1742  2F45               	goto	l2605
  4480  1743  3002               	movlw	2
  4481  1744  0008               	return
  4482  1745                     l2605:
  4483                           
  4484                           ;queue.h: 77: uint8_t ret = (q->_data & 1 << (q->ht>>4)) > 0 ? 1 : 0;
  4485  1745  0831               	movf	QueuePop@q^(0+128),w
  4486  1746  0084               	movwf	4
  4487  1747  1383               	bcf	3,7	;select IRP bank0
  4488  1748  0800               	movf	0,w
  4489  1749  00A7               	movwf	??_QueuePop^(0+128)
  4490  174A  0A84               	incf	4,f
  4491  174B  0800               	movf	0,w
  4492  174C  00A8               	movwf	(??_QueuePop^(0+128)+1)
  4493  174D  0831               	movf	QueuePop@q^(0+128),w
  4494  174E  3E02               	addlw	2
  4495  174F  0084               	movwf	4
  4496  1750  0800               	movf	0,w
  4497  1751  00A9               	movwf	(??_QueuePop+2)^(0+128)
  4498  1752  3004               	movlw	4
  4499  1753                     u3055:
  4500  1753  1003               	clrc
  4501  1754  0CA9               	rrf	(??_QueuePop+2)^(0+128),f
  4502  1755  3EFF               	addlw	-1
  4503  1756  1D03               	skipz
  4504  1757  2F53               	goto	u3055
  4505  1758  0829               	movf	(??_QueuePop+2)^(0+128),w
  4506  1759  00AA               	movwf	(??_QueuePop+3)^(0+128)
  4507  175A  0AAA               	incf	(??_QueuePop+3)^(0+128),f
  4508  175B  3001               	movlw	1
  4509  175C  00AB               	movwf	(??_QueuePop+4)^(0+128)
  4510  175D  3000               	movlw	0
  4511  175E  00AC               	movwf	((??_QueuePop+4)^(0+128)+1)
  4512  175F  2F63               	goto	u3064
  4513  1760                     u3065:
  4514  1760  1003               	clrc
  4515  1761  0DAB               	rlf	(??_QueuePop+4)^(0+128),f
  4516  1762  0DAC               	rlf	((??_QueuePop+4)^(0+128)+1),f
  4517  1763                     u3064:
  4518  1763  0BAA               	decfsz	(??_QueuePop+3)^(0+128),f
  4519  1764  2F60               	goto	u3065
  4520  1765  0827               	movf	??_QueuePop^(0+128),w
  4521  1766  052B               	andwf	(??_QueuePop+4)^(0+128),w
  4522  1767  00AD               	movwf	(??_QueuePop+6)^(0+128)
  4523  1768  0828               	movf	(??_QueuePop+1)^(0+128),w
  4524  1769  052C               	andwf	(??_QueuePop+5)^(0+128),w
  4525  176A  00AE               	movwf	(??_QueuePop+7)^(0+128)
  4526  176B  082D               	movf	(??_QueuePop+6)^(0+128),w
  4527  176C  042E               	iorwf	((??_QueuePop+6)^(0+128)+1),w
  4528  176D  1903               	btfsc	3,2
  4529  176E  2F71               	goto	u3070
  4530  176F  3001               	movlw	1
  4531  1770  2F72               	goto	u3080
  4532  1771                     u3070:
  4533  1771  3000               	movlw	0
  4534  1772                     u3080:
  4535  1772  00AF               	movwf	(??_QueuePop+8)^(0+128)
  4536  1773  082F               	movf	(??_QueuePop+8)^(0+128),w
  4537  1774  00B0               	movwf	QueuePop@ret^(0+128)
  4538                           
  4539                           ;queue.h: 78: q->ht = (_next((q->ht>>4)) << 4) + (q->ht&15);
  4540  1775  0831               	movf	QueuePop@q^(0+128),w
  4541  1776  3E02               	addlw	2
  4542  1777  0084               	movwf	4
  4543  1778  0800               	movf	0,w
  4544  1779  00A7               	movwf	??_QueuePop^(0+128)
  4545  177A  3004               	movlw	4
  4546  177B                     u3095:
  4547  177B  1003               	clrc
  4548  177C  0CA7               	rrf	??_QueuePop^(0+128),f
  4549  177D  3EFF               	addlw	-1
  4550  177E  1D03               	skipz
  4551  177F  2F7B               	goto	u3095
  4552  1780  0827               	movf	??_QueuePop^(0+128),w
  4553  1781  160A  118A  22F1  160A  118A  	fcall	__next
  4554  1786  00A8               	movwf	(??_QueuePop+1)^(0+128)
  4555  1787  3004               	movlw	4
  4556  1788                     u3105:
  4557  1788  1003               	clrc
  4558  1789  0DA8               	rlf	(??_QueuePop+1)^(0+128),f
  4559  178A  3EFF               	addlw	-1
  4560  178B  1D03               	skipz
  4561  178C  2F88               	goto	u3105
  4562  178D  0831               	movf	QueuePop@q^(0+128),w
  4563  178E  3E02               	addlw	2
  4564  178F  0084               	movwf	4
  4565  1790  0800               	movf	0,w
  4566  1791  390F               	andlw	15
  4567  1792  0728               	addwf	(??_QueuePop+1)^(0+128),w
  4568  1793  00A9               	movwf	(??_QueuePop+2)^(0+128)
  4569  1794  0831               	movf	QueuePop@q^(0+128),w
  4570  1795  3E02               	addlw	2
  4571  1796  0084               	movwf	4
  4572  1797  0829               	movf	(??_QueuePop+2)^(0+128),w
  4573  1798  0080               	movwf	0
  4574                           
  4575                           ;queue.h: 81: return ret;
  4576  1799  0830               	movf	QueuePop@ret^(0+128),w
  4577  179A  0008               	return
  4578  179B                     __end_of_QueuePop:
  4579                           
  4580                           	psect	text22
  4581  12F1                     __ptext22:	
  4582 ;; *************** function __next *****************
  4583 ;; Defined at:
  4584 ;;		line 50 in file "queue.h"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  n               1    wreg     unsigned char 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  n               1    1[BANK1 ] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      unsigned char 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0
  4593 ;; Tracked objects:
  4594 ;;		On entry : B00/100
  4595 ;;		On exit  : B00/100
  4596 ;;		Unchanged: 800/0
  4597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4598 ;;      Params:         0       0       0       0       0
  4599 ;;      Locals:         0       0       1       0       0
  4600 ;;      Temps:          0       0       1       0       0
  4601 ;;      Totals:         0       0       2       0       0
  4602 ;;Total ram usage:        2 bytes
  4603 ;; Hardware stack levels used: 1
  4604 ;; Hardware stack levels required when called: 7
  4605 ;; This function calls:
  4606 ;;		Nothing
  4607 ;; This function is called by:
  4608 ;;		_QueuePop
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function __next
  4614  12F1                     __next:
  4615                           
  4616                           ;incstack = 0
  4617 ;; hardware stack exceeded
  4618                           ; Regs used in __next: [wreg+status,2+status,0]
  4619                           ;__next@n stored from wreg
  4620  12F1  00A1               	movwf	__next@n^(0+128)
  4621                           
  4622                           ;queue.h: 51: n++;
  4623  12F2  3001               	movlw	1
  4624  12F3  00A0               	movwf	??__next^(0+128)
  4625  12F4  0820               	movf	??__next^(0+128),w
  4626  12F5  07A1               	addwf	__next@n^(0+128),f
  4627                           
  4628                           ;queue.h: 52: if (n > 15) return 0;
  4629  12F6  3010               	movlw	16
  4630  12F7  0221               	subwf	__next@n^(0+128),w
  4631  12F8  1C03               	skipc
  4632  12F9  2AFC               	goto	l2461
  4633  12FA  3000               	movlw	0
  4634  12FB  0008               	return
  4635  12FC                     l2461:
  4636                           
  4637                           ;queue.h: 53: return n;
  4638  12FC  0821               	movf	__next@n^(0+128),w
  4639  12FD  0008               	return
  4640  12FE                     __end_of__next:
  4641                           
  4642                           	psect	text23
  4643  1513                     __ptext23:	
  4644 ;; *************** function _QueueLength *****************
  4645 ;; Defined at:
  4646 ;;		line 56 in file "queue.h"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  q               1    wreg     PTR struct Queue
  4649 ;;		 -> randset(3), 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;  q               1    5[BANK1 ] PTR struct Queue
  4652 ;;		 -> randset(3), 
  4653 ;;  length          1    6[BANK1 ] char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      unsigned char 
  4656 ;; Registers used:
  4657 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4658 ;; Tracked objects:
  4659 ;;		On entry : 300/100
  4660 ;;		On exit  : 300/100
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4663 ;;      Params:         0       0       0       0       0
  4664 ;;      Locals:         0       0       4       0       0
  4665 ;;      Temps:          0       0       3       0       0
  4666 ;;      Totals:         0       0       7       0       0
  4667 ;;Total ram usage:        7 bytes
  4668 ;; Hardware stack levels used: 1
  4669 ;; Hardware stack levels required when called: 7
  4670 ;; This function calls:
  4671 ;;		Nothing
  4672 ;; This function is called by:
  4673 ;;		_QueuePop
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function _QueueLength
  4679  1513                     _QueueLength:
  4680                           
  4681                           ;incstack = 0
  4682 ;; hardware stack exceeded
  4683                           ; Regs used in _QueueLength: [wreg-fsr0h+status,2+status,0]
  4684                           ;QueueLength@q stored from wreg
  4685  1513  00A5               	movwf	QueueLength@q^(0+128)
  4686                           
  4687                           ;queue.h: 58: int8_t length = (q->ht & 15) - (q->ht>>4);
  4688  1514  0825               	movf	QueueLength@q^(0+128),w
  4689  1515  3E02               	addlw	2
  4690  1516  0084               	movwf	4
  4691  1517  300F               	movlw	15
  4692  1518  1383               	bcf	3,7	;select IRP bank0
  4693  1519  0500               	andwf	0,w
  4694  151A  00A0               	movwf	??_QueueLength^(0+128)
  4695  151B  0825               	movf	QueueLength@q^(0+128),w
  4696  151C  3E02               	addlw	2
  4697  151D  0084               	movwf	4
  4698  151E  0800               	movf	0,w
  4699  151F  00A1               	movwf	(??_QueueLength+1)^(0+128)
  4700  1520  3004               	movlw	4
  4701  1521                     u2805:
  4702  1521  1003               	clrc
  4703  1522  0CA1               	rrf	(??_QueueLength+1)^(0+128),f
  4704  1523  3EFF               	addlw	-1
  4705  1524  1D03               	skipz
  4706  1525  2D21               	goto	u2805
  4707  1526  0821               	movf	(??_QueueLength+1)^(0+128),w
  4708  1527  0220               	subwf	??_QueueLength^(0+128),w
  4709  1528  00A2               	movwf	(??_QueueLength+2)^(0+128)
  4710  1529  0822               	movf	(??_QueueLength+2)^(0+128),w
  4711  152A  00A6               	movwf	QueueLength@length^(0+128)
  4712                           
  4713                           ;queue.h: 59: return length >= 0 ? length : length + 16;
  4714  152B  1FA6               	btfss	QueueLength@length^(0+128),7
  4715  152C  2D36               	goto	l2471
  4716  152D  3010               	movlw	16
  4717  152E  0726               	addwf	QueueLength@length^(0+128),w
  4718  152F  00A3               	movwf	_QueueLength$117^(0+128)
  4719  1530  01A4               	clrf	(_QueueLength$117+1)^(0+128)
  4720  1531  1803               	skipnc
  4721  1532  0AA4               	incf	(_QueueLength$117^(0+128)+1),f
  4722  1533  1BA6               	btfsc	QueueLength@length^(0+128),7
  4723  1534  03A4               	decf	(_QueueLength$117^(0+128)+1),f
  4724  1535  2D3B               	goto	l2473
  4725  1536                     l2471:
  4726  1536  0826               	movf	QueueLength@length^(0+128),w
  4727  1537  00A3               	movwf	_QueueLength$117^(0+128)
  4728  1538  01A4               	clrf	(_QueueLength$117+1)^(0+128)
  4729  1539  1BA3               	btfsc	_QueueLength$117^(0+128),7
  4730  153A  03A4               	decf	(_QueueLength$117+1)^(0+128),f
  4731  153B                     l2473:
  4732  153B  1683               	bsf	3,5	;RP0=1, select bank1
  4733  153C  1303               	bcf	3,6	;RP1=0, select bank1
  4734  153D  0823               	movf	_QueueLength$117^(0+128),w
  4735  153E  0008               	return
  4736  153F                     __end_of_QueueLength:
  4737                           
  4738                           	psect	text24
  4739  12A9                     __ptext24:	
  4740 ;; *************** function _AdcGo *****************
  4741 ;; Defined at:
  4742 ;;		line 45 in file "adc.h"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		None
  4751 ;; Tracked objects:
  4752 ;;		On entry : 300/100
  4753 ;;		On exit  : 300/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4756 ;;      Params:         0       0       0       0       0
  4757 ;;      Locals:         0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0
  4759 ;;      Totals:         0       0       0       0       0
  4760 ;;Total ram usage:        0 bytes
  4761 ;; Hardware stack levels used: 1
  4762 ;; Hardware stack levels required when called: 7
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		__randShape
  4767 ;;		_setup
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _AdcGo
  4773  12A9                     _AdcGo:
  4774                           
  4775                           ;adc.h: 46: ADCON0 |= 0x04;
  4776                           
  4777                           ;incstack = 0
  4778 ;; hardware stack exceeded
  4779                           ; Regs used in _AdcGo: []
  4780  12A9  1283               	bcf	3,5	;RP0=0, select bank0
  4781  12AA  151F               	bsf	31,2	;volatile
  4782  12AB  0008               	return
  4783  12AC                     __end_of_AdcGo:
  4784                           
  4785                           	psect	text25
  4786  1376                     __ptext25:	
  4787 ;; *************** function __drawBlock *****************
  4788 ;; Defined at:
  4789 ;;		line 98 in file "tetris.h"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  x               1    wreg     unsigned char 
  4792 ;;  y               1   10[BANK1 ] unsigned char 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  x               1   13[BANK1 ] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 300/100
  4801 ;;		On exit  : 300/100
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4804 ;;      Params:         0       0       1       0       0
  4805 ;;      Locals:         0       0       1       0       0
  4806 ;;      Temps:          0       0       2       0       0
  4807 ;;      Totals:         0       0       4       0       0
  4808 ;;Total ram usage:        4 bytes
  4809 ;; Hardware stack levels used: 1
  4810 ;; Hardware stack levels required when called: 10
  4811 ;; This function calls:
  4812 ;;		_UartCurSet
  4813 ;;		_UartSendString
  4814 ;; This function is called by:
  4815 ;;		__drawShape
  4816 ;;		__shapeNext
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function __drawBlock
  4822  1376                     __drawBlock:
  4823                           
  4824                           ;incstack = 0
  4825 ;; hardware stack exceeded
  4826                           ; Regs used in __drawBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4827                           ;__drawBlock@x stored from wreg
  4828  1376  00AD               	movwf	__drawBlock@x^(0+128)
  4829                           
  4830                           ;tetris.h: 99: UartCurSet(2 * x + 24, y + 2);
  4831  1377  082A               	movf	__drawBlock@y^(0+128),w
  4832  1378  3E02               	addlw	2
  4833  1379  00AB               	movwf	??__drawBlock^(0+128)
  4834  137A  082B               	movf	??__drawBlock^(0+128),w
  4835  137B  00A7               	movwf	UartCurSet@y^(0+128)
  4836  137C  082D               	movf	__drawBlock@x^(0+128),w
  4837  137D  00AC               	movwf	(??__drawBlock+1)^(0+128)
  4838  137E  072C               	addwf	(??__drawBlock+1)^(0+128),w
  4839  137F  3E18               	addlw	24
  4840  1380  120A  158A  23A6  160A  118A  	fcall	_UartCurSet
  4841                           
  4842                           ;tetris.h: 100: UartSendString("\xe2\x96\x88\xe2\x96\x88");
  4843  1385  30BB               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  4844  1386  160A  118A  23D5   	fcall	_UartSendString
  4845  1389  0008               	return
  4846  138A                     __end_of__drawBlock:
  4847                           
  4848                           	psect	text26
  4849  0BA6                     __ptext26:	
  4850 ;; *************** function _UartCurSet *****************
  4851 ;; Defined at:
  4852 ;;		line 93 in file "uart.h"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  x               1    wreg     unsigned char 
  4855 ;;  y               1    7[BANK1 ] unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  x               1    9[BANK1 ] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 300/100
  4864 ;;		On exit  : 300/100
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4867 ;;      Params:         0       0       1       0       0
  4868 ;;      Locals:         0       0       1       0       0
  4869 ;;      Temps:          0       0       1       0       0
  4870 ;;      Totals:         0       0       3       0       0
  4871 ;;Total ram usage:        3 bytes
  4872 ;; Hardware stack levels used: 1
  4873 ;; Hardware stack levels required when called: 9
  4874 ;; This function calls:
  4875 ;;		_UartSendChar
  4876 ;;		_UartSendString
  4877 ;;		___lbdiv
  4878 ;;		___lbmod
  4879 ;; This function is called by:
  4880 ;;		_UIClearGame
  4881 ;;		_UIPageMainToGame
  4882 ;;		__drawBlock
  4883 ;;		__wipeBlock
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _UartCurSet
  4889  0BA6                     _UartCurSet:
  4890                           
  4891                           ;incstack = 0
  4892 ;; hardware stack exceeded
  4893                           ; Regs used in _UartCurSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4894                           ;UartCurSet@x stored from wreg
  4895  0BA6  00A9               	movwf	UartCurSet@x^(0+128)
  4896                           
  4897                           ;uart.h: 94: UartSendString("\033[");
  4898  0BA7  30DD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4899  0BA8  160A  118A  23D5  120A  158A  	fcall	_UartSendString
  4900                           
  4901                           ;uart.h: 95: if (y / 10) UartSendChar(y / 10 + '0');
  4902  0BAD  300A               	movlw	10
  4903  0BAE  00A8               	movwf	??_UartCurSet^(0+128)
  4904  0BAF  0828               	movf	??_UartCurSet^(0+128),w
  4905  0BB0  00A0               	movwf	___lbdiv@divisor^(0+128)
  4906  0BB1  0827               	movf	UartCurSet@y^(0+128),w
  4907  0BB2  160A  118A  2433  120A  158A  	fcall	___lbdiv
  4908  0BB7  3A00               	xorlw	0
  4909  0BB8  1903               	skipnz
  4910  0BB9  2BCA               	goto	l88
  4911  0BBA  300A               	movlw	10
  4912  0BBB  00A8               	movwf	??_UartCurSet^(0+128)
  4913  0BBC  0828               	movf	??_UartCurSet^(0+128),w
  4914  0BBD  00A0               	movwf	___lbdiv@divisor^(0+128)
  4915  0BBE  0827               	movf	UartCurSet@y^(0+128),w
  4916  0BBF  160A  118A  2433  120A  158A  	fcall	___lbdiv
  4917  0BC4  3E30               	addlw	48
  4918  0BC5  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  4919  0BCA                     l88:
  4920                           
  4921                           ;uart.h: 96: UartSendChar(y % 10 + '0');
  4922  0BCA  300A               	movlw	10
  4923  0BCB  00A8               	movwf	??_UartCurSet^(0+128)
  4924  0BCC  0828               	movf	??_UartCurSet^(0+128),w
  4925  0BCD  00A0               	movwf	___lbmod@divisor^(0+128)
  4926  0BCE  0827               	movf	UartCurSet@y^(0+128),w
  4927  0BCF  160A  118A  2477  120A  158A  	fcall	___lbmod
  4928  0BD4  3E30               	addlw	48
  4929  0BD5  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  4930                           
  4931                           ;uart.h: 97: UartSendChar(';');
  4932  0BDA  303B               	movlw	59
  4933  0BDB  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  4934                           
  4935                           ;uart.h: 98: if (x / 10) UartSendChar(x / 10 + '0');
  4936  0BE0  300A               	movlw	10
  4937  0BE1  00A8               	movwf	??_UartCurSet^(0+128)
  4938  0BE2  0828               	movf	??_UartCurSet^(0+128),w
  4939  0BE3  00A0               	movwf	___lbdiv@divisor^(0+128)
  4940  0BE4  0829               	movf	UartCurSet@x^(0+128),w
  4941  0BE5  160A  118A  2433  120A  158A  	fcall	___lbdiv
  4942  0BEA  3A00               	xorlw	0
  4943  0BEB  1903               	skipnz
  4944  0BEC  2BFD               	goto	l89
  4945  0BED  300A               	movlw	10
  4946  0BEE  00A8               	movwf	??_UartCurSet^(0+128)
  4947  0BEF  0828               	movf	??_UartCurSet^(0+128),w
  4948  0BF0  00A0               	movwf	___lbdiv@divisor^(0+128)
  4949  0BF1  0829               	movf	UartCurSet@x^(0+128),w
  4950  0BF2  160A  118A  2433  120A  158A  	fcall	___lbdiv
  4951  0BF7  3E30               	addlw	48
  4952  0BF8  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  4953  0BFD                     l89:
  4954                           
  4955                           ;uart.h: 99: UartSendChar(x % 10 + '0');
  4956  0BFD  300A               	movlw	10
  4957  0BFE  00A8               	movwf	??_UartCurSet^(0+128)
  4958  0BFF  0828               	movf	??_UartCurSet^(0+128),w
  4959  0C00  00A0               	movwf	___lbmod@divisor^(0+128)
  4960  0C01  0829               	movf	UartCurSet@x^(0+128),w
  4961  0C02  160A  118A  2477  120A  158A  	fcall	___lbmod
  4962  0C07  3E30               	addlw	48
  4963  0C08  160A  118A  22E4  120A  158A  	fcall	_UartSendChar
  4964                           
  4965                           ;uart.h: 100: UartSendChar('H');
  4966  0C0D  3048               	movlw	72
  4967  0C0E  160A  118A  22E4   	fcall	_UartSendChar
  4968  0C11  0008               	return
  4969  0C12                     __end_of_UartCurSet:
  4970                           
  4971                           	psect	text27
  4972  1477                     __ptext27:	
  4973 ;; *************** function ___lbmod *****************
  4974 ;; Defined at:
  4975 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbmod.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  dividend        1    wreg     unsigned char 
  4978 ;;  divisor         1    0[BANK1 ] unsigned char 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  dividend        1    4[BANK1 ] unsigned char 
  4981 ;;  rem             1    6[BANK1 ] unsigned char 
  4982 ;;  counter         1    5[BANK1 ] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      unsigned char 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0
  4987 ;; Tracked objects:
  4988 ;;		On entry : 300/100
  4989 ;;		On exit  : 300/100
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4992 ;;      Params:         0       0       1       0       0
  4993 ;;      Locals:         0       0       3       0       0
  4994 ;;      Temps:          0       0       3       0       0
  4995 ;;      Totals:         0       0       7       0       0
  4996 ;;Total ram usage:        7 bytes
  4997 ;; Hardware stack levels used: 1
  4998 ;; Hardware stack levels required when called: 7
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_UartCurSet
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function ___lbmod
  5008  1477                     ___lbmod:
  5009                           
  5010                           ;incstack = 0
  5011 ;; hardware stack exceeded
  5012                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5013                           ;___lbmod@dividend stored from wreg
  5014  1477  00A4               	movwf	___lbmod@dividend^(0+128)
  5015  1478  3008               	movlw	8
  5016  1479  00A1               	movwf	??___lbmod^(0+128)
  5017  147A  0821               	movf	??___lbmod^(0+128),w
  5018  147B  00A5               	movwf	___lbmod@counter^(0+128)
  5019  147C  01A6               	clrf	___lbmod@rem^(0+128)
  5020  147D                     l2507:
  5021  147D  0824               	movf	___lbmod@dividend^(0+128),w
  5022  147E  00A1               	movwf	??___lbmod^(0+128)
  5023  147F  3007               	movlw	7
  5024  1480                     u2875:
  5025  1480  1003               	clrc
  5026  1481  0CA1               	rrf	??___lbmod^(0+128),f
  5027  1482  3EFF               	addlw	-1
  5028  1483  1D03               	skipz
  5029  1484  2C80               	goto	u2875
  5030  1485  0826               	movf	___lbmod@rem^(0+128),w
  5031  1486  00A2               	movwf	(??___lbmod+1)^(0+128)
  5032  1487  0722               	addwf	(??___lbmod+1)^(0+128),w
  5033  1488  0421               	iorwf	??___lbmod^(0+128),w
  5034  1489  00A3               	movwf	(??___lbmod+2)^(0+128)
  5035  148A  0823               	movf	(??___lbmod+2)^(0+128),w
  5036  148B  00A6               	movwf	___lbmod@rem^(0+128)
  5037  148C  1003               	clrc
  5038  148D  0DA4               	rlf	___lbmod@dividend^(0+128),f
  5039  148E  0820               	movf	___lbmod@divisor^(0+128),w
  5040  148F  0226               	subwf	___lbmod@rem^(0+128),w
  5041  1490  1C03               	skipc
  5042  1491  2C94               	goto	l860
  5043  1492  0820               	movf	___lbmod@divisor^(0+128),w
  5044  1493  02A6               	subwf	___lbmod@rem^(0+128),f
  5045  1494                     l860:
  5046  1494  3001               	movlw	1
  5047  1495  02A5               	subwf	___lbmod@counter^(0+128),f
  5048  1496  1D03               	btfss	3,2
  5049  1497  2C7D               	goto	l2507
  5050  1498  0826               	movf	___lbmod@rem^(0+128),w
  5051  1499  0008               	return
  5052  149A                     __end_of___lbmod:
  5053                           
  5054                           	psect	text28
  5055  1433                     __ptext28:	
  5056 ;; *************** function ___lbdiv *****************
  5057 ;; Defined at:
  5058 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbdiv.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  dividend        1    wreg     unsigned char 
  5061 ;;  divisor         1    0[BANK1 ] unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  dividend        1    2[BANK1 ] unsigned char 
  5064 ;;  quotient        1    4[BANK1 ] unsigned char 
  5065 ;;  counter         1    3[BANK1 ] unsigned char 
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  1    wreg      unsigned char 
  5068 ;; Registers used:
  5069 ;;		wreg, status,2, status,0
  5070 ;; Tracked objects:
  5071 ;;		On entry : 300/100
  5072 ;;		On exit  : 300/100
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5075 ;;      Params:         0       0       1       0       0
  5076 ;;      Locals:         0       0       3       0       0
  5077 ;;      Temps:          0       0       1       0       0
  5078 ;;      Totals:         0       0       5       0       0
  5079 ;;Total ram usage:        5 bytes
  5080 ;; Hardware stack levels used: 1
  5081 ;; Hardware stack levels required when called: 7
  5082 ;; This function calls:
  5083 ;;		Nothing
  5084 ;; This function is called by:
  5085 ;;		_UartCurSet
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function ___lbdiv
  5091  1433                     ___lbdiv:
  5092                           
  5093                           ;incstack = 0
  5094 ;; hardware stack exceeded
  5095                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5096                           ;___lbdiv@dividend stored from wreg
  5097  1433  00A2               	movwf	___lbdiv@dividend^(0+128)
  5098  1434  01A4               	clrf	___lbdiv@quotient^(0+128)
  5099  1435  0820               	movf	___lbdiv@divisor^(0+128),w
  5100  1436  1903               	btfsc	3,2
  5101  1437  2C52               	goto	l2499
  5102  1438  01A3               	clrf	___lbdiv@counter^(0+128)
  5103  1439  0AA3               	incf	___lbdiv@counter^(0+128),f
  5104  143A                     l2487:
  5105  143A  1BA0               	btfsc	___lbdiv@divisor^(0+128),7
  5106  143B  2C43               	goto	l2489
  5107  143C  1003               	clrc
  5108  143D  0DA0               	rlf	___lbdiv@divisor^(0+128),f
  5109  143E  3001               	movlw	1
  5110  143F  00A1               	movwf	??___lbdiv^(0+128)
  5111  1440  0821               	movf	??___lbdiv^(0+128),w
  5112  1441  07A3               	addwf	___lbdiv@counter^(0+128),f
  5113  1442  2C3A               	goto	l2487
  5114  1443                     l2489:
  5115  1443  1003               	clrc
  5116  1444  0DA4               	rlf	___lbdiv@quotient^(0+128),f
  5117  1445  0820               	movf	___lbdiv@divisor^(0+128),w
  5118  1446  0222               	subwf	___lbdiv@dividend^(0+128),w
  5119  1447  1C03               	skipc
  5120  1448  2C4D               	goto	L3
  5121  1449  0820               	movf	___lbdiv@divisor^(0+128),w
  5122  144A  02A2               	subwf	___lbdiv@dividend^(0+128),f
  5123  144B  1424               	bsf	___lbdiv@quotient^(0+128),0
  5124  144C  1003               	clrc
  5125  144D                     L3:
  5126  144D  0CA0               	rrf	___lbdiv@divisor^(0+128),f
  5127  144E  3001               	movlw	1
  5128  144F  02A3               	subwf	___lbdiv@counter^(0+128),f
  5129  1450  1D03               	btfss	3,2
  5130  1451  2C43               	goto	l2489
  5131  1452                     l2499:
  5132  1452  0824               	movf	___lbdiv@quotient^(0+128),w
  5133  1453  0008               	return
  5134  1454                     __end_of___lbdiv:
  5135                           
  5136                           	psect	text29
  5137  13D5                     __ptext29:	
  5138 ;; *************** function _UartSendString *****************
  5139 ;; Defined at:
  5140 ;;		line 69 in file "uart.h"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;  str             1    wreg     PTR const unsigned char 
  5143 ;;		 -> STR_24(3), STR_23(7), STR_22(13), STR_21(4), 
  5144 ;;		 -> STR_20(4), STR_19(4), STR_18(17), STR_17(4), 
  5145 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(21), 
  5146 ;;		 -> STR_12(3), STR_11(22), STR_10(21), STR_9(22), 
  5147 ;;		 -> STR_8(20), STR_7(3), STR_6(2), STR_5(3), 
  5148 ;;		 -> STR_4(3), STR_3(3), STR_2(3), STR_1(3), 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  str             1    2[BANK1 ] PTR const unsigned char 
  5151 ;;		 -> STR_24(3), STR_23(7), STR_22(13), STR_21(4), 
  5152 ;;		 -> STR_20(4), STR_19(4), STR_18(17), STR_17(4), 
  5153 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(21), 
  5154 ;;		 -> STR_12(3), STR_11(22), STR_10(21), STR_9(22), 
  5155 ;;		 -> STR_8(20), STR_7(3), STR_6(2), STR_5(3), 
  5156 ;;		 -> STR_4(3), STR_3(3), STR_2(3), STR_1(3), 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 200/100
  5163 ;;		On exit  : 300/100
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5166 ;;      Params:         0       0       0       0       0
  5167 ;;      Locals:         0       0       1       0       0
  5168 ;;      Temps:          0       0       1       0       0
  5169 ;;      Totals:         0       0       2       0       0
  5170 ;;Total ram usage:        2 bytes
  5171 ;; Hardware stack levels used: 1
  5172 ;; Hardware stack levels required when called: 8
  5173 ;; This function calls:
  5174 ;;		_UartSendChar
  5175 ;; This function is called by:
  5176 ;;		_UartCurSet
  5177 ;;		_UartCurMove
  5178 ;;		_UIPageMain
  5179 ;;		_UIClearGame
  5180 ;;		_UIPageMainToGame
  5181 ;;		__drawBlock
  5182 ;;		__wipeBlock
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           
  5187                           ;psect for function _UartSendString
  5188  13D5                     _UartSendString:
  5189                           
  5190                           ;incstack = 0
  5191 ;; hardware stack exceeded
  5192                           ; Regs used in _UartSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5193                           ;UartSendString@str stored from wreg
  5194  13D5  1683               	bsf	3,5	;RP0=1, select bank1
  5195  13D6  00A2               	movwf	UartSendString@str^(0+128)
  5196  13D7                     l2453:	
  5197                           ;uart.h: 70: while (*str) {
  5198                           
  5199  13D7  0822               	movf	UartSendString@str^(0+128),w
  5200  13D8  0084               	movwf	4
  5201  13D9  120A  158A  2000  160A  118A  	fcall	stringdir
  5202  13DE  3A00               	xorlw	0
  5203  13DF  1903               	btfsc	3,2
  5204  13E0  0008               	return
  5205                           
  5206                           ;uart.h: 71: UartSendChar(*str);
  5207  13E1  0822               	movf	UartSendString@str^(0+128),w
  5208  13E2  0084               	movwf	4
  5209  13E3  120A  158A  2000  160A  118A  	fcall	stringdir
  5210  13E8  160A  118A  22E4  160A  118A  	fcall	_UartSendChar
  5211                           
  5212                           ;uart.h: 72: str++;
  5213  13ED  3001               	movlw	1
  5214  13EE  00A1               	movwf	??_UartSendString^(0+128)
  5215  13EF  0821               	movf	??_UartSendString^(0+128),w
  5216  13F0  07A2               	addwf	UartSendString@str^(0+128),f
  5217  13F1  2BD7               	goto	l2453
  5218  13F2                     __end_of_UartSendString:
  5219                           
  5220                           	psect	text30
  5221  12E4                     __ptext30:	
  5222 ;; *************** function _UartSendChar *****************
  5223 ;; Defined at:
  5224 ;;		line 54 in file "uart.h"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  ch              1    wreg     unsigned char 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  ch              1    0[BANK1 ] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg
  5233 ;; Tracked objects:
  5234 ;;		On entry : 200/100
  5235 ;;		On exit  : 300/100
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5238 ;;      Params:         0       0       0       0       0
  5239 ;;      Locals:         0       0       1       0       0
  5240 ;;      Temps:          0       0       0       0       0
  5241 ;;      Totals:         0       0       1       0       0
  5242 ;;Total ram usage:        1 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; Hardware stack levels required when called: 7
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_UartSendUTF8
  5249 ;;		_UartSendString
  5250 ;;		_UartCurSet
  5251 ;;		_UartCurMove
  5252 ;;		_UIPageMain
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _UartSendChar
  5258  12E4                     _UartSendChar:
  5259                           
  5260                           ;incstack = 0
  5261 ;; hardware stack exceeded
  5262                           ; Regs used in _UartSendChar: [wreg]
  5263                           ;UartSendChar@ch stored from wreg
  5264  12E4  1683               	bsf	3,5	;RP0=1, select bank1
  5265  12E5  00A0               	movwf	UartSendChar@ch^(0+128)
  5266  12E6                     l58:	
  5267                           ;uart.h: 55: while (!TXIF);
  5268                           
  5269  12E6  1283               	bcf	3,5	;RP0=0, select bank0
  5270  12E7  1E0C               	btfss	12,4	;volatile
  5271  12E8  2AE6               	goto	l58
  5272                           
  5273                           ;uart.h: 56: TXREG = ch;
  5274  12E9  1683               	bsf	3,5	;RP0=1, select bank1
  5275  12EA  0820               	movf	UartSendChar@ch^(0+128),w
  5276  12EB  1283               	bcf	3,5	;RP0=0, select bank0
  5277  12EC  0099               	movwf	25	;volatile
  5278  12ED                     l61:	
  5279                           ;uart.h: 60: while (!TRMT);
  5280                           
  5281  12ED  1683               	bsf	3,5	;RP0=1, select bank1
  5282  12EE  1898               	btfsc	24,1	;volatile
  5283  12EF  0008               	return
  5284  12F0  2AED               	goto	l61
  5285  12F1                     __end_of_UartSendChar:
  5286                           
  5287                           	psect	text31
  5288  0C12                     __ptext31:	
  5289 ;; *************** function _isr *****************
  5290 ;; Defined at:
  5291 ;;		line 72 in file "main.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  rc              1   62[BANK0 ] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 300/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5305 ;;      Params:         0       0       0       0       0
  5306 ;;      Locals:         0       1       0       0       0
  5307 ;;      Temps:          0       6       0       0       0
  5308 ;;      Totals:         0       7       0       0       0
  5309 ;;Total ram usage:        7 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 6
  5312 ;; This function calls:
  5313 ;;		_AdcVoltL
  5314 ;;		_QueuePush
  5315 ;;		_TetrisMove
  5316 ;;		_TetrisNext
  5317 ;;		_TetrisRotate
  5318 ;;		i1_AdcGo
  5319 ;;		i1_QueueLength
  5320 ;;		i1_UIClearGame
  5321 ;; This function is called by:
  5322 ;;		Interrupt level 1
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           
  5327                           ;psect for function _isr
  5328  0C12                     _isr:
  5329                           
  5330                           ;main.c: 81: if (ADIF) {
  5331  0C12  1F0C               	btfss	12,6	;volatile
  5332  0C13  2C3E               	goto	i1l3837
  5333                           
  5334                           ;main.c: 82: ADIF = 0;
  5335  0C14  130C               	bcf	12,6	;volatile
  5336                           
  5337                           ;main.c: 83: QueuePush(&randset, AdcVoltL() >> 6);
  5338  0C15  160A  118A  22AC  120A  158A  	fcall	_AdcVoltL
  5339  0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  5340  0C1B  00D8               	movwf	??_isr
  5341  0C1C  3006               	movlw	6
  5342  0C1D                     u533_25:
  5343  0C1D  1003               	clrc
  5344  0C1E  0CD8               	rrf	??_isr,f
  5345  0C1F  3EFF               	addlw	-1
  5346  0C20  1D03               	skipz
  5347  0C21  2C1D               	goto	u533_25
  5348  0C22  0858               	movf	??_isr,w
  5349  0C23  00D9               	movwf	??_isr+1
  5350  0C24  0859               	movf	??_isr+1,w
  5351  0C25  00F7               	movwf	QueuePush@i
  5352  0C26  30EB               	movlw	(low (_randset| 0))& (0+255)
  5353  0C27  160A  118A  268B  120A  158A  	fcall	_QueuePush
  5354                           
  5355                           ;main.c: 84: if (QueueLength(&randset) < 15) AdcGo();
  5356  0C2C  30EB               	movlw	(low (_randset| 0))& (0+255)
  5357  0C2D  160A  118A  24E9  120A  158A  	fcall	i1_QueueLength
  5358  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  5359  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  5360  0C34  00D8               	movwf	??_isr
  5361  0C35  300F               	movlw	15
  5362  0C36  0258               	subwf	??_isr,w
  5363  0C37  1803               	skipnc
  5364  0C38  2C3E               	goto	i1l3837
  5365  0C39  160A  118A  22A7  120A  158A  	fcall	i1_AdcGo
  5366  0C3E                     i1l3837:
  5367                           
  5368                           ;main.c: 85: };main.c: 86: if (RCIF) {
  5369  0C3E  1E8C               	btfss	12,5	;volatile
  5370  0C3F  2C98               	goto	i1l454
  5371                           
  5372                           ;main.c: 87: RCIF = 0;
  5373  0C40  128C               	bcf	12,5	;volatile
  5374                           
  5375                           ;main.c: 88: uint8_t rc = RCREG;
  5376  0C41  081A               	movf	26,w	;volatile
  5377  0C42  00D8               	movwf	??_isr
  5378  0C43  0858               	movf	??_isr,w
  5379  0C44  00DE               	movwf	isr@rc
  5380                           
  5381                           ;main.c: 89: if (key[0] == 0x1b) {
  5382  0C45  301B               	movlw	27
  5383  0C46  065F               	xorwf	_key,w
  5384  0C47  1D03               	btfss	3,2
  5385  0C48  2C85               	goto	i1l3875
  5386                           
  5387                           ;main.c: 90: if (key[1] == '[') {
  5388  0C49  305B               	movlw	91
  5389  0C4A  0660               	xorwf	_key+1,w
  5390  0C4B  1D03               	btfss	3,2
  5391  0C4C  2C78               	goto	i1l3867
  5392                           
  5393                           ;main.c: 91: if (rc == 'A') {
  5394  0C4D  3041               	movlw	65
  5395  0C4E  065E               	xorwf	isr@rc,w
  5396  0C4F  1D03               	btfss	3,2
  5397  0C50  2C58               	goto	i1l3851
  5398                           
  5399                           ;main.c: 92: TetrisRotate(&game);
  5400  0C51  30CB               	movlw	(low (_game| 0))& (0+255)
  5401  0C52  160A  118A  22A6  120A  158A  	fcall	_TetrisRotate
  5402                           
  5403                           ;main.c: 95: } else if (rc == 'B') {
  5404  0C57  2C75               	goto	i1l3863
  5405  0C58                     i1l3851:
  5406  0C58  3042               	movlw	66
  5407  0C59  065E               	xorwf	isr@rc,w
  5408  0C5A  1D03               	btfss	3,2
  5409  0C5B  2C63               	goto	i1l3855
  5410                           
  5411                           ;main.c: 96: TetrisNext(&game);
  5412  0C5C  30CB               	movlw	(low (_game| 0))& (0+255)
  5413  0C5D  120A  118A  2025  120A  158A  	fcall	_TetrisNext
  5414                           
  5415                           ;main.c: 99: } else if (rc == 'C') {
  5416  0C62  2C75               	goto	i1l3863
  5417  0C63                     i1l3855:
  5418  0C63  3043               	movlw	67
  5419  0C64  065E               	xorwf	isr@rc,w
  5420  0C65  1D03               	btfss	3,2
  5421  0C66  2C6A               	goto	i1l3859
  5422                           
  5423                           ;main.c: 100: TetrisMove(&game, 1);
  5424  0C67  01AE               	clrf	TetrisMove@direction
  5425  0C68  0AAE               	incf	TetrisMove@direction,f
  5426  0C69  2C6F               	goto	L4
  5427  0C6A                     i1l3859:	
  5428                           ;main.c: 103: } else if (rc == 'D') {
  5429                           
  5430  0C6A  3044               	movlw	68
  5431  0C6B  065E               	xorwf	isr@rc,w
  5432  0C6C  1D03               	btfss	3,2
  5433  0C6D  2C75               	goto	i1l3863
  5434                           
  5435                           ;main.c: 104: TetrisMove(&game, 0);
  5436  0C6E  01AE               	clrf	TetrisMove@direction
  5437  0C6F                     L4:
  5438  0C6F  30CB               	movlw	(low (_game| 0))& (0+255)
  5439  0C70  120A  118A  21FD  120A  158A  	fcall	_TetrisMove
  5440  0C75                     i1l3863:
  5441                           
  5442                           ;main.c: 107: };main.c: 108: key[1] = 0;
  5443  0C75  01E0               	clrf	_key+1
  5444  0C76                     i1l3865:
  5445                           
  5446                           ;main.c: 109: key[0] = 0;
  5447  0C76  01DF               	clrf	_key
  5448                           
  5449                           ;main.c: 110: } else {
  5450  0C77  2C98               	goto	i1l454
  5451  0C78                     i1l3867:
  5452                           
  5453                           ;main.c: 111: if (rc == '[') {
  5454  0C78  305B               	movlw	91
  5455  0C79  065E               	xorwf	isr@rc,w
  5456  0C7A  1D03               	btfss	3,2
  5457  0C7B  2C80               	goto	i1l3871
  5458                           
  5459                           ;main.c: 112: key[1] = '[';
  5460  0C7C  305B               	movlw	91
  5461  0C7D  00D8               	movwf	??_isr
  5462  0C7E  0858               	movf	??_isr,w
  5463  0C7F  00E0               	movwf	_key+1
  5464  0C80                     i1l3871:	
  5465                           ;main.c: 113: } else {
  5466                           
  5467                           
  5468                           ;main.c: 115: };main.c: 116: if (rc != '[') {
  5469  0C80  305B               	movlw	91
  5470  0C81  065E               	xorwf	isr@rc,w
  5471  0C82  1D03               	btfss	3,2
  5472  0C83  2C76               	goto	i1l3865
  5473  0C84  2C98               	goto	i1l454
  5474  0C85                     i1l3875:
  5475                           
  5476                           ;main.c: 121: if (rc == 0x1b) {
  5477  0C85  301B               	movlw	27
  5478  0C86  065E               	xorwf	isr@rc,w
  5479  0C87  1D03               	btfss	3,2
  5480  0C88  2C8D               	goto	i1l3879
  5481                           
  5482                           ;main.c: 122: key[0] = 0x1b;
  5483  0C89  301B               	movlw	27
  5484  0C8A  00D8               	movwf	??_isr
  5485  0C8B  0858               	movf	??_isr,w
  5486  0C8C  00DF               	movwf	_key
  5487  0C8D                     i1l3879:
  5488                           
  5489                           ;main.c: 123: };main.c: 129: if (rc == '\r') {
  5490  0C8D  300D               	movlw	13
  5491  0C8E  065E               	xorwf	isr@rc,w
  5492  0C8F  1903               	btfsc	3,2
  5493                           
  5494                           ;main.c: 130: if ((flag & 1) == 0) {
  5495  0C90  1861               	btfsc	_flag,0
  5496  0C91  2C98               	goto	i1l454
  5497                           
  5498                           ;main.c: 131: UIClearGame();
  5499  0C92  160A  118A  24C0  120A  158A  	fcall	i1_UIClearGame
  5500                           
  5501                           ;main.c: 132: flag |= 1;
  5502  0C97  1461               	bsf	_flag,0
  5503  0C98                     i1l454:
  5504  0C98  085D               	movf	??_isr+5,w
  5505  0C99  00FF               	movwf	127
  5506  0C9A  085C               	movf	??_isr+4,w
  5507  0C9B  008A               	movwf	10
  5508  0C9C  085B               	movf	??_isr+3,w
  5509  0C9D  0084               	movwf	4
  5510  0C9E  0E5A               	swapf	??_isr+2,w
  5511  0C9F  0083               	movwf	3
  5512  0CA0  0EFE               	swapf	126,f
  5513  0CA1  0E7E               	swapf	126,w
  5514  0CA2  0009               	retfie
  5515  0CA3                     __end_of_isr:
  5516                           
  5517                           	psect	intentry
  5518  0004                     __pintentry:	
  5519                           ;incstack = 0
  5520 ;; hardware stack exceeded
  5521                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5522                           
  5523  0004                     interrupt_function:
  5524  007E                     saved_w	set	btemp
  5525  0004  00FE               	movwf	btemp
  5526  0005  0E03               	swapf	3,w
  5527  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5528  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5529  0008  00DA               	movwf	??_isr+2
  5530  0009  0804               	movf	4,w
  5531  000A  00DB               	movwf	??_isr+3
  5532  000B  080A               	movf	10,w
  5533  000C  00DC               	movwf	??_isr+4
  5534  000D  087F               	movf	btemp+1,w
  5535  000E  00DD               	movwf	??_isr+5
  5536  000F  120A  158A  2C12   	ljmp	_isr
  5537                           
  5538                           	psect	text32
  5539  14C0                     __ptext32:	
  5540 ;; *************** function i1_UIClearGame *****************
  5541 ;; Defined at:
  5542 ;;		line 69 in file "ui.h"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  i               1    0[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 300/0
  5553 ;;		On exit  : 300/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5556 ;;      Params:         0       0       0       0       0
  5557 ;;      Locals:         0       1       0       0       0
  5558 ;;      Temps:          1       0       0       0       0
  5559 ;;      Totals:         1       1       0       0       0
  5560 ;;Total ram usage:        2 bytes
  5561 ;; Hardware stack levels used: 1
  5562 ;; Hardware stack levels required when called: 3
  5563 ;; This function calls:
  5564 ;;		i1_UartCurMove
  5565 ;;		i1_UartCurSet
  5566 ;;		i1_UartSendString
  5567 ;; This function is called by:
  5568 ;;		_isr
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function i1_UIClearGame
  5574  14C0                     i1_UIClearGame:
  5575                           
  5576                           ;ui.h: 70: UartCurSet(24, 2);
  5577                           
  5578                           ;incstack = 0
  5579 ;; hardware stack exceeded
  5580                           ; Regs used in i1_UIClearGame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5581  14C0  3002               	movlw	2
  5582  14C1  00FD               	movwf	??i1_UIClearGame
  5583  14C2  087D               	movf	??i1_UIClearGame,w
  5584  14C3  00F7               	movwf	i1UartCurSet@y
  5585  14C4  3018               	movlw	24
  5586  14C5  120A  158A  233A  160A  118A  	fcall	i1_UartCurSet
  5587                           
  5588                           ;ui.h: 71: for (uint8_t i = 0; i < 20; i++) {
  5589  14CA  1283               	bcf	3,5	;RP0=0, select bank0
  5590  14CB  01A0               	clrf	i1UIClearGame@i
  5591  14CC                     i1l3817:
  5592                           
  5593                           ;ui.h: 72: UartSendString("                    ");
  5594  14CC  3074               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  5595  14CD  160A  118A  23B9  160A  118A  	fcall	i1_UartSendString
  5596                           
  5597                           ;ui.h: 73: if (i != 19) UartCurMove(-20, 1);
  5598  14D2  3013               	movlw	19
  5599  14D3  1283               	bcf	3,5	;RP0=0, select bank0
  5600  14D4  0620               	xorwf	i1UIClearGame@i,w
  5601  14D5  1903               	btfsc	3,2
  5602  14D6  2CDF               	goto	i1l3823
  5603  14D7  01F9               	clrf	i1UartCurMove@y
  5604  14D8  0AF9               	incf	i1UartCurMove@y,f
  5605  14D9  30EC               	movlw	236
  5606  14DA  120A  158A  25AA  160A  118A  	fcall	i1_UartCurMove
  5607  14DF                     i1l3823:
  5608  14DF  3001               	movlw	1
  5609  14E0  00FD               	movwf	??i1_UIClearGame
  5610  14E1  087D               	movf	??i1_UIClearGame,w
  5611  14E2  1283               	bcf	3,5	;RP0=0, select bank0
  5612  14E3  07A0               	addwf	i1UIClearGame@i,f
  5613  14E4  3014               	movlw	20
  5614  14E5  0220               	subwf	i1UIClearGame@i,w
  5615  14E6  1803               	btfsc	3,0
  5616  14E7  0008               	return
  5617  14E8  2CCC               	goto	i1l3817
  5618  14E9                     __end_ofi1_UIClearGame:
  5619                           
  5620                           	psect	text33
  5621  12A6                     __ptext33:	
  5622 ;; *************** function _TetrisRotate *****************
  5623 ;; Defined at:
  5624 ;;		line 187 in file "tetris.h"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  t               1    wreg     PTR struct Tetris
  5627 ;;		 -> game(32), 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  t               1   14[BANK0 ] PTR struct Tetris
  5630 ;;		 -> game(32), 
  5631 ;;  p               2    0        unsigned int 
  5632 ;;  by              2    0        unsigned int 
  5633 ;;  bx              2    0        unsigned int 
  5634 ;;  p               2    0        unsigned int 
  5635 ;;  by              2    0        unsigned int 
  5636 ;;  bx              2    0        unsigned int 
  5637 ;;  p               2    0        unsigned int 
  5638 ;;  by              2    0        unsigned int 
  5639 ;;  bx              2    0        unsigned int 
  5640 ;;  i               1    0        unsigned char 
  5641 ;;  p               2    0        unsigned int 
  5642 ;;  by              2    0        unsigned int 
  5643 ;;  bx              2    0        unsigned int 
  5644 ;;  dx              1    0        unsigned char 
  5645 ;;  shapeRotate     1    0        unsigned char 
  5646 ;;  flag            1    0        unsigned char 
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  1    wreg      void 
  5649 ;; Registers used:
  5650 ;;		wreg
  5651 ;; Tracked objects:
  5652 ;;		On entry : 300/0
  5653 ;;		On exit  : 300/0
  5654 ;;		Unchanged: 300/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5656 ;;      Params:         0       0       0       0       0
  5657 ;;      Locals:         0       1       0       0       0
  5658 ;;      Temps:          0       0       0       0       0
  5659 ;;      Totals:         0       1       0       0       0
  5660 ;;Total ram usage:        1 bytes
  5661 ;; Hardware stack levels used: 1
  5662 ;; Hardware stack levels required when called: 5
  5663 ;; This function calls:
  5664 ;;		__clrBlock
  5665 ;;		__setBlock
  5666 ;;		__wipeShape
  5667 ;;		i1__getBlock
  5668 ;; This function is called by:
  5669 ;;		_isr
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           
  5674                           ;psect for function _TetrisRotate
  5675  12A6                     _TetrisRotate:
  5676                           
  5677                           ;tetris.h: 188: return;
  5678                           
  5679                           ;incstack = 0
  5680 ;; hardware stack exceeded
  5681                           ; Regs used in _TetrisRotate: [wreg]
  5682  12A6  0008               	return
  5683  12A7                     __end_of_TetrisRotate:
  5684                           
  5685                           	psect	text34
  5686  0025                     __ptext34:	
  5687 ;; *************** function _TetrisNext *****************
  5688 ;; Defined at:
  5689 ;;		line 213 in file "tetris.h"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  t               1    wreg     PTR struct Tetris
  5692 ;;		 -> game(32), 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  t               1   55[BANK0 ] PTR struct Tetris
  5695 ;;		 -> game(32), 
  5696 ;;  j               1   52[BANK0 ] unsigned char 
  5697 ;;  p               2   48[BANK0 ] unsigned int 
  5698 ;;  by              2   40[BANK0 ] unsigned int 
  5699 ;;  bx              2    0        unsigned int 
  5700 ;;  i               1   51[BANK0 ] unsigned char 
  5701 ;;  p               2   46[BANK0 ] unsigned int 
  5702 ;;  by              2   38[BANK0 ] unsigned int 
  5703 ;;  bx              2   36[BANK0 ] unsigned int 
  5704 ;;  p               2   53[BANK0 ] unsigned int 
  5705 ;;  by              2   42[BANK0 ] unsigned int 
  5706 ;;  bx              2   34[BANK0 ] unsigned int 
  5707 ;;  p               2   44[BANK0 ] unsigned int 
  5708 ;;  by              2   32[BANK0 ] unsigned int 
  5709 ;;  bx              2   30[BANK0 ] unsigned int 
  5710 ;;  y               1   50[BANK0 ] unsigned char 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 300/0
  5717 ;;		On exit  : 300/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5720 ;;      Params:         0       0       0       0       0
  5721 ;;      Locals:         0      26       0       0       0
  5722 ;;      Temps:          0       4       0       0       0
  5723 ;;      Totals:         0      30       0       0       0
  5724 ;;Total ram usage:       30 bytes
  5725 ;; Hardware stack levels used: 1
  5726 ;; Hardware stack levels required when called: 5
  5727 ;; This function calls:
  5728 ;;		__clrBlock
  5729 ;;		__setBlock
  5730 ;;		__wipeShape
  5731 ;;		i1_UartCurMove
  5732 ;;		i1_UartCurSet
  5733 ;;		i1_UartSendChar
  5734 ;;		i1__drawShape
  5735 ;;		i1__getBlock
  5736 ;;		i1__shapeNext
  5737 ;; This function is called by:
  5738 ;;		_isr
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function _TetrisNext
  5744  0025                     _TetrisNext:
  5745                           
  5746                           ;incstack = 0
  5747 ;; hardware stack exceeded
  5748                           ; Regs used in _TetrisNext: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5749                           ;TetrisNext@t stored from wreg
  5750  0025  00D7               	movwf	TetrisNext@t
  5751                           
  5752                           ;tetris.h: 214: uint8_t y = t->y + 1;
  5753  0026  0857               	movf	TetrisNext@t,w
  5754  0027  3E1C               	addlw	28
  5755  0028  0084               	movwf	4
  5756  0029  1383               	bcf	3,7	;select IRP bank0
  5757  002A  0800               	movf	0,w
  5758  002B  3E01               	addlw	1
  5759  002C  00BA               	movwf	??_TetrisNext
  5760  002D  083A               	movf	??_TetrisNext,w
  5761  002E  00D2               	movwf	TetrisNext@y
  5762                           
  5763                           ;tetris.h: 215: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(t->x+p%4),by=(uint8_t
      +                          )(t->y+p/4%4),p;p>>=4) _clrBlock(t, bx, by);
  5764  002F  0857               	movf	TetrisNext@t,w
  5765  0030  3E19               	addlw	25
  5766  0031  0084               	movwf	4
  5767  0032  0800               	movf	0,w
  5768  0033  00BA               	movwf	??_TetrisNext
  5769  0034  073A               	addwf	??_TetrisNext,w
  5770  0035  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  5771  0036  0084               	movwf	4
  5772  0037  120A  158A  2000  120A  118A  	fcall	stringdir
  5773  003C  00CC               	movwf	TetrisNext@p
  5774  003D  120A  158A  2000  120A  118A  	fcall	stringdir
  5775  0042  00CD               	movwf	TetrisNext@p+1
  5776  0043                     i1l3713:
  5777  0043  3003               	movlw	3
  5778  0044  054C               	andwf	TetrisNext@p,w
  5779  0045  00BA               	movwf	??_TetrisNext
  5780  0046  0857               	movf	TetrisNext@t,w
  5781  0047  3E1B               	addlw	27
  5782  0048  0084               	movwf	4
  5783  0049  1383               	bcf	3,7	;select IRP bank0
  5784  004A  0800               	movf	0,w
  5785  004B  073A               	addwf	??_TetrisNext,w
  5786  004C  00BB               	movwf	??_TetrisNext+1
  5787  004D  01BC               	clrf	??_TetrisNext+2
  5788  004E  083B               	movf	??_TetrisNext+1,w
  5789  004F  00BE               	movwf	TetrisNext@bx
  5790  0050  083C               	movf	??_TetrisNext+2,w
  5791  0051  00BF               	movwf	TetrisNext@bx+1
  5792  0052  084C               	movf	TetrisNext@p,w
  5793  0053  00BA               	movwf	??_TetrisNext
  5794  0054  3002               	movlw	2
  5795  0055                     u512_25:
  5796  0055  1003               	clrc
  5797  0056  0CBA               	rrf	??_TetrisNext,f
  5798  0057  3EFF               	addlw	-1
  5799  0058  1D03               	skipz
  5800  0059  2855               	goto	u512_25
  5801  005A  3003               	movlw	3
  5802  005B  053A               	andwf	??_TetrisNext,w
  5803  005C  00BB               	movwf	??_TetrisNext+1
  5804  005D  0857               	movf	TetrisNext@t,w
  5805  005E  3E1C               	addlw	28
  5806  005F  0084               	movwf	4
  5807  0060  0800               	movf	0,w
  5808  0061  073B               	addwf	??_TetrisNext+1,w
  5809  0062  00BC               	movwf	??_TetrisNext+2
  5810  0063  01BD               	clrf	??_TetrisNext+3
  5811  0064  083C               	movf	??_TetrisNext+2,w
  5812  0065  00C0               	movwf	TetrisNext@by
  5813  0066  083D               	movf	??_TetrisNext+3,w
  5814  0067  00C1               	movwf	TetrisNext@by+1
  5815  0068  084C               	movf	TetrisNext@p,w
  5816  0069  044D               	iorwf	TetrisNext@p+1,w
  5817  006A  1903               	btfsc	3,2
  5818  006B  2882               	goto	i1l3719
  5819  006C  083E               	movf	TetrisNext@bx,w
  5820  006D  00BA               	movwf	??_TetrisNext
  5821  006E  083A               	movf	??_TetrisNext,w
  5822  006F  00F4               	movwf	__clrBlock@x
  5823  0070  0840               	movf	TetrisNext@by,w
  5824  0071  00BB               	movwf	??_TetrisNext+1
  5825  0072  083B               	movf	??_TetrisNext+1,w
  5826  0073  00F5               	movwf	__clrBlock@y
  5827  0074  0857               	movf	TetrisNext@t,w
  5828  0075  160A  118A  260A  120A  118A  	fcall	__clrBlock
  5829  007A  3004               	movlw	4
  5830  007B                     u511_25:
  5831  007B  1003               	clrc
  5832  007C  0CCD               	rrf	TetrisNext@p+1,f
  5833  007D  0CCC               	rrf	TetrisNext@p,f
  5834  007E  3EFF               	addlw	-1
  5835  007F  1D03               	skipz
  5836  0080  287B               	goto	u511_25
  5837  0081  2843               	goto	i1l3713
  5838  0082                     i1l3719:
  5839                           
  5840                           ;tetris.h: 216: UartCurSet(12, 1);
  5841  0082  01F7               	clrf	i1UartCurSet@y
  5842  0083  0AF7               	incf	i1UartCurSet@y,f
  5843  0084  300C               	movlw	12
  5844  0085  120A  158A  233A  120A  118A  	fcall	i1_UartCurSet
  5845                           
  5846                           ;tetris.h: 218: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(t->x+p%4),by=(uint8_t
      +                          )(y+p/4%4),p;p>>=4) {
  5847  008A  1283               	bcf	3,5	;RP0=0, select bank0
  5848  008B  0857               	movf	TetrisNext@t,w
  5849  008C  3E19               	addlw	25
  5850  008D  0084               	movwf	4
  5851  008E  1383               	bcf	3,7	;select IRP bank0
  5852  008F  0800               	movf	0,w
  5853  0090  00BA               	movwf	??_TetrisNext
  5854  0091  073A               	addwf	??_TetrisNext,w
  5855  0092  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  5856  0093  0084               	movwf	4
  5857  0094  120A  158A  2000  120A  118A  	fcall	stringdir
  5858  0099  00D5               	movwf	TetrisNext@p_372
  5859  009A  120A  158A  2000  120A  118A  	fcall	stringdir
  5860  009F  00D6               	movwf	TetrisNext@p_372+1
  5861  00A0                     i1l3737:
  5862  00A0  3003               	movlw	3
  5863  00A1  0555               	andwf	TetrisNext@p_372,w
  5864  00A2  00BA               	movwf	??_TetrisNext
  5865  00A3  0857               	movf	TetrisNext@t,w
  5866  00A4  3E1B               	addlw	27
  5867  00A5  0084               	movwf	4
  5868  00A6  1383               	bcf	3,7	;select IRP bank0
  5869  00A7  0800               	movf	0,w
  5870  00A8  073A               	addwf	??_TetrisNext,w
  5871  00A9  00BB               	movwf	??_TetrisNext+1
  5872  00AA  01BC               	clrf	??_TetrisNext+2
  5873  00AB  083B               	movf	??_TetrisNext+1,w
  5874  00AC  00C2               	movwf	TetrisNext@bx_373
  5875  00AD  083C               	movf	??_TetrisNext+2,w
  5876  00AE  00C3               	movwf	TetrisNext@bx_373+1
  5877  00AF  0855               	movf	TetrisNext@p_372,w
  5878  00B0  00BA               	movwf	??_TetrisNext
  5879  00B1  3002               	movlw	2
  5880  00B2                     u518_25:
  5881  00B2  1003               	clrc
  5882  00B3  0CBA               	rrf	??_TetrisNext,f
  5883  00B4  3EFF               	addlw	-1
  5884  00B5  1D03               	skipz
  5885  00B6  28B2               	goto	u518_25
  5886  00B7  3003               	movlw	3
  5887  00B8  053A               	andwf	??_TetrisNext,w
  5888  00B9  00BB               	movwf	??_TetrisNext+1
  5889  00BA  0852               	movf	TetrisNext@y,w
  5890  00BB  073B               	addwf	??_TetrisNext+1,w
  5891  00BC  00BC               	movwf	??_TetrisNext+2
  5892  00BD  01BD               	clrf	??_TetrisNext+3
  5893  00BE  083C               	movf	??_TetrisNext+2,w
  5894  00BF  00CA               	movwf	TetrisNext@by_374
  5895  00C0  083D               	movf	??_TetrisNext+3,w
  5896  00C1  00CB               	movwf	TetrisNext@by_374+1
  5897  00C2  0855               	movf	TetrisNext@p_372,w
  5898  00C3  0456               	iorwf	TetrisNext@p_372+1,w
  5899  00C4  1903               	btfsc	3,2
  5900  00C5  28F3               	goto	i1l3739
  5901                           
  5902                           ;tetris.h: 219: if (by == 20) break;
  5903  00C6  3014               	movlw	20
  5904  00C7  064A               	xorwf	TetrisNext@by_374,w
  5905  00C8  044B               	iorwf	TetrisNext@by_374+1,w
  5906  00C9  1903               	btfsc	3,2
  5907  00CA  28F3               	goto	i1l3739
  5908                           
  5909                           ;tetris.h: 220: if (_getBlock(t, bx, by)) break;
  5910  00CB  0842               	movf	TetrisNext@bx_373,w
  5911  00CC  00BA               	movwf	??_TetrisNext
  5912  00CD  083A               	movf	??_TetrisNext,w
  5913  00CE  00F4               	movwf	i1__getBlock@x
  5914  00CF  084A               	movf	TetrisNext@by_374,w
  5915  00D0  00BB               	movwf	??_TetrisNext+1
  5916  00D1  083B               	movf	??_TetrisNext+1,w
  5917  00D2  00F5               	movwf	i1__getBlock@y
  5918  00D3  0857               	movf	TetrisNext@t,w
  5919  00D4  160A  118A  25A0  120A  118A  	fcall	i1__getBlock
  5920  00D9  3A00               	xorlw	0
  5921  00DA  1D03               	btfss	3,2
  5922  00DB  28F3               	goto	i1l3739
  5923                           
  5924                           ;tetris.h: 221: if (p < 16) t->y = y;
  5925  00DC  3000               	movlw	0
  5926  00DD  0256               	subwf	TetrisNext@p_372+1,w
  5927  00DE  3010               	movlw	16
  5928  00DF  1903               	skipnz
  5929  00E0  0255               	subwf	TetrisNext@p_372,w
  5930  00E1  1803               	skipnc
  5931  00E2  28EB               	goto	i1l3735
  5932  00E3  0852               	movf	TetrisNext@y,w
  5933  00E4  00BA               	movwf	??_TetrisNext
  5934  00E5  0857               	movf	TetrisNext@t,w
  5935  00E6  3E1C               	addlw	28
  5936  00E7  0084               	movwf	4
  5937  00E8  083A               	movf	??_TetrisNext,w
  5938  00E9  1383               	bcf	3,7	;select IRP bank0
  5939  00EA  0080               	movwf	0
  5940  00EB                     i1l3735:
  5941  00EB  3004               	movlw	4
  5942  00EC                     u517_25:
  5943  00EC  1003               	clrc
  5944  00ED  0CD6               	rrf	TetrisNext@p_372+1,f
  5945  00EE  0CD5               	rrf	TetrisNext@p_372,f
  5946  00EF  3EFF               	addlw	-1
  5947  00F0  1D03               	skipz
  5948  00F1  28EC               	goto	u517_25
  5949  00F2  28A0               	goto	i1l3737
  5950  00F3                     i1l3739:
  5951                           
  5952                           ;tetris.h: 222: };tetris.h: 223: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(t->x
      +                          +p%4),by=(uint8_t)(t->y+p/4%4),p;p>>=4) _setBlock(t, bx, by);
  5953  00F3  0857               	movf	TetrisNext@t,w
  5954  00F4  3E19               	addlw	25
  5955  00F5  0084               	movwf	4
  5956  00F6  1383               	bcf	3,7	;select IRP bank0
  5957  00F7  0800               	movf	0,w
  5958  00F8  00BA               	movwf	??_TetrisNext
  5959  00F9  073A               	addwf	??_TetrisNext,w
  5960  00FA  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  5961  00FB  0084               	movwf	4
  5962  00FC  120A  158A  2000  120A  118A  	fcall	stringdir
  5963  0101  00CE               	movwf	TetrisNext@p_375
  5964  0102  120A  158A  2000  120A  118A  	fcall	stringdir
  5965  0107  00CF               	movwf	TetrisNext@p_375+1
  5966  0108                     i1l3745:
  5967  0108  3003               	movlw	3
  5968  0109  054E               	andwf	TetrisNext@p_375,w
  5969  010A  00BA               	movwf	??_TetrisNext
  5970  010B  0857               	movf	TetrisNext@t,w
  5971  010C  3E1B               	addlw	27
  5972  010D  0084               	movwf	4
  5973  010E  1383               	bcf	3,7	;select IRP bank0
  5974  010F  0800               	movf	0,w
  5975  0110  073A               	addwf	??_TetrisNext,w
  5976  0111  00BB               	movwf	??_TetrisNext+1
  5977  0112  01BC               	clrf	??_TetrisNext+2
  5978  0113  083B               	movf	??_TetrisNext+1,w
  5979  0114  00C4               	movwf	TetrisNext@bx_376
  5980  0115  083C               	movf	??_TetrisNext+2,w
  5981  0116  00C5               	movwf	TetrisNext@bx_376+1
  5982  0117  084E               	movf	TetrisNext@p_375,w
  5983  0118  00BA               	movwf	??_TetrisNext
  5984  0119  3002               	movlw	2
  5985  011A                     u521_25:
  5986  011A  1003               	clrc
  5987  011B  0CBA               	rrf	??_TetrisNext,f
  5988  011C  3EFF               	addlw	-1
  5989  011D  1D03               	skipz
  5990  011E  291A               	goto	u521_25
  5991  011F  3003               	movlw	3
  5992  0120  053A               	andwf	??_TetrisNext,w
  5993  0121  00BB               	movwf	??_TetrisNext+1
  5994  0122  0857               	movf	TetrisNext@t,w
  5995  0123  3E1C               	addlw	28
  5996  0124  0084               	movwf	4
  5997  0125  0800               	movf	0,w
  5998  0126  073B               	addwf	??_TetrisNext+1,w
  5999  0127  00BC               	movwf	??_TetrisNext+2
  6000  0128  01BD               	clrf	??_TetrisNext+3
  6001  0129  083C               	movf	??_TetrisNext+2,w
  6002  012A  00C6               	movwf	TetrisNext@by_377
  6003  012B  083D               	movf	??_TetrisNext+3,w
  6004  012C  00C7               	movwf	TetrisNext@by_377+1
  6005  012D  084E               	movf	TetrisNext@p_375,w
  6006  012E  044F               	iorwf	TetrisNext@p_375+1,w
  6007  012F  1903               	btfsc	3,2
  6008  0130  2947               	goto	i1l3751
  6009  0131  0844               	movf	TetrisNext@bx_376,w
  6010  0132  00BA               	movwf	??_TetrisNext
  6011  0133  083A               	movf	??_TetrisNext,w
  6012  0134  00F4               	movwf	__setBlock@x
  6013  0135  0846               	movf	TetrisNext@by_377,w
  6014  0136  00BB               	movwf	??_TetrisNext+1
  6015  0137  083B               	movf	??_TetrisNext+1,w
  6016  0138  00F5               	movwf	__setBlock@y
  6017  0139  0857               	movf	TetrisNext@t,w
  6018  013A  160A  118A  256B  120A  118A  	fcall	__setBlock
  6019  013F  3004               	movlw	4
  6020  0140                     u520_25:
  6021  0140  1003               	clrc
  6022  0141  0CCF               	rrf	TetrisNext@p_375+1,f
  6023  0142  0CCE               	rrf	TetrisNext@p_375,f
  6024  0143  3EFF               	addlw	-1
  6025  0144  1D03               	skipz
  6026  0145  2940               	goto	u520_25
  6027  0146  2908               	goto	i1l3745
  6028  0147                     i1l3751:
  6029                           
  6030                           ;tetris.h: 224: if (t->y != y) {
  6031  0147  0857               	movf	TetrisNext@t,w
  6032  0148  3E1C               	addlw	28
  6033  0149  0084               	movwf	4
  6034  014A  0800               	movf	0,w
  6035  014B  0652               	xorwf	TetrisNext@y,w
  6036  014C  1903               	skipnz
  6037  014D  298B               	goto	i1l3767
  6038                           
  6039                           ;tetris.h: 226: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(t->x+p%4),by=(uint8_t
      +                          )(t->y+p/4%4),p;p>>=4) {
  6040  014E  0857               	movf	TetrisNext@t,w
  6041  014F  3E19               	addlw	25
  6042  0150  0084               	movwf	4
  6043  0151  0800               	movf	0,w
  6044  0152  00BA               	movwf	??_TetrisNext
  6045  0153  073A               	addwf	??_TetrisNext,w
  6046  0154  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  6047  0155  0084               	movwf	4
  6048  0156  120A  158A  2000  120A  118A  	fcall	stringdir
  6049  015B  00D0               	movwf	TetrisNext@p_378
  6050  015C  120A  158A  2000  120A  118A  	fcall	stringdir
  6051  0161  00D1               	movwf	TetrisNext@p_378+1
  6052  0162                     i1l3761:
  6053  0162  0850               	movf	TetrisNext@p_378,w
  6054  0163  00BA               	movwf	??_TetrisNext
  6055  0164  3002               	movlw	2
  6056  0165                     u526_25:
  6057  0165  1003               	clrc
  6058  0166  0CBA               	rrf	??_TetrisNext,f
  6059  0167  3EFF               	addlw	-1
  6060  0168  1D03               	skipz
  6061  0169  2965               	goto	u526_25
  6062  016A  3003               	movlw	3
  6063  016B  053A               	andwf	??_TetrisNext,w
  6064  016C  00BB               	movwf	??_TetrisNext+1
  6065  016D  0857               	movf	TetrisNext@t,w
  6066  016E  3E1C               	addlw	28
  6067  016F  0084               	movwf	4
  6068  0170  0800               	movf	0,w
  6069  0171  073B               	addwf	??_TetrisNext+1,w
  6070  0172  00BC               	movwf	??_TetrisNext+2
  6071  0173  01BD               	clrf	??_TetrisNext+3
  6072  0174  083C               	movf	??_TetrisNext+2,w
  6073  0175  00C8               	movwf	TetrisNext@by_380
  6074  0176  083D               	movf	??_TetrisNext+3,w
  6075  0177  00C9               	movwf	TetrisNext@by_380+1
  6076  0178  0850               	movf	TetrisNext@p_378,w
  6077  0179  0451               	iorwf	TetrisNext@p_378+1,w
  6078  017A  1903               	btfsc	3,2
  6079  017B  2986               	goto	i1l3763
  6080                           
  6081                           ;tetris.h: 227: if ((int8_t) by < 0) {
  6082  017C  1BC8               	btfsc	TetrisNext@by_380,7
  6083  017D  0008               	return
  6084  017E  3004               	movlw	4
  6085  017F                     u525_25:
  6086  017F  1003               	clrc
  6087  0180  0CD1               	rrf	TetrisNext@p_378+1,f
  6088  0181  0CD0               	rrf	TetrisNext@p_378,f
  6089  0182  3EFF               	addlw	-1
  6090  0183  1D03               	skipz
  6091  0184  297F               	goto	u525_25
  6092  0185  2962               	goto	i1l3761
  6093  0186                     i1l3763:
  6094                           
  6095                           ;tetris.h: 230: };tetris.h: 231: };tetris.h: 232: _shapeNext(t);
  6096  0186  0857               	movf	TetrisNext@t,w
  6097  0187  120A  118A  23A6   	fcall	i1__shapeNext
  6098  018A  0008               	return
  6099  018B                     i1l3767:
  6100                           
  6101                           ;tetris.h: 234: };;tetris.h: 235: _wipeShape(t, t->shape, t->x, t->y - 1);
  6102  018B  0857               	movf	TetrisNext@t,w
  6103  018C  3E19               	addlw	25
  6104  018D  0084               	movwf	4
  6105  018E  0800               	movf	0,w
  6106  018F  00BA               	movwf	??_TetrisNext
  6107  0190  083A               	movf	??_TetrisNext,w
  6108  0191  00A0               	movwf	__wipeShape@shape
  6109  0192  0857               	movf	TetrisNext@t,w
  6110  0193  3E1B               	addlw	27
  6111  0194  0084               	movwf	4
  6112  0195  0800               	movf	0,w
  6113  0196  00BB               	movwf	??_TetrisNext+1
  6114  0197  083B               	movf	??_TetrisNext+1,w
  6115  0198  00A1               	movwf	__wipeShape@x
  6116  0199  0857               	movf	TetrisNext@t,w
  6117  019A  3E1C               	addlw	28
  6118  019B  0084               	movwf	4
  6119  019C  0800               	movf	0,w
  6120  019D  3EFF               	addlw	255
  6121  019E  00BC               	movwf	??_TetrisNext+2
  6122  019F  083C               	movf	??_TetrisNext+2,w
  6123  01A0  00A2               	movwf	__wipeShape@y
  6124  01A1  0857               	movf	TetrisNext@t,w
  6125  01A2  120A  158A  219E  120A  118A  	fcall	__wipeShape
  6126                           
  6127                           ;tetris.h: 236: _drawShape(t, t->shape, t->x, t->y);
  6128  01A7  0857               	movf	TetrisNext@t,w
  6129  01A8  3E19               	addlw	25
  6130  01A9  0084               	movwf	4
  6131  01AA  1383               	bcf	3,7	;select IRP bank0
  6132  01AB  0800               	movf	0,w
  6133  01AC  00BA               	movwf	??_TetrisNext
  6134  01AD  083A               	movf	??_TetrisNext,w
  6135  01AE  00A0               	movwf	i1__drawShape@shape
  6136  01AF  0857               	movf	TetrisNext@t,w
  6137  01B0  3E1B               	addlw	27
  6138  01B1  0084               	movwf	4
  6139  01B2  0800               	movf	0,w
  6140  01B3  00BB               	movwf	??_TetrisNext+1
  6141  01B4  083B               	movf	??_TetrisNext+1,w
  6142  01B5  00A1               	movwf	i1__drawShape@x
  6143  01B6  0857               	movf	TetrisNext@t,w
  6144  01B7  3E1C               	addlw	28
  6145  01B8  0084               	movwf	4
  6146  01B9  0800               	movf	0,w
  6147  01BA  00BC               	movwf	??_TetrisNext+2
  6148  01BB  083C               	movf	??_TetrisNext+2,w
  6149  01BC  00A2               	movwf	i1__drawShape@y
  6150  01BD  0857               	movf	TetrisNext@t,w
  6151  01BE  120A  158A  2204  120A  118A  	fcall	i1__drawShape
  6152                           
  6153                           ;tetris.h: 237: UartCurSet(1, 1);
  6154  01C3  01F7               	clrf	i1UartCurSet@y
  6155  01C4  0AF7               	incf	i1UartCurSet@y,f
  6156  01C5  3001               	movlw	1
  6157  01C6  120A  158A  233A  120A  118A  	fcall	i1_UartCurSet
  6158                           
  6159                           ;tetris.h: 238: for (uint8_t i = 0; i < 20; i++) {
  6160  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  6161  01CC  01D3               	clrf	TetrisNext@i
  6162  01CD                     i1l3775:
  6163                           
  6164                           ;tetris.h: 239: for (uint8_t j = 0; j < 10; j++) {
  6165  01CD  01D4               	clrf	TetrisNext@j
  6166  01CE                     i1l3781:
  6167                           
  6168                           ;tetris.h: 240: UartSendChar(_getBlock(t, j, i) + '0');
  6169  01CE  0854               	movf	TetrisNext@j,w
  6170  01CF  00BA               	movwf	??_TetrisNext
  6171  01D0  083A               	movf	??_TetrisNext,w
  6172  01D1  00F4               	movwf	i1__getBlock@x
  6173  01D2  0853               	movf	TetrisNext@i,w
  6174  01D3  00BB               	movwf	??_TetrisNext+1
  6175  01D4  083B               	movf	??_TetrisNext+1,w
  6176  01D5  00F5               	movwf	i1__getBlock@y
  6177  01D6  0857               	movf	TetrisNext@t,w
  6178  01D7  160A  118A  25A0  120A  118A  	fcall	i1__getBlock
  6179  01DC  3E30               	addlw	48
  6180  01DD  160A  118A  22C1  120A  118A  	fcall	i1_UartSendChar
  6181  01E2  3001               	movlw	1
  6182  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  6183  01E4  00BA               	movwf	??_TetrisNext
  6184  01E5  083A               	movf	??_TetrisNext,w
  6185  01E6  07D4               	addwf	TetrisNext@j,f
  6186  01E7  300A               	movlw	10
  6187  01E8  0254               	subwf	TetrisNext@j,w
  6188  01E9  1C03               	skipc
  6189  01EA  29CE               	goto	i1l3781
  6190                           
  6191                           ;tetris.h: 241: };tetris.h: 242: UartCurMove(-10, 1);
  6192  01EB  01F9               	clrf	i1UartCurMove@y
  6193  01EC  0AF9               	incf	i1UartCurMove@y,f
  6194  01ED  30F6               	movlw	246
  6195  01EE  120A  158A  25AA  120A  118A  	fcall	i1_UartCurMove
  6196  01F3  3001               	movlw	1
  6197  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  6198  01F5  00BA               	movwf	??_TetrisNext
  6199  01F6  083A               	movf	??_TetrisNext,w
  6200  01F7  07D3               	addwf	TetrisNext@i,f
  6201  01F8  3014               	movlw	20
  6202  01F9  0253               	subwf	TetrisNext@i,w
  6203  01FA  1803               	btfsc	3,0
  6204  01FB  0008               	return
  6205  01FC  29CD               	goto	i1l3775
  6206  01FD                     __end_of_TetrisNext:
  6207                           
  6208                           	psect	text35
  6209  03A6                     __ptext35:	
  6210 ;; *************** function i1__shapeNext *****************
  6211 ;; Defined at:
  6212 ;;		line 140 in file "tetris.h"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  t               1    wreg     PTR struct Tetris
  6215 ;;		 -> game(32), 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  t               1   25[BANK0 ] PTR struct Tetris
  6218 ;;		 -> game(32), 
  6219 ;;  p               2   23[BANK0 ] unsigned int 
  6220 ;;  p               2   21[BANK0 ] unsigned int 
  6221 ;;  p               2   19[BANK0 ] unsigned int 
  6222 ;;  p               2   17[BANK0 ] unsigned int 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  1    wreg      void 
  6225 ;; Registers used:
  6226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : B00/0
  6229 ;;		On exit  : 300/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6232 ;;      Params:         0       0       0       0       0
  6233 ;;      Locals:         0       9       0       0       0
  6234 ;;      Temps:          0       3       0       0       0
  6235 ;;      Totals:         0      12       0       0       0
  6236 ;;Total ram usage:       12 bytes
  6237 ;; Hardware stack levels used: 1
  6238 ;; Hardware stack levels required when called: 4
  6239 ;; This function calls:
  6240 ;;		i1__drawBlock
  6241 ;;		i1__randShape
  6242 ;;		i1__wipeBlock
  6243 ;; This function is called by:
  6244 ;;		_TetrisNext
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           
  6249                           ;psect for function i1__shapeNext
  6250  03A6                     i1__shapeNext:
  6251                           
  6252                           ;incstack = 0
  6253 ;; hardware stack exceeded
  6254                           ; Regs used in i1__shapeNext: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6255                           ;i1__shapeNext@t stored from wreg
  6256  03A6  00B9               	movwf	i1__shapeNext@t
  6257                           
  6258                           ;tetris.h: 141: t->shape = t->shapeNext;
  6259  03A7  0839               	movf	i1__shapeNext@t,w
  6260  03A8  3E1A               	addlw	26
  6261  03A9  0084               	movwf	4
  6262  03AA  0800               	movf	0,w
  6263  03AB  00AE               	movwf	??i1__shapeNext
  6264  03AC  0839               	movf	i1__shapeNext@t,w
  6265  03AD  3E19               	addlw	25
  6266  03AE  0084               	movwf	4
  6267  03AF  082E               	movf	??i1__shapeNext,w
  6268  03B0  0080               	movwf	0
  6269                           
  6270                           ;tetris.h: 142: t->x = 3;
  6271  03B1  3003               	movlw	3
  6272  03B2  00AE               	movwf	??i1__shapeNext
  6273  03B3  0839               	movf	i1__shapeNext@t,w
  6274  03B4  3E1B               	addlw	27
  6275  03B5  0084               	movwf	4
  6276  03B6  082E               	movf	??i1__shapeNext,w
  6277  03B7  0080               	movwf	0
  6278                           
  6279                           ;tetris.h: 146: if (t->shape % 4 == 0 && t->shape != 24) t->y = -2;
  6280  03B8  0839               	movf	i1__shapeNext@t,w
  6281  03B9  3E19               	addlw	25
  6282  03BA  0084               	movwf	4
  6283  03BB  0800               	movf	0,w
  6284  03BC  3903               	andlw	3
  6285  03BD  1D03               	btfss	3,2
  6286  03BE  2BC8               	goto	i1l3163
  6287  03BF  0839               	movf	i1__shapeNext@t,w
  6288  03C0  3E19               	addlw	25
  6289  03C1  0084               	movwf	4
  6290  03C2  3018               	movlw	24
  6291  03C3  0600               	xorwf	0,w
  6292  03C4  1903               	btfsc	3,2
  6293  03C5  2BC8               	goto	i1l3163
  6294  03C6  30FE               	movlw	254
  6295  03C7  2BD8               	goto	L5
  6296  03C8                     i1l3163:
  6297                           
  6298                           ;tetris.h: 147: else if (t->shape == 1 || t->shape == 3) t->y = -4;
  6299  03C8  0839               	movf	i1__shapeNext@t,w
  6300  03C9  3E19               	addlw	25
  6301  03CA  0084               	movwf	4
  6302  03CB  0300               	decf	0,w
  6303  03CC  1903               	btfsc	3,2
  6304  03CD  2BD5               	goto	i1l3167
  6305  03CE  0839               	movf	i1__shapeNext@t,w
  6306  03CF  3E19               	addlw	25
  6307  03D0  0084               	movwf	4
  6308  03D1  3003               	movlw	3
  6309  03D2  0600               	xorwf	0,w
  6310  03D3  1D03               	btfss	3,2
  6311  03D4  2BD7               	goto	i1l3169
  6312  03D5                     i1l3167:
  6313  03D5  30FC               	movlw	252
  6314  03D6  2BD8               	goto	L5
  6315  03D7                     i1l3169:
  6316                           
  6317                           ;tetris.h: 148: else t->y = -3;
  6318  03D7  30FD               	movlw	253
  6319  03D8                     L5:
  6320  03D8  00AE               	movwf	??i1__shapeNext
  6321  03D9  0839               	movf	i1__shapeNext@t,w
  6322  03DA  3E1C               	addlw	28
  6323  03DB  0084               	movwf	4
  6324  03DC  082E               	movf	??i1__shapeNext,w
  6325  03DD  0080               	movwf	0
  6326                           
  6327                           ;tetris.h: 149: t->shapeNext = _randShape(t->randset);
  6328  03DE  0839               	movf	i1__shapeNext@t,w
  6329  03DF  3E1F               	addlw	31
  6330  03E0  0084               	movwf	4
  6331  03E1  0800               	movf	0,w
  6332  03E2  120A  158A  22D0  120A  118A  	fcall	i1__randShape
  6333  03E7  00AE               	movwf	??i1__shapeNext
  6334  03E8  0839               	movf	i1__shapeNext@t,w
  6335  03E9  3E1A               	addlw	26
  6336  03EA  0084               	movwf	4
  6337  03EB  082E               	movf	??i1__shapeNext,w
  6338  03EC  1383               	bcf	3,7	;select IRP bank0
  6339  03ED  0080               	movwf	0
  6340                           
  6341                           ;tetris.h: 150: for (uint16_t p = table[t->shape]; p; p >>= 4) t->nextMap &= ~(1 << (p &
      +                           15));
  6342  03EE  0839               	movf	i1__shapeNext@t,w
  6343  03EF  3E19               	addlw	25
  6344  03F0  0084               	movwf	4
  6345  03F1  0800               	movf	0,w
  6346  03F2  00AE               	movwf	??i1__shapeNext
  6347  03F3  072E               	addwf	??i1__shapeNext,w
  6348  03F4  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  6349  03F5  0084               	movwf	4
  6350  03F6  120A  158A  2000  120A  118A  	fcall	stringdir
  6351  03FB  00B1               	movwf	i1__shapeNext@p
  6352  03FC  120A  158A  2000  120A  118A  	fcall	stringdir
  6353  0401  00B2               	movwf	i1__shapeNext@p+1
  6354  0402                     i1l3179:
  6355  0402  0831               	movf	i1__shapeNext@p,w
  6356  0403  0432               	iorwf	i1__shapeNext@p+1,w
  6357  0404  1903               	btfsc	3,2
  6358  0405  2C26               	goto	i1l3181
  6359  0406  0831               	movf	i1__shapeNext@p,w
  6360  0407  390F               	andlw	15
  6361  0408  00AE               	movwf	??i1__shapeNext
  6362  0409  0AAE               	incf	??i1__shapeNext,f
  6363  040A  3001               	movlw	1
  6364  040B  00AF               	movwf	??i1__shapeNext+1
  6365  040C  3000               	movlw	0
  6366  040D  00B0               	movwf	??i1__shapeNext+2
  6367  040E  2C12               	goto	u446_24
  6368  040F                     u446_25:
  6369  040F  1003               	clrc
  6370  0410  0DAF               	rlf	??i1__shapeNext+1,f
  6371  0411  0DB0               	rlf	??i1__shapeNext+2,f
  6372  0412                     u446_24:
  6373  0412  0BAE               	decfsz	??i1__shapeNext,f
  6374  0413  2C0F               	goto	u446_25
  6375  0414  09AF               	comf	??i1__shapeNext+1,f
  6376  0415  09B0               	comf	??i1__shapeNext+2,f
  6377  0416  0839               	movf	i1__shapeNext@t,w
  6378  0417  3E1D               	addlw	29
  6379  0418  0084               	movwf	4
  6380  0419  082F               	movf	??i1__shapeNext+1,w
  6381  041A  0580               	andwf	0,f
  6382  041B  0A84               	incf	4,f
  6383  041C  0830               	movf	??i1__shapeNext+2,w
  6384  041D  0580               	andwf	0,f
  6385  041E  3004               	movlw	4
  6386  041F                     u447_25:
  6387  041F  1003               	clrc
  6388  0420  0CB2               	rrf	i1__shapeNext@p+1,f
  6389  0421  0CB1               	rrf	i1__shapeNext@p,f
  6390  0422  3EFF               	addlw	-1
  6391  0423  1D03               	skipz
  6392  0424  2C1F               	goto	u447_25
  6393  0425  2C02               	goto	i1l3179
  6394  0426                     i1l3181:
  6395                           
  6396                           ;tetris.h: 151: for (uint16_t p = table[t->shapeNext]; p; p >>= 4) t->nextMap |= (1 << (
      +                          p & 15));
  6397  0426  0839               	movf	i1__shapeNext@t,w
  6398  0427  3E1A               	addlw	26
  6399  0428  0084               	movwf	4
  6400  0429  0800               	movf	0,w
  6401  042A  00AE               	movwf	??i1__shapeNext
  6402  042B  072E               	addwf	??i1__shapeNext,w
  6403  042C  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  6404  042D  0084               	movwf	4
  6405  042E  120A  158A  2000  120A  118A  	fcall	stringdir
  6406  0433  00B3               	movwf	i1__shapeNext@p_287
  6407  0434  120A  158A  2000  120A  118A  	fcall	stringdir
  6408  0439  00B4               	movwf	i1__shapeNext@p_287+1
  6409  043A                     i1l3187:
  6410  043A  0833               	movf	i1__shapeNext@p_287,w
  6411  043B  0434               	iorwf	i1__shapeNext@p_287+1,w
  6412  043C  1903               	btfsc	3,2
  6413  043D  2C5C               	goto	i1l3189
  6414  043E  0833               	movf	i1__shapeNext@p_287,w
  6415  043F  390F               	andlw	15
  6416  0440  00AE               	movwf	??i1__shapeNext
  6417  0441  0AAE               	incf	??i1__shapeNext,f
  6418  0442  3001               	movlw	1
  6419  0443  00AF               	movwf	??i1__shapeNext+1
  6420  0444  3000               	movlw	0
  6421  0445  00B0               	movwf	??i1__shapeNext+2
  6422  0446  2C4A               	goto	u449_24
  6423  0447                     u449_25:
  6424  0447  1003               	clrc
  6425  0448  0DAF               	rlf	??i1__shapeNext+1,f
  6426  0449  0DB0               	rlf	??i1__shapeNext+2,f
  6427  044A                     u449_24:
  6428  044A  0BAE               	decfsz	??i1__shapeNext,f
  6429  044B  2C47               	goto	u449_25
  6430  044C  0839               	movf	i1__shapeNext@t,w
  6431  044D  3E1D               	addlw	29
  6432  044E  0084               	movwf	4
  6433  044F  082F               	movf	??i1__shapeNext+1,w
  6434  0450  0480               	iorwf	0,f
  6435  0451  0A84               	incf	4,f
  6436  0452  0830               	movf	??i1__shapeNext+2,w
  6437  0453  0480               	iorwf	0,f
  6438  0454  3004               	movlw	4
  6439  0455                     u450_25:
  6440  0455  1003               	clrc
  6441  0456  0CB4               	rrf	i1__shapeNext@p_287+1,f
  6442  0457  0CB3               	rrf	i1__shapeNext@p_287,f
  6443  0458  3EFF               	addlw	-1
  6444  0459  1D03               	skipz
  6445  045A  2C55               	goto	u450_25
  6446  045B  2C3A               	goto	i1l3187
  6447  045C                     i1l3189:
  6448                           
  6449                           ;tetris.h: 152: for (uint16_t p = table[t->shape]; p; p >>= 4) {
  6450  045C  0839               	movf	i1__shapeNext@t,w
  6451  045D  3E19               	addlw	25
  6452  045E  0084               	movwf	4
  6453  045F  0800               	movf	0,w
  6454  0460  00AE               	movwf	??i1__shapeNext
  6455  0461  072E               	addwf	??i1__shapeNext,w
  6456  0462  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  6457  0463  0084               	movwf	4
  6458  0464  120A  158A  2000  120A  118A  	fcall	stringdir
  6459  0469  00B5               	movwf	i1__shapeNext@p_288
  6460  046A  120A  158A  2000  120A  118A  	fcall	stringdir
  6461  046F  00B6               	movwf	i1__shapeNext@p_288+1
  6462  0470                     i1l3197:
  6463  0470  0835               	movf	i1__shapeNext@p_288,w
  6464  0471  0436               	iorwf	i1__shapeNext@p_288+1,w
  6465  0472  1903               	btfsc	3,2
  6466  0473  2CB0               	goto	i1l3199
  6467                           
  6468                           ;tetris.h: 153: if (!(t->nextMap >> (p & 15))&1) _wipeBlock(p % 4 + 14, p / 4 % 4 + 3);
  6469  0474  0839               	movf	i1__shapeNext@t,w
  6470  0475  3E1D               	addlw	29
  6471  0476  0084               	movwf	4
  6472  0477  1383               	bcf	3,7	;select IRP bank0
  6473  0478  0800               	movf	0,w
  6474  0479  00AE               	movwf	??i1__shapeNext
  6475  047A  0A84               	incf	4,f
  6476  047B  0800               	movf	0,w
  6477  047C  00AF               	movwf	??i1__shapeNext+1
  6478  047D  0835               	movf	i1__shapeNext@p_288,w
  6479  047E  390F               	andlw	15
  6480  047F  3E01               	addlw	1
  6481  0480  2C84               	goto	u452_24
  6482  0481                     u452_25:
  6483  0481  1003               	clrc
  6484  0482  0CAF               	rrf	??i1__shapeNext+1,f
  6485  0483  0CAE               	rrf	??i1__shapeNext,f
  6486  0484                     u452_24:
  6487  0484  3EFF               	addlw	-1
  6488  0485  1D03               	skipz
  6489  0486  2C81               	goto	u452_25
  6490  0487  082E               	movf	??i1__shapeNext,w
  6491  0488  042F               	iorwf	??i1__shapeNext+1,w
  6492  0489  1D03               	btfss	3,2
  6493  048A  2C8D               	goto	u453_20
  6494  048B  3001               	movlw	1
  6495  048C  2C8E               	goto	u454_20
  6496  048D                     u453_20:
  6497  048D  3000               	movlw	0
  6498  048E                     u454_20:
  6499  048E  3901               	andlw	1
  6500  048F  1903               	btfsc	3,2
  6501  0490  2CA7               	goto	i1l3195
  6502  0491  0835               	movf	i1__shapeNext@p_288,w
  6503  0492  00AE               	movwf	??i1__shapeNext
  6504  0493  3002               	movlw	2
  6505  0494                     u456_25:
  6506  0494  1003               	clrc
  6507  0495  0CAE               	rrf	??i1__shapeNext,f
  6508  0496  3EFF               	addlw	-1
  6509  0497  1D03               	skipz
  6510  0498  2C94               	goto	u456_25
  6511  0499  082E               	movf	??i1__shapeNext,w
  6512  049A  3903               	andlw	3
  6513  049B  3E03               	addlw	3
  6514  049C  00AF               	movwf	??i1__shapeNext+1
  6515  049D  082F               	movf	??i1__shapeNext+1,w
  6516  049E  00FA               	movwf	i1__wipeBlock@y
  6517  049F  0835               	movf	i1__shapeNext@p_288,w
  6518  04A0  3903               	andlw	3
  6519  04A1  3E0E               	addlw	14
  6520  04A2  160A  118A  234E  120A  118A  	fcall	i1__wipeBlock
  6521  04A7                     i1l3195:
  6522  04A7  3004               	movlw	4
  6523  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  6524  04A9                     u457_25:
  6525  04A9  1003               	clrc
  6526  04AA  0CB6               	rrf	i1__shapeNext@p_288+1,f
  6527  04AB  0CB5               	rrf	i1__shapeNext@p_288,f
  6528  04AC  3EFF               	addlw	-1
  6529  04AD  1D03               	skipz
  6530  04AE  2CA9               	goto	u457_25
  6531  04AF  2C70               	goto	i1l3197
  6532  04B0                     i1l3199:
  6533                           
  6534                           ;tetris.h: 154: };tetris.h: 155: for (uint16_t p = table[t->shapeNext]; p; p >>= 4) {
  6535  04B0  0839               	movf	i1__shapeNext@t,w
  6536  04B1  3E1A               	addlw	26
  6537  04B2  0084               	movwf	4
  6538  04B3  1383               	bcf	3,7	;select IRP bank0
  6539  04B4  0800               	movf	0,w
  6540  04B5  00AE               	movwf	??i1__shapeNext
  6541  04B6  072E               	addwf	??i1__shapeNext,w
  6542  04B7  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  6543  04B8  0084               	movwf	4
  6544  04B9  120A  158A  2000  120A  118A  	fcall	stringdir
  6545  04BE  00B7               	movwf	i1__shapeNext@p_289
  6546  04BF  120A  158A  2000  120A  118A  	fcall	stringdir
  6547  04C4  00B8               	movwf	i1__shapeNext@p_289+1
  6548  04C5                     i1l3207:
  6549  04C5  0837               	movf	i1__shapeNext@p_289,w
  6550  04C6  0438               	iorwf	i1__shapeNext@p_289+1,w
  6551  04C7  1903               	btfsc	3,2
  6552  04C8  0008               	return
  6553                           
  6554                           ;tetris.h: 156: if ((t->nextMap >> (p & 15))&1) _drawBlock(p % 4 + 14, p / 4 % 4 + 3);
  6555  04C9  0839               	movf	i1__shapeNext@t,w
  6556  04CA  3E1D               	addlw	29
  6557  04CB  0084               	movwf	4
  6558  04CC  1383               	bcf	3,7	;select IRP bank0
  6559  04CD  0800               	movf	0,w
  6560  04CE  00AE               	movwf	??i1__shapeNext
  6561  04CF  0A84               	incf	4,f
  6562  04D0  0800               	movf	0,w
  6563  04D1  00AF               	movwf	??i1__shapeNext+1
  6564  04D2  0837               	movf	i1__shapeNext@p_289,w
  6565  04D3  390F               	andlw	15
  6566  04D4  3E01               	addlw	1
  6567  04D5  2CD9               	goto	u459_24
  6568  04D6                     u459_25:
  6569  04D6  1003               	clrc
  6570  04D7  0CAF               	rrf	??i1__shapeNext+1,f
  6571  04D8  0CAE               	rrf	??i1__shapeNext,f
  6572  04D9                     u459_24:
  6573  04D9  3EFF               	addlw	-1
  6574  04DA  1D03               	skipz
  6575  04DB  2CD6               	goto	u459_25
  6576  04DC  1C2E               	btfss	??i1__shapeNext,0
  6577  04DD  2CF4               	goto	i1l3205
  6578  04DE  0837               	movf	i1__shapeNext@p_289,w
  6579  04DF  00AE               	movwf	??i1__shapeNext
  6580  04E0  3002               	movlw	2
  6581  04E1                     u461_25:
  6582  04E1  1003               	clrc
  6583  04E2  0CAE               	rrf	??i1__shapeNext,f
  6584  04E3  3EFF               	addlw	-1
  6585  04E4  1D03               	skipz
  6586  04E5  2CE1               	goto	u461_25
  6587  04E6  082E               	movf	??i1__shapeNext,w
  6588  04E7  3903               	andlw	3
  6589  04E8  3E03               	addlw	3
  6590  04E9  00AF               	movwf	??i1__shapeNext+1
  6591  04EA  082F               	movf	??i1__shapeNext+1,w
  6592  04EB  00FA               	movwf	i1__drawBlock@y
  6593  04EC  0837               	movf	i1__shapeNext@p_289,w
  6594  04ED  3903               	andlw	3
  6595  04EE  3E0E               	addlw	14
  6596  04EF  160A  118A  2362  120A  118A  	fcall	i1__drawBlock
  6597  04F4                     i1l3205:
  6598  04F4  3004               	movlw	4
  6599  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  6600  04F6                     u462_25:
  6601  04F6  1003               	clrc
  6602  04F7  0CB8               	rrf	i1__shapeNext@p_289+1,f
  6603  04F8  0CB7               	rrf	i1__shapeNext@p_289,f
  6604  04F9  3EFF               	addlw	-1
  6605  04FA  1D03               	skipz
  6606  04FB  2CF6               	goto	u462_25
  6607  04FC  2CC5               	goto	i1l3207
  6608  04FD                     __end_ofi1__shapeNext:
  6609                           
  6610                           	psect	text36
  6611  0AD0                     __ptext36:	
  6612 ;; *************** function i1__randShape *****************
  6613 ;; Defined at:
  6614 ;;		line 58 in file "tetris.h"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  randset         1    wreg     PTR struct Queue
  6617 ;;		 -> randset(3), 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  randset         1   10[BANK0 ] PTR struct Queue
  6620 ;;		 -> randset(3), 
  6621 ;;  shape           1   13[BANK0 ] unsigned char 
  6622 ;;  i               1   12[BANK0 ] unsigned char 
  6623 ;;  i               1   11[BANK0 ] unsigned char 
  6624 ;;  rotate          1    9[BANK0 ] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      unsigned char 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : B00/0
  6631 ;;		On exit  : 300/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6634 ;;      Params:         0       0       0       0       0
  6635 ;;      Locals:         0       5       0       0       0
  6636 ;;      Temps:          2       0       0       0       0
  6637 ;;      Totals:         2       5       0       0       0
  6638 ;;Total ram usage:        7 bytes
  6639 ;; Hardware stack levels used: 1
  6640 ;; Hardware stack levels required when called: 2
  6641 ;; This function calls:
  6642 ;;		i1_AdcGo
  6643 ;;		i1_QueuePop
  6644 ;; This function is called by:
  6645 ;;		i1__shapeNext
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           
  6650                           ;psect for function i1__randShape
  6651  0AD0                     i1__randShape:
  6652                           
  6653                           ;incstack = 0
  6654 ;; hardware stack exceeded
  6655                           ; Regs used in i1__randShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6656                           ;i1__randShape@randset stored from wreg
  6657  0AD0  00AA               	movwf	i1__randShape@randset
  6658                           
  6659                           ;tetris.h: 59: uint8_t shape = 0, rotate = 0;
  6660  0AD1  01AD               	clrf	i1__randShape@shape
  6661  0AD2  01A9               	clrf	i1__randShape@rotate
  6662                           
  6663                           ;tetris.h: 60: for (uint8_t i = 0; i < 3; i++) {
  6664  0AD3  01AB               	clrf	i1__randShape@i
  6665  0AD4                     i1l2827:
  6666                           
  6667                           ;tetris.h: 61: shape |= (QueuePop(randset) << i);
  6668  0AD4  082A               	movf	i1__randShape@randset,w
  6669  0AD5  120A  158A  226A  120A  158A  	fcall	i1_QueuePop
  6670  0ADA  00F9               	movwf	??i1__randShape
  6671  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  6672  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  6673  0ADD  0A2B               	incf	i1__randShape@i,w
  6674  0ADE  2AE1               	goto	u356_24
  6675  0ADF                     u356_25:
  6676  0ADF  1003               	clrc
  6677  0AE0  0DF9               	rlf	??i1__randShape,f
  6678  0AE1                     u356_24:
  6679  0AE1  3EFF               	addlw	-1
  6680  0AE2  1D03               	skipz
  6681  0AE3  2ADF               	goto	u356_25
  6682  0AE4  0879               	movf	??i1__randShape,w
  6683  0AE5  00FA               	movwf	??i1__randShape+1
  6684  0AE6  087A               	movf	??i1__randShape+1,w
  6685  0AE7  04AD               	iorwf	i1__randShape@shape,f
  6686  0AE8  3001               	movlw	1
  6687  0AE9  00F9               	movwf	??i1__randShape
  6688  0AEA  0879               	movf	??i1__randShape,w
  6689  0AEB  07AB               	addwf	i1__randShape@i,f
  6690  0AEC  3003               	movlw	3
  6691  0AED  022B               	subwf	i1__randShape@i,w
  6692  0AEE  1C03               	skipc
  6693  0AEF  2AD4               	goto	i1l2827
  6694                           
  6695                           ;tetris.h: 62: };tetris.h: 63: AdcGo();
  6696  0AF0  160A  118A  22A7  120A  158A  	fcall	i1_AdcGo
  6697  0AF5                     i1l2841:	
  6698                           ;tetris.h: 64: while (shape == 7) {
  6699                           
  6700  0AF5  3007               	movlw	7
  6701  0AF6  062D               	xorwf	i1__randShape@shape,w
  6702  0AF7  1D03               	btfss	3,2
  6703  0AF8  2B0C               	goto	i1l2843
  6704                           
  6705                           ;tetris.h: 65: shape <<= 1;
  6706  0AF9  1003               	clrc
  6707  0AFA  0DAD               	rlf	i1__randShape@shape,f
  6708                           
  6709                           ;tetris.h: 66: shape &= 7;
  6710  0AFB  3007               	movlw	7
  6711  0AFC  00F9               	movwf	??i1__randShape
  6712  0AFD  0879               	movf	??i1__randShape,w
  6713  0AFE  05AD               	andwf	i1__randShape@shape,f
  6714                           
  6715                           ;tetris.h: 67: shape |= (QueuePop(randset) & 1);
  6716  0AFF  082A               	movf	i1__randShape@randset,w
  6717  0B00  120A  158A  226A  120A  158A  	fcall	i1_QueuePop
  6718  0B05  3901               	andlw	1
  6719  0B06  00F9               	movwf	??i1__randShape
  6720  0B07  0879               	movf	??i1__randShape,w
  6721  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  6722  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  6723  0B0A  04AD               	iorwf	i1__randShape@shape,f
  6724  0B0B  2AF5               	goto	i1l2841
  6725  0B0C                     i1l2843:
  6726                           
  6727                           ;tetris.h: 68: };tetris.h: 69: if (shape == 6) return 24;
  6728  0B0C  3006               	movlw	6
  6729  0B0D  062D               	xorwf	i1__randShape@shape,w
  6730  0B0E  1D03               	btfss	3,2
  6731  0B0F  2B12               	goto	i1l2849
  6732  0B10  3018               	movlw	24
  6733  0B11  0008               	return
  6734  0B12                     i1l2849:
  6735                           
  6736                           ;tetris.h: 70: for (uint8_t i = 0; i < 2; i++) {
  6737  0B12  01AC               	clrf	i1__randShape@i_212
  6738  0B13                     i1l2855:
  6739                           
  6740                           ;tetris.h: 71: rotate |= (QueuePop(randset) << i);
  6741  0B13  082A               	movf	i1__randShape@randset,w
  6742  0B14  120A  158A  226A  120A  158A  	fcall	i1_QueuePop
  6743  0B19  00F9               	movwf	??i1__randShape
  6744  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  6745  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  6746  0B1C  0A2C               	incf	i1__randShape@i_212,w
  6747  0B1D  2B20               	goto	u360_24
  6748  0B1E                     u360_25:
  6749  0B1E  1003               	clrc
  6750  0B1F  0DF9               	rlf	??i1__randShape,f
  6751  0B20                     u360_24:
  6752  0B20  3EFF               	addlw	-1
  6753  0B21  1D03               	skipz
  6754  0B22  2B1E               	goto	u360_25
  6755  0B23  0879               	movf	??i1__randShape,w
  6756  0B24  00FA               	movwf	??i1__randShape+1
  6757  0B25  087A               	movf	??i1__randShape+1,w
  6758  0B26  04A9               	iorwf	i1__randShape@rotate,f
  6759  0B27  3001               	movlw	1
  6760  0B28  00F9               	movwf	??i1__randShape
  6761  0B29  0879               	movf	??i1__randShape,w
  6762  0B2A  07AC               	addwf	i1__randShape@i_212,f
  6763  0B2B  3002               	movlw	2
  6764  0B2C  022C               	subwf	i1__randShape@i_212,w
  6765  0B2D  1C03               	skipc
  6766  0B2E  2B13               	goto	i1l2855
  6767                           
  6768                           ;tetris.h: 72: };tetris.h: 73: return 4 * shape + rotate;
  6769  0B2F  082D               	movf	i1__randShape@shape,w
  6770  0B30  00F9               	movwf	??i1__randShape
  6771  0B31  3002               	movlw	2
  6772  0B32                     u362_25:
  6773  0B32  1003               	clrc
  6774  0B33  0DF9               	rlf	??i1__randShape,f
  6775  0B34  3EFF               	addlw	-1
  6776  0B35  1D03               	skipz
  6777  0B36  2B32               	goto	u362_25
  6778  0B37  0829               	movf	i1__randShape@rotate,w
  6779  0B38  0779               	addwf	??i1__randShape,w
  6780  0B39  0008               	return
  6781  0B3A                     __end_ofi1__randShape:
  6782                           
  6783                           	psect	text37
  6784  0A6A                     __ptext37:	
  6785 ;; *************** function i1_QueuePop *****************
  6786 ;; Defined at:
  6787 ;;		line 75 in file "queue.h"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  q               1    wreg     PTR struct Queue
  6790 ;;		 -> randset(3), 
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;  q               1    8[COMMON] PTR struct Queue
  6793 ;;		 -> randset(3), 
  6794 ;;  ret             1    7[COMMON] unsigned char 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      unsigned char 
  6797 ;; Registers used:
  6798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 300/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6804 ;;      Params:         0       0       0       0       0
  6805 ;;      Locals:         2       0       0       0       0
  6806 ;;      Temps:          0       9       0       0       0
  6807 ;;      Totals:         2       9       0       0       0
  6808 ;;Total ram usage:       11 bytes
  6809 ;; Hardware stack levels used: 1
  6810 ;; Hardware stack levels required when called: 1
  6811 ;; This function calls:
  6812 ;;		i1_QueueLength
  6813 ;;		i1__next
  6814 ;; This function is called by:
  6815 ;;		i1__randShape
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function i1_QueuePop
  6821  0A6A                     i1_QueuePop:
  6822                           
  6823                           ;incstack = 0
  6824 ;; hardware stack exceeded
  6825                           ; Regs used in i1_QueuePop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6826                           ;i1QueuePop@q stored from wreg
  6827  0A6A  00F8               	movwf	i1QueuePop@q
  6828                           
  6829                           ;queue.h: 76: if (QueueLength(q) == 0) return 2;
  6830  0A6B  0878               	movf	i1QueuePop@q,w
  6831  0A6C  160A  118A  24E9  120A  158A  	fcall	i1_QueueLength
  6832  0A71  3A00               	xorlw	0
  6833  0A72  1D03               	skipz
  6834  0A73  2A76               	goto	i1l2711
  6835  0A74  3002               	movlw	2
  6836  0A75  0008               	return
  6837  0A76                     i1l2711:
  6838                           
  6839                           ;queue.h: 77: uint8_t ret = (q->_data & 1 << (q->ht>>4)) > 0 ? 1 : 0;
  6840  0A76  0878               	movf	i1QueuePop@q,w
  6841  0A77  0084               	movwf	4
  6842  0A78  1383               	bcf	3,7	;select IRP bank0
  6843  0A79  0800               	movf	0,w
  6844  0A7A  1283               	bcf	3,5	;RP0=0, select bank0
  6845  0A7B  1303               	bcf	3,6	;RP1=0, select bank0
  6846  0A7C  00A0               	movwf	??i1_QueuePop
  6847  0A7D  0A84               	incf	4,f
  6848  0A7E  0800               	movf	0,w
  6849  0A7F  00A1               	movwf	??i1_QueuePop+1
  6850  0A80  0878               	movf	i1QueuePop@q,w
  6851  0A81  3E02               	addlw	2
  6852  0A82  0084               	movwf	4
  6853  0A83  0800               	movf	0,w
  6854  0A84  00A2               	movwf	??i1_QueuePop+2
  6855  0A85  3004               	movlw	4
  6856  0A86                     u333_25:
  6857  0A86  1003               	clrc
  6858  0A87  0CA2               	rrf	??i1_QueuePop+2,f
  6859  0A88  3EFF               	addlw	-1
  6860  0A89  1D03               	skipz
  6861  0A8A  2A86               	goto	u333_25
  6862  0A8B  0822               	movf	??i1_QueuePop+2,w
  6863  0A8C  00A3               	movwf	??i1_QueuePop+3
  6864  0A8D  0AA3               	incf	??i1_QueuePop+3,f
  6865  0A8E  3001               	movlw	1
  6866  0A8F  00A4               	movwf	??i1_QueuePop+4
  6867  0A90  3000               	movlw	0
  6868  0A91  00A5               	movwf	??i1_QueuePop+5
  6869  0A92  2A96               	goto	u334_24
  6870  0A93                     u334_25:
  6871  0A93  1003               	clrc
  6872  0A94  0DA4               	rlf	??i1_QueuePop+4,f
  6873  0A95  0DA5               	rlf	??i1_QueuePop+5,f
  6874  0A96                     u334_24:
  6875  0A96  0BA3               	decfsz	??i1_QueuePop+3,f
  6876  0A97  2A93               	goto	u334_25
  6877  0A98  0820               	movf	??i1_QueuePop,w
  6878  0A99  0524               	andwf	??i1_QueuePop+4,w
  6879  0A9A  00A6               	movwf	??i1_QueuePop+6
  6880  0A9B  0821               	movf	??i1_QueuePop+1,w
  6881  0A9C  0525               	andwf	??i1_QueuePop+5,w
  6882  0A9D  00A7               	movwf	??i1_QueuePop+7
  6883  0A9E  0826               	movf	??i1_QueuePop+6,w
  6884  0A9F  0427               	iorwf	??i1_QueuePop+7,w
  6885  0AA0  1903               	btfsc	3,2
  6886  0AA1  2AA4               	goto	u335_20
  6887  0AA2  3001               	movlw	1
  6888  0AA3  2AA5               	goto	u336_20
  6889  0AA4                     u335_20:
  6890  0AA4  3000               	movlw	0
  6891  0AA5                     u336_20:
  6892  0AA5  00A8               	movwf	??i1_QueuePop+8
  6893  0AA6  0828               	movf	??i1_QueuePop+8,w
  6894  0AA7  00F7               	movwf	i1QueuePop@ret
  6895                           
  6896                           ;queue.h: 78: q->ht = (_next((q->ht>>4)) << 4) + (q->ht&15);
  6897  0AA8  0878               	movf	i1QueuePop@q,w
  6898  0AA9  3E02               	addlw	2
  6899  0AAA  0084               	movwf	4
  6900  0AAB  0800               	movf	0,w
  6901  0AAC  00A0               	movwf	??i1_QueuePop
  6902  0AAD  3004               	movlw	4
  6903  0AAE                     u337_25:
  6904  0AAE  1003               	clrc
  6905  0AAF  0CA0               	rrf	??i1_QueuePop,f
  6906  0AB0  3EFF               	addlw	-1
  6907  0AB1  1D03               	skipz
  6908  0AB2  2AAE               	goto	u337_25
  6909  0AB3  0820               	movf	??i1_QueuePop,w
  6910  0AB4  160A  118A  22D7  120A  158A  	fcall	i1__next
  6911  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  6912  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
  6913  0ABB  00A1               	movwf	??i1_QueuePop+1
  6914  0ABC  3004               	movlw	4
  6915  0ABD                     u338_25:
  6916  0ABD  1003               	clrc
  6917  0ABE  0DA1               	rlf	??i1_QueuePop+1,f
  6918  0ABF  3EFF               	addlw	-1
  6919  0AC0  1D03               	skipz
  6920  0AC1  2ABD               	goto	u338_25
  6921  0AC2  0878               	movf	i1QueuePop@q,w
  6922  0AC3  3E02               	addlw	2
  6923  0AC4  0084               	movwf	4
  6924  0AC5  0800               	movf	0,w
  6925  0AC6  390F               	andlw	15
  6926  0AC7  0721               	addwf	??i1_QueuePop+1,w
  6927  0AC8  00A2               	movwf	??i1_QueuePop+2
  6928  0AC9  0878               	movf	i1QueuePop@q,w
  6929  0ACA  3E02               	addlw	2
  6930  0ACB  0084               	movwf	4
  6931  0ACC  0822               	movf	??i1_QueuePop+2,w
  6932  0ACD  0080               	movwf	0
  6933                           
  6934                           ;queue.h: 81: return ret;
  6935  0ACE  0877               	movf	i1QueuePop@ret,w
  6936  0ACF  0008               	return
  6937  0AD0                     __end_ofi1_QueuePop:
  6938                           
  6939                           	psect	text38
  6940  12A7                     __ptext38:	
  6941 ;; *************** function i1_AdcGo *****************
  6942 ;; Defined at:
  6943 ;;		line 45 in file "adc.h"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  1    wreg      void 
  6950 ;; Registers used:
  6951 ;;		None
  6952 ;; Tracked objects:
  6953 ;;		On entry : 300/0
  6954 ;;		On exit  : 300/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6957 ;;      Params:         0       0       0       0       0
  6958 ;;      Locals:         0       0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0
  6960 ;;      Totals:         0       0       0       0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used: 1
  6963 ;; This function calls:
  6964 ;;		Nothing
  6965 ;; This function is called by:
  6966 ;;		_isr
  6967 ;;		i1__randShape
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           
  6972                           ;psect for function i1_AdcGo
  6973  12A7                     i1_AdcGo:
  6974                           
  6975                           ;adc.h: 46: ADCON0 |= 0x04;
  6976                           
  6977                           ;incstack = 0
  6978                           ; Regs used in i1_AdcGo: []
  6979  12A7  151F               	bsf	31,2	;volatile
  6980  12A8  0008               	return
  6981  12A9                     __end_ofi1_AdcGo:
  6982                           
  6983                           	psect	text39
  6984  01FD                     __ptext39:	
  6985 ;; *************** function _TetrisMove *****************
  6986 ;; Defined at:
  6987 ;;		line 166 in file "tetris.h"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  t               1    wreg     PTR struct Tetris
  6990 ;;		 -> game(32), 
  6991 ;;  direction       1   14[BANK0 ] unsigned char 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  t               1   44[BANK0 ] PTR struct Tetris
  6994 ;;		 -> game(32), 
  6995 ;;  j               1   41[BANK0 ] unsigned char 
  6996 ;;  i               1   40[BANK0 ] unsigned char 
  6997 ;;  p               2   37[BANK0 ] unsigned int 
  6998 ;;  by              2   27[BANK0 ] unsigned int 
  6999 ;;  bx              2   25[BANK0 ] unsigned int 
  7000 ;;  p               2   42[BANK0 ] unsigned int 
  7001 ;;  bx              2   33[BANK0 ] unsigned int 
  7002 ;;  by              2   23[BANK0 ] unsigned int 
  7003 ;;  p               2   35[BANK0 ] unsigned int 
  7004 ;;  by              2   21[BANK0 ] unsigned int 
  7005 ;;  bx              2   19[BANK0 ] unsigned int 
  7006 ;;  x               1   39[BANK0 ] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  1    wreg      void 
  7009 ;; Registers used:
  7010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 300/0
  7013 ;;		On exit  : 300/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7016 ;;      Params:         0       1       0       0       0
  7017 ;;      Locals:         0      26       0       0       0
  7018 ;;      Temps:          0       4       0       0       0
  7019 ;;      Totals:         0      31       0       0       0
  7020 ;;Total ram usage:       31 bytes
  7021 ;; Hardware stack levels used: 1
  7022 ;; Hardware stack levels required when called: 5
  7023 ;; This function calls:
  7024 ;;		__clrBlock
  7025 ;;		__setBlock
  7026 ;;		__wipeShape
  7027 ;;		i1_UartCurMove
  7028 ;;		i1_UartCurSet
  7029 ;;		i1_UartSendChar
  7030 ;;		i1__drawShape
  7031 ;;		i1__getBlock
  7032 ;; This function is called by:
  7033 ;;		_isr
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _TetrisMove
  7039  01FD                     _TetrisMove:
  7040                           
  7041                           ;incstack = 0
  7042 ;; hardware stack exceeded
  7043                           ; Regs used in _TetrisMove: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7044                           ;TetrisMove@t stored from wreg
  7045  01FD  00CC               	movwf	TetrisMove@t
  7046                           
  7047                           ;tetris.h: 167: uint8_t x = t->x + (direction ? 1 : -1);
  7048  01FE  082E               	movf	TetrisMove@direction,w
  7049  01FF  1D03               	btfss	3,2
  7050  0200  2A05               	goto	i1l3515
  7051  0201  30FF               	movlw	255
  7052  0202  00BD               	movwf	_TetrisMove$314
  7053  0203  30FF               	movlw	255
  7054  0204  2A08               	goto	L6
  7055  0205                     i1l3515:
  7056  0205  3001               	movlw	1
  7057  0206  00BD               	movwf	_TetrisMove$314
  7058  0207  3000               	movlw	0
  7059  0208                     L6:
  7060  0208  00BE               	movwf	_TetrisMove$314+1
  7061  0209  084C               	movf	TetrisMove@t,w
  7062  020A  3E1B               	addlw	27
  7063  020B  0084               	movwf	4
  7064  020C  083D               	movf	_TetrisMove$314,w
  7065  020D  1383               	bcf	3,7	;select IRP bank0
  7066  020E  0700               	addwf	0,w
  7067  020F  00AF               	movwf	??_TetrisMove
  7068  0210  082F               	movf	??_TetrisMove,w
  7069  0211  00C7               	movwf	TetrisMove@x
  7070                           
  7071                           ;tetris.h: 168: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(t->x+p%4),by=(uint8_t
      +                          )(t->y+p/4%4),p;p>>=4) _clrBlock(t, bx, by);
  7072  0212  084C               	movf	TetrisMove@t,w
  7073  0213  3E19               	addlw	25
  7074  0214  0084               	movwf	4
  7075  0215  0800               	movf	0,w
  7076  0216  00AF               	movwf	??_TetrisMove
  7077  0217  072F               	addwf	??_TetrisMove,w
  7078  0218  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  7079  0219  0084               	movwf	4
  7080  021A  120A  158A  2000  120A  118A  	fcall	stringdir
  7081  021F  00C3               	movwf	TetrisMove@p
  7082  0220  120A  158A  2000  120A  118A  	fcall	stringdir
  7083  0225  00C4               	movwf	TetrisMove@p+1
  7084  0226                     i1l3525:
  7085  0226  3003               	movlw	3
  7086  0227  0543               	andwf	TetrisMove@p,w
  7087  0228  00AF               	movwf	??_TetrisMove
  7088  0229  084C               	movf	TetrisMove@t,w
  7089  022A  3E1B               	addlw	27
  7090  022B  0084               	movwf	4
  7091  022C  1383               	bcf	3,7	;select IRP bank0
  7092  022D  0800               	movf	0,w
  7093  022E  072F               	addwf	??_TetrisMove,w
  7094  022F  00B0               	movwf	??_TetrisMove+1
  7095  0230  01B1               	clrf	??_TetrisMove+2
  7096  0231  0830               	movf	??_TetrisMove+1,w
  7097  0232  00B3               	movwf	TetrisMove@bx
  7098  0233  0831               	movf	??_TetrisMove+2,w
  7099  0234  00B4               	movwf	TetrisMove@bx+1
  7100  0235  0843               	movf	TetrisMove@p,w
  7101  0236  00AF               	movwf	??_TetrisMove
  7102  0237  3002               	movlw	2
  7103  0238                     u496_25:
  7104  0238  1003               	clrc
  7105  0239  0CAF               	rrf	??_TetrisMove,f
  7106  023A  3EFF               	addlw	-1
  7107  023B  1D03               	skipz
  7108  023C  2A38               	goto	u496_25
  7109  023D  3003               	movlw	3
  7110  023E  052F               	andwf	??_TetrisMove,w
  7111  023F  00B0               	movwf	??_TetrisMove+1
  7112  0240  084C               	movf	TetrisMove@t,w
  7113  0241  3E1C               	addlw	28
  7114  0242  0084               	movwf	4
  7115  0243  0800               	movf	0,w
  7116  0244  0730               	addwf	??_TetrisMove+1,w
  7117  0245  00B1               	movwf	??_TetrisMove+2
  7118  0246  01B2               	clrf	??_TetrisMove+3
  7119  0247  0831               	movf	??_TetrisMove+2,w
  7120  0248  00B5               	movwf	TetrisMove@by
  7121  0249  0832               	movf	??_TetrisMove+3,w
  7122  024A  00B6               	movwf	TetrisMove@by+1
  7123  024B  0843               	movf	TetrisMove@p,w
  7124  024C  0444               	iorwf	TetrisMove@p+1,w
  7125  024D  1903               	btfsc	3,2
  7126  024E  2A65               	goto	i1l3531
  7127  024F  0833               	movf	TetrisMove@bx,w
  7128  0250  00AF               	movwf	??_TetrisMove
  7129  0251  082F               	movf	??_TetrisMove,w
  7130  0252  00F4               	movwf	__clrBlock@x
  7131  0253  0835               	movf	TetrisMove@by,w
  7132  0254  00B0               	movwf	??_TetrisMove+1
  7133  0255  0830               	movf	??_TetrisMove+1,w
  7134  0256  00F5               	movwf	__clrBlock@y
  7135  0257  084C               	movf	TetrisMove@t,w
  7136  0258  160A  118A  260A  120A  118A  	fcall	__clrBlock
  7137  025D  3004               	movlw	4
  7138  025E                     u495_25:
  7139  025E  1003               	clrc
  7140  025F  0CC4               	rrf	TetrisMove@p+1,f
  7141  0260  0CC3               	rrf	TetrisMove@p,f
  7142  0261  3EFF               	addlw	-1
  7143  0262  1D03               	skipz
  7144  0263  2A5E               	goto	u495_25
  7145  0264  2A26               	goto	i1l3525
  7146  0265                     i1l3531:
  7147                           
  7148                           ;tetris.h: 170: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(x+p%4),by=(uint8_t)(t
      +                          ->y+p/4%4),p;p>>=4) {
  7149  0265  084C               	movf	TetrisMove@t,w
  7150  0266  3E19               	addlw	25
  7151  0267  0084               	movwf	4
  7152  0268  0800               	movf	0,w
  7153  0269  00AF               	movwf	??_TetrisMove
  7154  026A  072F               	addwf	??_TetrisMove,w
  7155  026B  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  7156  026C  0084               	movwf	4
  7157  026D  120A  158A  2000  120A  118A  	fcall	stringdir
  7158  0272  00CA               	movwf	TetrisMove@p_319
  7159  0273  120A  158A  2000  120A  118A  	fcall	stringdir
  7160  0278  00CB               	movwf	TetrisMove@p_319+1
  7161  0279  2AA1               	goto	i1l3543
  7162  027A                     i1l3535:
  7163  027A  0841               	movf	TetrisMove@bx_320,w
  7164  027B  00AF               	movwf	??_TetrisMove
  7165  027C  082F               	movf	??_TetrisMove,w
  7166  027D  00F4               	movwf	i1__getBlock@x
  7167  027E  0837               	movf	TetrisMove@by_321,w
  7168  027F  00B0               	movwf	??_TetrisMove+1
  7169  0280  0830               	movf	??_TetrisMove+1,w
  7170  0281  00F5               	movwf	i1__getBlock@y
  7171  0282  084C               	movf	TetrisMove@t,w
  7172  0283  160A  118A  25A0  120A  118A  	fcall	i1__getBlock
  7173  0288  3A00               	xorlw	0
  7174  0289  1D03               	btfss	3,2
  7175  028A  2ACE               	goto	i1l3547
  7176                           
  7177                           ;tetris.h: 172: if (p < 16) t->x = x;
  7178  028B  3000               	movlw	0
  7179  028C  024B               	subwf	TetrisMove@p_319+1,w
  7180  028D  3010               	movlw	16
  7181  028E  1903               	skipnz
  7182  028F  024A               	subwf	TetrisMove@p_319,w
  7183  0290  1803               	skipnc
  7184  0291  2A9A               	goto	i1l3541
  7185  0292  0847               	movf	TetrisMove@x,w
  7186  0293  00AF               	movwf	??_TetrisMove
  7187  0294  084C               	movf	TetrisMove@t,w
  7188  0295  3E1B               	addlw	27
  7189  0296  0084               	movwf	4
  7190  0297  082F               	movf	??_TetrisMove,w
  7191  0298  1383               	bcf	3,7	;select IRP bank0
  7192  0299  0080               	movwf	0
  7193  029A                     i1l3541:
  7194  029A  3004               	movlw	4
  7195  029B                     u501_25:
  7196  029B  1003               	clrc
  7197  029C  0CCB               	rrf	TetrisMove@p_319+1,f
  7198  029D  0CCA               	rrf	TetrisMove@p_319,f
  7199  029E  3EFF               	addlw	-1
  7200  029F  1D03               	skipz
  7201  02A0  2A9B               	goto	u501_25
  7202  02A1                     i1l3543:
  7203  02A1  3003               	movlw	3
  7204  02A2  054A               	andwf	TetrisMove@p_319,w
  7205  02A3  00AF               	movwf	??_TetrisMove
  7206  02A4  0847               	movf	TetrisMove@x,w
  7207  02A5  072F               	addwf	??_TetrisMove,w
  7208  02A6  00B0               	movwf	??_TetrisMove+1
  7209  02A7  01B1               	clrf	??_TetrisMove+2
  7210  02A8  0830               	movf	??_TetrisMove+1,w
  7211  02A9  00C1               	movwf	TetrisMove@bx_320
  7212  02AA  0831               	movf	??_TetrisMove+2,w
  7213  02AB  00C2               	movwf	TetrisMove@bx_320+1
  7214  02AC  084A               	movf	TetrisMove@p_319,w
  7215  02AD  00AF               	movwf	??_TetrisMove
  7216  02AE  3002               	movlw	2
  7217  02AF                     u502_25:
  7218  02AF  1003               	clrc
  7219  02B0  0CAF               	rrf	??_TetrisMove,f
  7220  02B1  3EFF               	addlw	-1
  7221  02B2  1D03               	skipz
  7222  02B3  2AAF               	goto	u502_25
  7223  02B4  3003               	movlw	3
  7224  02B5  052F               	andwf	??_TetrisMove,w
  7225  02B6  00B0               	movwf	??_TetrisMove+1
  7226  02B7  084C               	movf	TetrisMove@t,w
  7227  02B8  3E1C               	addlw	28
  7228  02B9  0084               	movwf	4
  7229  02BA  1383               	bcf	3,7	;select IRP bank0
  7230  02BB  0800               	movf	0,w
  7231  02BC  0730               	addwf	??_TetrisMove+1,w
  7232  02BD  00B1               	movwf	??_TetrisMove+2
  7233  02BE  01B2               	clrf	??_TetrisMove+3
  7234  02BF  0831               	movf	??_TetrisMove+2,w
  7235  02C0  00B7               	movwf	TetrisMove@by_321
  7236  02C1  0832               	movf	??_TetrisMove+3,w
  7237  02C2  00B8               	movwf	TetrisMove@by_321+1
  7238  02C3  084A               	movf	TetrisMove@p_319,w
  7239  02C4  044B               	iorwf	TetrisMove@p_319+1,w
  7240  02C5  1903               	btfsc	3,2
  7241  02C6  2ACE               	goto	i1l3547
  7242                           
  7243                           ;tetris.h: 171: if (bx > 9 || _getBlock(t, bx, by)) break;
  7244  02C7  3000               	movlw	0
  7245  02C8  0242               	subwf	TetrisMove@bx_320+1,w
  7246  02C9  300A               	movlw	10
  7247  02CA  1903               	skipnz
  7248  02CB  0241               	subwf	TetrisMove@bx_320,w
  7249  02CC  1C03               	btfss	3,0
  7250  02CD  2A7A               	goto	i1l3535
  7251  02CE                     i1l3547:
  7252                           
  7253                           ;tetris.h: 173: };tetris.h: 174: for (uint16_t p=table[t->shape],bx,by;bx=(uint8_t)(t->x
      +                          +p%4),by=(uint8_t)(t->y+p/4%4),p;p>>=4) _setBlock(t, bx, by);
  7254  02CE  084C               	movf	TetrisMove@t,w
  7255  02CF  3E19               	addlw	25
  7256  02D0  0084               	movwf	4
  7257  02D1  1383               	bcf	3,7	;select IRP bank0
  7258  02D2  0800               	movf	0,w
  7259  02D3  00AF               	movwf	??_TetrisMove
  7260  02D4  072F               	addwf	??_TetrisMove,w
  7261  02D5  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  7262  02D6  0084               	movwf	4
  7263  02D7  120A  158A  2000  120A  118A  	fcall	stringdir
  7264  02DC  00C5               	movwf	TetrisMove@p_322
  7265  02DD  120A  158A  2000  120A  118A  	fcall	stringdir
  7266  02E2  00C6               	movwf	TetrisMove@p_322+1
  7267  02E3                     i1l3553:
  7268  02E3  3003               	movlw	3
  7269  02E4  0545               	andwf	TetrisMove@p_322,w
  7270  02E5  00AF               	movwf	??_TetrisMove
  7271  02E6  084C               	movf	TetrisMove@t,w
  7272  02E7  3E1B               	addlw	27
  7273  02E8  0084               	movwf	4
  7274  02E9  1383               	bcf	3,7	;select IRP bank0
  7275  02EA  0800               	movf	0,w
  7276  02EB  072F               	addwf	??_TetrisMove,w
  7277  02EC  00B0               	movwf	??_TetrisMove+1
  7278  02ED  01B1               	clrf	??_TetrisMove+2
  7279  02EE  0830               	movf	??_TetrisMove+1,w
  7280  02EF  00B9               	movwf	TetrisMove@bx_323
  7281  02F0  0831               	movf	??_TetrisMove+2,w
  7282  02F1  00BA               	movwf	TetrisMove@bx_323+1
  7283  02F2  0845               	movf	TetrisMove@p_322,w
  7284  02F3  00AF               	movwf	??_TetrisMove
  7285  02F4  3002               	movlw	2
  7286  02F5                     u505_25:
  7287  02F5  1003               	clrc
  7288  02F6  0CAF               	rrf	??_TetrisMove,f
  7289  02F7  3EFF               	addlw	-1
  7290  02F8  1D03               	skipz
  7291  02F9  2AF5               	goto	u505_25
  7292  02FA  3003               	movlw	3
  7293  02FB  052F               	andwf	??_TetrisMove,w
  7294  02FC  00B0               	movwf	??_TetrisMove+1
  7295  02FD  084C               	movf	TetrisMove@t,w
  7296  02FE  3E1C               	addlw	28
  7297  02FF  0084               	movwf	4
  7298  0300  0800               	movf	0,w
  7299  0301  0730               	addwf	??_TetrisMove+1,w
  7300  0302  00B1               	movwf	??_TetrisMove+2
  7301  0303  01B2               	clrf	??_TetrisMove+3
  7302  0304  0831               	movf	??_TetrisMove+2,w
  7303  0305  00BB               	movwf	TetrisMove@by_324
  7304  0306  0832               	movf	??_TetrisMove+3,w
  7305  0307  00BC               	movwf	TetrisMove@by_324+1
  7306  0308  0845               	movf	TetrisMove@p_322,w
  7307  0309  0446               	iorwf	TetrisMove@p_322+1,w
  7308  030A  1903               	btfsc	3,2
  7309  030B  2B22               	goto	i1l3559
  7310  030C  0839               	movf	TetrisMove@bx_323,w
  7311  030D  00AF               	movwf	??_TetrisMove
  7312  030E  082F               	movf	??_TetrisMove,w
  7313  030F  00F4               	movwf	__setBlock@x
  7314  0310  083B               	movf	TetrisMove@by_324,w
  7315  0311  00B0               	movwf	??_TetrisMove+1
  7316  0312  0830               	movf	??_TetrisMove+1,w
  7317  0313  00F5               	movwf	__setBlock@y
  7318  0314  084C               	movf	TetrisMove@t,w
  7319  0315  160A  118A  256B  120A  118A  	fcall	__setBlock
  7320  031A  3004               	movlw	4
  7321  031B                     u504_25:
  7322  031B  1003               	clrc
  7323  031C  0CC6               	rrf	TetrisMove@p_322+1,f
  7324  031D  0CC5               	rrf	TetrisMove@p_322,f
  7325  031E  3EFF               	addlw	-1
  7326  031F  1D03               	skipz
  7327  0320  2B1B               	goto	u504_25
  7328  0321  2AE3               	goto	i1l3553
  7329  0322                     i1l3559:
  7330                           
  7331                           ;tetris.h: 175: if (t->x != x) return;
  7332  0322  084C               	movf	TetrisMove@t,w
  7333  0323  3E1B               	addlw	27
  7334  0324  0084               	movwf	4
  7335  0325  0800               	movf	0,w
  7336  0326  0647               	xorwf	TetrisMove@x,w
  7337  0327  1D03               	btfss	3,2
  7338  0328  0008               	return
  7339                           
  7340                           ;tetris.h: 176: _wipeShape(t, t->shape, t->x - (direction ? 1 : -1), t->y);
  7341  0329  082E               	movf	TetrisMove@direction,w
  7342  032A  1D03               	btfss	3,2
  7343  032B  2B30               	goto	i1l3567
  7344  032C  30FF               	movlw	255
  7345  032D  00BF               	movwf	_TetrisMove$327
  7346  032E  30FF               	movlw	255
  7347  032F  2B33               	goto	L7
  7348  0330                     i1l3567:
  7349  0330  3001               	movlw	1
  7350  0331  00BF               	movwf	_TetrisMove$327
  7351  0332  3000               	movlw	0
  7352  0333                     L7:
  7353  0333  00C0               	movwf	_TetrisMove$327+1
  7354  0334  084C               	movf	TetrisMove@t,w
  7355  0335  3E19               	addlw	25
  7356  0336  0084               	movwf	4
  7357  0337  0800               	movf	0,w
  7358  0338  00AF               	movwf	??_TetrisMove
  7359  0339  082F               	movf	??_TetrisMove,w
  7360  033A  00A0               	movwf	__wipeShape@shape
  7361  033B  084C               	movf	TetrisMove@t,w
  7362  033C  3E1B               	addlw	27
  7363  033D  0084               	movwf	4
  7364  033E  083F               	movf	_TetrisMove$327,w
  7365  033F  0200               	subwf	0,w
  7366  0340  00B0               	movwf	??_TetrisMove+1
  7367  0341  0830               	movf	??_TetrisMove+1,w
  7368  0342  00A1               	movwf	__wipeShape@x
  7369  0343  084C               	movf	TetrisMove@t,w
  7370  0344  3E1C               	addlw	28
  7371  0345  0084               	movwf	4
  7372  0346  0800               	movf	0,w
  7373  0347  00B1               	movwf	??_TetrisMove+2
  7374  0348  0831               	movf	??_TetrisMove+2,w
  7375  0349  00A2               	movwf	__wipeShape@y
  7376  034A  084C               	movf	TetrisMove@t,w
  7377  034B  120A  158A  219E  120A  118A  	fcall	__wipeShape
  7378                           
  7379                           ;tetris.h: 177: _drawShape(t, t->shape, t->x, t->y);
  7380  0350  084C               	movf	TetrisMove@t,w
  7381  0351  3E19               	addlw	25
  7382  0352  0084               	movwf	4
  7383  0353  1383               	bcf	3,7	;select IRP bank0
  7384  0354  0800               	movf	0,w
  7385  0355  00AF               	movwf	??_TetrisMove
  7386  0356  082F               	movf	??_TetrisMove,w
  7387  0357  00A0               	movwf	i1__drawShape@shape
  7388  0358  084C               	movf	TetrisMove@t,w
  7389  0359  3E1B               	addlw	27
  7390  035A  0084               	movwf	4
  7391  035B  0800               	movf	0,w
  7392  035C  00B0               	movwf	??_TetrisMove+1
  7393  035D  0830               	movf	??_TetrisMove+1,w
  7394  035E  00A1               	movwf	i1__drawShape@x
  7395  035F  084C               	movf	TetrisMove@t,w
  7396  0360  3E1C               	addlw	28
  7397  0361  0084               	movwf	4
  7398  0362  0800               	movf	0,w
  7399  0363  00B1               	movwf	??_TetrisMove+2
  7400  0364  0831               	movf	??_TetrisMove+2,w
  7401  0365  00A2               	movwf	i1__drawShape@y
  7402  0366  084C               	movf	TetrisMove@t,w
  7403  0367  120A  158A  2204  120A  118A  	fcall	i1__drawShape
  7404                           
  7405                           ;tetris.h: 178: UartCurSet(1, 1);
  7406  036C  01F7               	clrf	i1UartCurSet@y
  7407  036D  0AF7               	incf	i1UartCurSet@y,f
  7408  036E  3001               	movlw	1
  7409  036F  120A  158A  233A  120A  118A  	fcall	i1_UartCurSet
  7410                           
  7411                           ;tetris.h: 179: for (uint8_t i = 0; i < 20; i++) {
  7412  0374  1283               	bcf	3,5	;RP0=0, select bank0
  7413  0375  01C8               	clrf	TetrisMove@i
  7414  0376                     i1l3581:
  7415                           
  7416                           ;tetris.h: 180: for (uint8_t j = 0; j < 10; j++) {
  7417  0376  01C9               	clrf	TetrisMove@j
  7418  0377                     i1l3587:
  7419                           
  7420                           ;tetris.h: 181: UartSendChar(_getBlock(t, j, i) + '0');
  7421  0377  0849               	movf	TetrisMove@j,w
  7422  0378  00AF               	movwf	??_TetrisMove
  7423  0379  082F               	movf	??_TetrisMove,w
  7424  037A  00F4               	movwf	i1__getBlock@x
  7425  037B  0848               	movf	TetrisMove@i,w
  7426  037C  00B0               	movwf	??_TetrisMove+1
  7427  037D  0830               	movf	??_TetrisMove+1,w
  7428  037E  00F5               	movwf	i1__getBlock@y
  7429  037F  084C               	movf	TetrisMove@t,w
  7430  0380  160A  118A  25A0  120A  118A  	fcall	i1__getBlock
  7431  0385  3E30               	addlw	48
  7432  0386  160A  118A  22C1  120A  118A  	fcall	i1_UartSendChar
  7433  038B  3001               	movlw	1
  7434  038C  1283               	bcf	3,5	;RP0=0, select bank0
  7435  038D  00AF               	movwf	??_TetrisMove
  7436  038E  082F               	movf	??_TetrisMove,w
  7437  038F  07C9               	addwf	TetrisMove@j,f
  7438  0390  300A               	movlw	10
  7439  0391  0249               	subwf	TetrisMove@j,w
  7440  0392  1C03               	skipc
  7441  0393  2B77               	goto	i1l3587
  7442                           
  7443                           ;tetris.h: 182: };tetris.h: 183: UartCurMove(-10, 1);
  7444  0394  01F9               	clrf	i1UartCurMove@y
  7445  0395  0AF9               	incf	i1UartCurMove@y,f
  7446  0396  30F6               	movlw	246
  7447  0397  120A  158A  25AA  120A  118A  	fcall	i1_UartCurMove
  7448  039C  3001               	movlw	1
  7449  039D  1283               	bcf	3,5	;RP0=0, select bank0
  7450  039E  00AF               	movwf	??_TetrisMove
  7451  039F  082F               	movf	??_TetrisMove,w
  7452  03A0  07C8               	addwf	TetrisMove@i,f
  7453  03A1  3014               	movlw	20
  7454  03A2  0248               	subwf	TetrisMove@i,w
  7455  03A3  1803               	btfsc	3,0
  7456  03A4  0008               	return
  7457  03A5  2B76               	goto	i1l3581
  7458  03A6                     __end_of_TetrisMove:
  7459                           
  7460                           	psect	text40
  7461  0A04                     __ptext40:	
  7462 ;; *************** function i1__drawShape *****************
  7463 ;; Defined at:
  7464 ;;		line 108 in file "tetris.h"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  t               1    wreg     PTR struct Tetris
  7467 ;;		 -> game(32), 
  7468 ;;  shape           1    0[BANK0 ] unsigned char 
  7469 ;;  x               1    1[BANK0 ] unsigned char 
  7470 ;;  y               1    2[BANK0 ] unsigned char 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  t               1    7[BANK0 ] PTR struct Tetris
  7473 ;;		 -> game(32), 
  7474 ;;  p               2   12[BANK0 ] unsigned int 
  7475 ;;  by              2   10[BANK0 ] unsigned int 
  7476 ;;  bx              2    8[BANK0 ] unsigned int 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : B00/0
  7483 ;;		On exit  : 300/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7486 ;;      Params:         0       3       0       0       0
  7487 ;;      Locals:         0       7       0       0       0
  7488 ;;      Temps:          0       4       0       0       0
  7489 ;;      Totals:         0      14       0       0       0
  7490 ;;Total ram usage:       14 bytes
  7491 ;; Hardware stack levels used: 1
  7492 ;; Hardware stack levels required when called: 4
  7493 ;; This function calls:
  7494 ;;		i1__drawBlock
  7495 ;;		i1__getBlock
  7496 ;; This function is called by:
  7497 ;;		_TetrisMove
  7498 ;;		_TetrisNext
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           
  7503                           ;psect for function i1__drawShape
  7504  0A04                     i1__drawShape:
  7505                           
  7506                           ;incstack = 0
  7507 ;; hardware stack exceeded
  7508                           ; Regs used in i1__drawShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7509                           ;i1__drawShape@t stored from wreg
  7510  0A04  00A7               	movwf	i1__drawShape@t
  7511                           
  7512                           ;tetris.h: 110: for (uint16_t p=table[shape],bx,by;bx=(uint8_t)(x+p%4),by=(uint8_t)(y+p/
      +                          4%4),p;p>>=4) {
  7513  0A05  0820               	movf	i1__drawShape@shape,w
  7514  0A06  00A3               	movwf	??i1__drawShape
  7515  0A07  0723               	addwf	??i1__drawShape,w
  7516  0A08  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  7517  0A09  0084               	movwf	4
  7518  0A0A  120A  158A  2000  120A  158A  	fcall	stringdir
  7519  0A0F  00AC               	movwf	i1__drawShape@p
  7520  0A10  120A  158A  2000  120A  158A  	fcall	stringdir
  7521  0A15  00AD               	movwf	i1__drawShape@p+1
  7522  0A16                     i1l3151:
  7523  0A16  3003               	movlw	3
  7524  0A17  052C               	andwf	i1__drawShape@p,w
  7525  0A18  00A3               	movwf	??i1__drawShape
  7526  0A19  0821               	movf	i1__drawShape@x,w
  7527  0A1A  0723               	addwf	??i1__drawShape,w
  7528  0A1B  00A4               	movwf	??i1__drawShape+1
  7529  0A1C  01A5               	clrf	??i1__drawShape+2
  7530  0A1D  0824               	movf	??i1__drawShape+1,w
  7531  0A1E  00A8               	movwf	i1__drawShape@bx
  7532  0A1F  0825               	movf	??i1__drawShape+2,w
  7533  0A20  00A9               	movwf	i1__drawShape@bx+1
  7534  0A21  082C               	movf	i1__drawShape@p,w
  7535  0A22  00A3               	movwf	??i1__drawShape
  7536  0A23  3002               	movlw	2
  7537  0A24                     u440_25:
  7538  0A24  1003               	clrc
  7539  0A25  0CA3               	rrf	??i1__drawShape,f
  7540  0A26  3EFF               	addlw	-1
  7541  0A27  1D03               	skipz
  7542  0A28  2A24               	goto	u440_25
  7543  0A29  3003               	movlw	3
  7544  0A2A  0523               	andwf	??i1__drawShape,w
  7545  0A2B  00A4               	movwf	??i1__drawShape+1
  7546  0A2C  0822               	movf	i1__drawShape@y,w
  7547  0A2D  0724               	addwf	??i1__drawShape+1,w
  7548  0A2E  00A5               	movwf	??i1__drawShape+2
  7549  0A2F  01A6               	clrf	??i1__drawShape+3
  7550  0A30  0825               	movf	??i1__drawShape+2,w
  7551  0A31  00AA               	movwf	i1__drawShape@by
  7552  0A32  0826               	movf	??i1__drawShape+3,w
  7553  0A33  00AB               	movwf	i1__drawShape@by+1
  7554  0A34  082C               	movf	i1__drawShape@p,w
  7555  0A35  042D               	iorwf	i1__drawShape@p+1,w
  7556  0A36  1903               	btfsc	3,2
  7557  0A37  0008               	return
  7558                           
  7559                           ;tetris.h: 111: if (bx < 10 && by < 20 && _getBlock(t, bx, by)) {
  7560  0A38  3000               	movlw	0
  7561  0A39  0229               	subwf	i1__drawShape@bx+1,w
  7562  0A3A  300A               	movlw	10
  7563  0A3B  1903               	skipnz
  7564  0A3C  0228               	subwf	i1__drawShape@bx,w
  7565  0A3D  1803               	skipnc
  7566  0A3E  2A61               	goto	i1l3149
  7567  0A3F  3000               	movlw	0
  7568  0A40  022B               	subwf	i1__drawShape@by+1,w
  7569  0A41  3014               	movlw	20
  7570  0A42  1903               	skipnz
  7571  0A43  022A               	subwf	i1__drawShape@by,w
  7572  0A44  1803               	skipnc
  7573  0A45  2A61               	goto	i1l3149
  7574  0A46  0828               	movf	i1__drawShape@bx,w
  7575  0A47  00A3               	movwf	??i1__drawShape
  7576  0A48  0823               	movf	??i1__drawShape,w
  7577  0A49  00F4               	movwf	i1__getBlock@x
  7578  0A4A  082A               	movf	i1__drawShape@by,w
  7579  0A4B  00A4               	movwf	??i1__drawShape+1
  7580  0A4C  0824               	movf	??i1__drawShape+1,w
  7581  0A4D  00F5               	movwf	i1__getBlock@y
  7582  0A4E  0827               	movf	i1__drawShape@t,w
  7583  0A4F  160A  118A  25A0  120A  158A  	fcall	i1__getBlock
  7584  0A54  3A00               	xorlw	0
  7585  0A55  1903               	skipnz
  7586  0A56  2A61               	goto	i1l3149
  7587                           
  7588                           ;tetris.h: 112: _drawBlock(bx, by);
  7589  0A57  082A               	movf	i1__drawShape@by,w
  7590  0A58  00A3               	movwf	??i1__drawShape
  7591  0A59  0823               	movf	??i1__drawShape,w
  7592  0A5A  00FA               	movwf	i1__drawBlock@y
  7593  0A5B  0828               	movf	i1__drawShape@bx,w
  7594  0A5C  160A  118A  2362  120A  158A  	fcall	i1__drawBlock
  7595  0A61                     i1l3149:
  7596  0A61  3004               	movlw	4
  7597  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7598  0A63                     u439_25:
  7599  0A63  1003               	clrc
  7600  0A64  0CAD               	rrf	i1__drawShape@p+1,f
  7601  0A65  0CAC               	rrf	i1__drawShape@p,f
  7602  0A66  3EFF               	addlw	-1
  7603  0A67  1D03               	skipz
  7604  0A68  2A63               	goto	u439_25
  7605  0A69  2A16               	goto	i1l3151
  7606  0A6A                     __end_ofi1__drawShape:
  7607                           
  7608                           	psect	text41
  7609  1362                     __ptext41:	
  7610 ;; *************** function i1__drawBlock *****************
  7611 ;; Defined at:
  7612 ;;		line 98 in file "tetris.h"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  x               1    wreg     unsigned char 
  7615 ;;  y               1   10[COMMON] unsigned char 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  x               1   13[COMMON] unsigned char 
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      void 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 300/0
  7624 ;;		On exit  : 200/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7627 ;;      Params:         1       0       0       0       0
  7628 ;;      Locals:         1       0       0       0       0
  7629 ;;      Temps:          2       0       0       0       0
  7630 ;;      Totals:         4       0       0       0       0
  7631 ;;Total ram usage:        4 bytes
  7632 ;; Hardware stack levels used: 1
  7633 ;; Hardware stack levels required when called: 3
  7634 ;; This function calls:
  7635 ;;		i1_UartCurSet
  7636 ;;		i1_UartSendString
  7637 ;; This function is called by:
  7638 ;;		i1__drawShape
  7639 ;;		i1__shapeNext
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           
  7644                           ;psect for function i1__drawBlock
  7645  1362                     i1__drawBlock:
  7646                           
  7647                           ;incstack = 0
  7648 ;; hardware stack exceeded
  7649                           ; Regs used in i1__drawBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7650                           ;i1__drawBlock@x stored from wreg
  7651  1362  00FD               	movwf	i1__drawBlock@x
  7652                           
  7653                           ;tetris.h: 99: UartCurSet(2 * x + 24, y + 2);
  7654  1363  087A               	movf	i1__drawBlock@y,w
  7655  1364  3E02               	addlw	2
  7656  1365  00FB               	movwf	??i1__drawBlock
  7657  1366  087B               	movf	??i1__drawBlock,w
  7658  1367  00F7               	movwf	i1UartCurSet@y
  7659  1368  087D               	movf	i1__drawBlock@x,w
  7660  1369  00FC               	movwf	??i1__drawBlock+1
  7661  136A  077C               	addwf	??i1__drawBlock+1,w
  7662  136B  3E18               	addlw	24
  7663  136C  120A  158A  233A  160A  118A  	fcall	i1_UartCurSet
  7664                           
  7665                           ;tetris.h: 100: UartSendString("\xe2\x96\x88\xe2\x96\x88");
  7666  1371  30BB               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  7667  1372  160A  118A  23B9   	fcall	i1_UartSendString
  7668  1375  0008               	return
  7669  1376                     __end_ofi1__drawBlock:
  7670                           
  7671                           	psect	text42
  7672  0DAA                     __ptext42:	
  7673 ;; *************** function i1_UartCurMove *****************
  7674 ;; Defined at:
  7675 ;;		line 103 in file "uart.h"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  x               1    wreg     char 
  7678 ;;  y               1    9[COMMON] char 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  x               1   12[COMMON] char 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  1    wreg      void 
  7683 ;; Registers used:
  7684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : 300/0
  7687 ;;		On exit  : 300/100
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7690 ;;      Params:         1       0       0       0       0
  7691 ;;      Locals:         1       0       0       0       0
  7692 ;;      Temps:          2       0       0       0       0
  7693 ;;      Totals:         4       0       0       0       0
  7694 ;;Total ram usage:        4 bytes
  7695 ;; Hardware stack levels used: 1
  7696 ;; Hardware stack levels required when called: 2
  7697 ;; This function calls:
  7698 ;;		i1_UartSendChar
  7699 ;;		i1_UartSendString
  7700 ;;		i1___awdiv
  7701 ;;		i1___awmod
  7702 ;; This function is called by:
  7703 ;;		_TetrisMove
  7704 ;;		_TetrisNext
  7705 ;;		i1_UIClearGame
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function i1_UartCurMove
  7711  0DAA                     i1_UartCurMove:
  7712                           
  7713                           ;incstack = 0
  7714 ;; hardware stack exceeded
  7715                           ; Regs used in i1_UartCurMove: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7716                           ;i1UartCurMove@x stored from wreg
  7717  0DAA  00FC               	movwf	i1UartCurMove@x
  7718                           
  7719                           ;uart.h: 104: UartSendString("\033[");
  7720  0DAB  30DD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  7721  0DAC  160A  118A  23B9  120A  158A  	fcall	i1_UartSendString
  7722                           
  7723                           ;uart.h: 105: if (y > 0) {
  7724  0DB1  0879               	movf	i1UartCurMove@y,w
  7725  0DB2  3A80               	xorlw	128
  7726  0DB3  3E7F               	addlw	-129
  7727  0DB4  1C03               	skipc
  7728  0DB5  2DF4               	goto	i1l3123
  7729                           
  7730                           ;uart.h: 106: if (y / 10) UartSendChar(y / 10 + '0');
  7731  0DB6  300A               	movlw	10
  7732  0DB7  00F0               	movwf	i1___awdiv@divisor
  7733  0DB8  3000               	movlw	0
  7734  0DB9  00F1               	movwf	i1___awdiv@divisor+1
  7735  0DBA  0879               	movf	i1UartCurMove@y,w
  7736  0DBB  00F2               	movwf	i1___awdiv@dividend
  7737  0DBC  01F3               	clrf	i1___awdiv@dividend+1
  7738  0DBD  1BF2               	btfsc	i1___awdiv@dividend,7
  7739  0DBE  03F3               	decf	i1___awdiv@dividend+1,f
  7740  0DBF  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7741  0DC4  0870               	movf	?i1___awdiv,w
  7742  0DC5  0471               	iorwf	?i1___awdiv+1,w
  7743  0DC6  1903               	btfsc	3,2
  7744  0DC7  2DDD               	goto	i1l94
  7745  0DC8  300A               	movlw	10
  7746  0DC9  00F0               	movwf	i1___awdiv@divisor
  7747  0DCA  3000               	movlw	0
  7748  0DCB  00F1               	movwf	i1___awdiv@divisor+1
  7749  0DCC  0879               	movf	i1UartCurMove@y,w
  7750  0DCD  00F2               	movwf	i1___awdiv@dividend
  7751  0DCE  01F3               	clrf	i1___awdiv@dividend+1
  7752  0DCF  1BF2               	btfsc	i1___awdiv@dividend,7
  7753  0DD0  03F3               	decf	i1___awdiv@dividend+1,f
  7754  0DD1  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7755  0DD6  0870               	movf	?i1___awdiv,w
  7756  0DD7  3E30               	addlw	48
  7757  0DD8  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7758  0DDD                     i1l94:
  7759                           
  7760                           ;uart.h: 107: UartSendChar(y % 10 + '0');
  7761  0DDD  300A               	movlw	10
  7762  0DDE  00F0               	movwf	i1___awmod@divisor
  7763  0DDF  3000               	movlw	0
  7764  0DE0  00F1               	movwf	i1___awmod@divisor+1
  7765  0DE1  0879               	movf	i1UartCurMove@y,w
  7766  0DE2  00F2               	movwf	i1___awmod@dividend
  7767  0DE3  01F3               	clrf	i1___awmod@dividend+1
  7768  0DE4  1BF2               	btfsc	i1___awmod@dividend,7
  7769  0DE5  03F3               	decf	i1___awmod@dividend+1,f
  7770  0DE6  160A  118A  2640  120A  158A  	fcall	i1___awmod
  7771  0DEB  0870               	movf	?i1___awmod,w
  7772  0DEC  3E30               	addlw	48
  7773  0DED  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7774                           
  7775                           ;uart.h: 108: UartSendChar('B');
  7776  0DF2  3042               	movlw	66
  7777  0DF3  2E3A               	goto	L8
  7778  0DF4                     i1l3123:	
  7779                           ;uart.h: 109: } else {
  7780                           
  7781                           
  7782                           ;uart.h: 110: if (-y / 10) UartSendChar(-y / 10 + '0');
  7783  0DF4  30F6               	movlw	246
  7784  0DF5  00F0               	movwf	i1___awdiv@divisor
  7785  0DF6  30FF               	movlw	255
  7786  0DF7  00F1               	movwf	i1___awdiv@divisor+1
  7787  0DF8  0879               	movf	i1UartCurMove@y,w
  7788  0DF9  00F2               	movwf	i1___awdiv@dividend
  7789  0DFA  01F3               	clrf	i1___awdiv@dividend+1
  7790  0DFB  1BF2               	btfsc	i1___awdiv@dividend,7
  7791  0DFC  03F3               	decf	i1___awdiv@dividend+1,f
  7792  0DFD  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7793  0E02  0870               	movf	?i1___awdiv,w
  7794  0E03  0471               	iorwf	?i1___awdiv+1,w
  7795  0E04  1903               	btfsc	3,2
  7796  0E05  2E1B               	goto	i1l96
  7797  0E06  30F6               	movlw	246
  7798  0E07  00F0               	movwf	i1___awdiv@divisor
  7799  0E08  30FF               	movlw	255
  7800  0E09  00F1               	movwf	i1___awdiv@divisor+1
  7801  0E0A  0879               	movf	i1UartCurMove@y,w
  7802  0E0B  00F2               	movwf	i1___awdiv@dividend
  7803  0E0C  01F3               	clrf	i1___awdiv@dividend+1
  7804  0E0D  1BF2               	btfsc	i1___awdiv@dividend,7
  7805  0E0E  03F3               	decf	i1___awdiv@dividend+1,f
  7806  0E0F  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7807  0E14  0870               	movf	?i1___awdiv,w
  7808  0E15  3E30               	addlw	48
  7809  0E16  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7810  0E1B                     i1l96:
  7811                           
  7812                           ;uart.h: 111: UartSendChar(-y % 10 + '0');
  7813  0E1B  300A               	movlw	10
  7814  0E1C  00F0               	movwf	i1___awmod@divisor
  7815  0E1D  3000               	movlw	0
  7816  0E1E  00F1               	movwf	i1___awmod@divisor+1
  7817  0E1F  0879               	movf	i1UartCurMove@y,w
  7818  0E20  00FA               	movwf	??i1_UartCurMove
  7819  0E21  01FB               	clrf	??i1_UartCurMove+1
  7820  0E22  1BFA               	btfsc	??i1_UartCurMove,7
  7821  0E23  03FB               	decf	??i1_UartCurMove+1,f
  7822  0E24  09FA               	comf	??i1_UartCurMove,f
  7823  0E25  09FB               	comf	??i1_UartCurMove+1,f
  7824  0E26  0AFA               	incf	??i1_UartCurMove,f
  7825  0E27  1903               	skipnz
  7826  0E28  0AFB               	incf	??i1_UartCurMove+1,f
  7827  0E29  087A               	movf	??i1_UartCurMove,w
  7828  0E2A  00F2               	movwf	i1___awmod@dividend
  7829  0E2B  087B               	movf	??i1_UartCurMove+1,w
  7830  0E2C  00F3               	movwf	i1___awmod@dividend+1
  7831  0E2D  160A  118A  2640  120A  158A  	fcall	i1___awmod
  7832  0E32  0870               	movf	?i1___awmod,w
  7833  0E33  3E30               	addlw	48
  7834  0E34  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7835                           
  7836                           ;uart.h: 112: UartSendChar('A');
  7837  0E39  3041               	movlw	65
  7838  0E3A                     L8:
  7839  0E3A  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7840                           
  7841                           ;uart.h: 113: };uart.h: 114: UartSendString("\033[");
  7842  0E3F  30DD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  7843  0E40  160A  118A  23B9  120A  158A  	fcall	i1_UartSendString
  7844                           
  7845                           ;uart.h: 115: if (x > 0) {
  7846  0E45  087C               	movf	i1UartCurMove@x,w
  7847  0E46  3A80               	xorlw	128
  7848  0E47  3E7F               	addlw	-129
  7849  0E48  1C03               	skipc
  7850  0E49  2E8B               	goto	i1l3135
  7851                           
  7852                           ;uart.h: 116: if (x / 10) UartSendChar(x / 10 + '0');
  7853  0E4A  300A               	movlw	10
  7854  0E4B  00F0               	movwf	i1___awdiv@divisor
  7855  0E4C  3000               	movlw	0
  7856  0E4D  00F1               	movwf	i1___awdiv@divisor+1
  7857  0E4E  087C               	movf	i1UartCurMove@x,w
  7858  0E4F  00F2               	movwf	i1___awdiv@dividend
  7859  0E50  01F3               	clrf	i1___awdiv@dividend+1
  7860  0E51  1BF2               	btfsc	i1___awdiv@dividend,7
  7861  0E52  03F3               	decf	i1___awdiv@dividend+1,f
  7862  0E53  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7863  0E58  0870               	movf	?i1___awdiv,w
  7864  0E59  0471               	iorwf	?i1___awdiv+1,w
  7865  0E5A  1903               	btfsc	3,2
  7866  0E5B  2E71               	goto	i1l98
  7867  0E5C  300A               	movlw	10
  7868  0E5D  00F0               	movwf	i1___awdiv@divisor
  7869  0E5E  3000               	movlw	0
  7870  0E5F  00F1               	movwf	i1___awdiv@divisor+1
  7871  0E60  087C               	movf	i1UartCurMove@x,w
  7872  0E61  00F2               	movwf	i1___awdiv@dividend
  7873  0E62  01F3               	clrf	i1___awdiv@dividend+1
  7874  0E63  1BF2               	btfsc	i1___awdiv@dividend,7
  7875  0E64  03F3               	decf	i1___awdiv@dividend+1,f
  7876  0E65  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7877  0E6A  0870               	movf	?i1___awdiv,w
  7878  0E6B  3E30               	addlw	48
  7879  0E6C  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7880  0E71                     i1l98:
  7881                           
  7882                           ;uart.h: 117: UartSendChar(x % 10 + '0');
  7883  0E71  300A               	movlw	10
  7884  0E72  00F0               	movwf	i1___awmod@divisor
  7885  0E73  3000               	movlw	0
  7886  0E74  00F1               	movwf	i1___awmod@divisor+1
  7887  0E75  087C               	movf	i1UartCurMove@x,w
  7888  0E76  00F2               	movwf	i1___awmod@dividend
  7889  0E77  01F3               	clrf	i1___awmod@dividend+1
  7890  0E78  1BF2               	btfsc	i1___awmod@dividend,7
  7891  0E79  03F3               	decf	i1___awmod@dividend+1,f
  7892  0E7A  160A  118A  2640  120A  158A  	fcall	i1___awmod
  7893  0E7F  0870               	movf	?i1___awmod,w
  7894  0E80  3E30               	addlw	48
  7895  0E81  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7896                           
  7897                           ;uart.h: 118: UartSendChar('C');
  7898  0E86  3043               	movlw	67
  7899  0E87  160A  118A  22C1   	fcall	i1_UartSendChar
  7900                           
  7901                           ;uart.h: 119: } else {
  7902  0E8A  0008               	return
  7903  0E8B                     i1l3135:
  7904                           
  7905                           ;uart.h: 120: if (-x / 10) UartSendChar(-x / 10 + '0');
  7906  0E8B  30F6               	movlw	246
  7907  0E8C  00F0               	movwf	i1___awdiv@divisor
  7908  0E8D  30FF               	movlw	255
  7909  0E8E  00F1               	movwf	i1___awdiv@divisor+1
  7910  0E8F  087C               	movf	i1UartCurMove@x,w
  7911  0E90  00F2               	movwf	i1___awdiv@dividend
  7912  0E91  01F3               	clrf	i1___awdiv@dividend+1
  7913  0E92  1BF2               	btfsc	i1___awdiv@dividend,7
  7914  0E93  03F3               	decf	i1___awdiv@dividend+1,f
  7915  0E94  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7916  0E99  0870               	movf	?i1___awdiv,w
  7917  0E9A  0471               	iorwf	?i1___awdiv+1,w
  7918  0E9B  1903               	btfsc	3,2
  7919  0E9C  2EB2               	goto	i1l100
  7920  0E9D  30F6               	movlw	246
  7921  0E9E  00F0               	movwf	i1___awdiv@divisor
  7922  0E9F  30FF               	movlw	255
  7923  0EA0  00F1               	movwf	i1___awdiv@divisor+1
  7924  0EA1  087C               	movf	i1UartCurMove@x,w
  7925  0EA2  00F2               	movwf	i1___awdiv@dividend
  7926  0EA3  01F3               	clrf	i1___awdiv@dividend+1
  7927  0EA4  1BF2               	btfsc	i1___awdiv@dividend,7
  7928  0EA5  03F3               	decf	i1___awdiv@dividend+1,f
  7929  0EA6  160A  118A  26E0  120A  158A  	fcall	i1___awdiv
  7930  0EAB  0870               	movf	?i1___awdiv,w
  7931  0EAC  3E30               	addlw	48
  7932  0EAD  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7933  0EB2                     i1l100:
  7934                           
  7935                           ;uart.h: 121: UartSendChar(-x % 10 + '0');
  7936  0EB2  300A               	movlw	10
  7937  0EB3  00F0               	movwf	i1___awmod@divisor
  7938  0EB4  3000               	movlw	0
  7939  0EB5  00F1               	movwf	i1___awmod@divisor+1
  7940  0EB6  087C               	movf	i1UartCurMove@x,w
  7941  0EB7  00FA               	movwf	??i1_UartCurMove
  7942  0EB8  01FB               	clrf	??i1_UartCurMove+1
  7943  0EB9  1BFA               	btfsc	??i1_UartCurMove,7
  7944  0EBA  03FB               	decf	??i1_UartCurMove+1,f
  7945  0EBB  09FA               	comf	??i1_UartCurMove,f
  7946  0EBC  09FB               	comf	??i1_UartCurMove+1,f
  7947  0EBD  0AFA               	incf	??i1_UartCurMove,f
  7948  0EBE  1903               	skipnz
  7949  0EBF  0AFB               	incf	??i1_UartCurMove+1,f
  7950  0EC0  087A               	movf	??i1_UartCurMove,w
  7951  0EC1  00F2               	movwf	i1___awmod@dividend
  7952  0EC2  087B               	movf	??i1_UartCurMove+1,w
  7953  0EC3  00F3               	movwf	i1___awmod@dividend+1
  7954  0EC4  160A  118A  2640  120A  158A  	fcall	i1___awmod
  7955  0EC9  0870               	movf	?i1___awmod,w
  7956  0ECA  3E30               	addlw	48
  7957  0ECB  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  7958                           
  7959                           ;uart.h: 122: UartSendChar('D');
  7960  0ED0  3044               	movlw	68
  7961  0ED1  160A  118A  22C1   	fcall	i1_UartSendChar
  7962  0ED4  0008               	return
  7963  0ED5                     __end_ofi1_UartCurMove:
  7964                           
  7965                           	psect	text43
  7966  1640                     __ptext43:	
  7967 ;; *************** function i1___awmod *****************
  7968 ;; Defined at:
  7969 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  divisor         2    0[COMMON] int 
  7972 ;;  dividend        2    2[COMMON] int 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  sign            1    6[COMMON] unsigned char 
  7975 ;;  counter         1    5[COMMON] unsigned char 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  2    0[COMMON] int 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2, status,0
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7985 ;;      Params:         4       0       0       0       0
  7986 ;;      Locals:         2       0       0       0       0
  7987 ;;      Temps:          1       0       0       0       0
  7988 ;;      Totals:         7       0       0       0       0
  7989 ;;Total ram usage:        7 bytes
  7990 ;; Hardware stack levels used: 1
  7991 ;; This function calls:
  7992 ;;		Nothing
  7993 ;; This function is called by:
  7994 ;;		i1_UartCurMove
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function i1___awmod
  8000  1640                     i1___awmod:
  8001                           
  8002                           ;incstack = 0
  8003 ;; hardware stack exceeded
  8004                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8005  1640  01F6               	clrf	i1___awmod@sign
  8006  1641  1FF3               	btfss	i1___awmod@dividend+1,7
  8007  1642  2E4A               	goto	i1l2935
  8008  1643  09F2               	comf	i1___awmod@dividend,f
  8009  1644  09F3               	comf	i1___awmod@dividend+1,f
  8010  1645  0AF2               	incf	i1___awmod@dividend,f
  8011  1646  1903               	skipnz
  8012  1647  0AF3               	incf	i1___awmod@dividend+1,f
  8013  1648  01F6               	clrf	i1___awmod@sign
  8014  1649  0AF6               	incf	i1___awmod@sign,f
  8015  164A                     i1l2935:
  8016  164A  1FF1               	btfss	i1___awmod@divisor+1,7
  8017  164B  2E51               	goto	i1l2939
  8018  164C  09F0               	comf	i1___awmod@divisor,f
  8019  164D  09F1               	comf	i1___awmod@divisor+1,f
  8020  164E  0AF0               	incf	i1___awmod@divisor,f
  8021  164F  1903               	skipnz
  8022  1650  0AF1               	incf	i1___awmod@divisor+1,f
  8023  1651                     i1l2939:
  8024  1651  0870               	movf	i1___awmod@divisor,w
  8025  1652  0471               	iorwf	i1___awmod@divisor+1,w
  8026  1653  1903               	btfsc	3,2
  8027  1654  2E7E               	goto	i1l2957
  8028  1655  01F5               	clrf	i1___awmod@counter
  8029  1656  0AF5               	incf	i1___awmod@counter,f
  8030  1657                     i1l2947:
  8031  1657  1BF1               	btfsc	i1___awmod@divisor+1,7
  8032  1658  2E65               	goto	i1l2949
  8033  1659  3001               	movlw	1
  8034  165A                     u380_25:
  8035  165A  1003               	clrc
  8036  165B  0DF0               	rlf	i1___awmod@divisor,f
  8037  165C  0DF1               	rlf	i1___awmod@divisor+1,f
  8038  165D  3EFF               	addlw	-1
  8039  165E  1D03               	skipz
  8040  165F  2E5A               	goto	u380_25
  8041  1660  3001               	movlw	1
  8042  1661  00F4               	movwf	??i1___awmod
  8043  1662  0874               	movf	??i1___awmod,w
  8044  1663  07F5               	addwf	i1___awmod@counter,f
  8045  1664  2E57               	goto	i1l2947
  8046  1665                     i1l2949:
  8047  1665  0871               	movf	i1___awmod@divisor+1,w
  8048  1666  0273               	subwf	i1___awmod@dividend+1,w
  8049  1667  1D03               	skipz
  8050  1668  2E6B               	goto	u382_25
  8051  1669  0870               	movf	i1___awmod@divisor,w
  8052  166A  0272               	subwf	i1___awmod@dividend,w
  8053  166B                     u382_25:
  8054  166B  1C03               	skipc
  8055  166C  2E73               	goto	i1l2953
  8056  166D  0870               	movf	i1___awmod@divisor,w
  8057  166E  02F2               	subwf	i1___awmod@dividend,f
  8058  166F  0871               	movf	i1___awmod@divisor+1,w
  8059  1670  1C03               	skipc
  8060  1671  03F3               	decf	i1___awmod@dividend+1,f
  8061  1672  02F3               	subwf	i1___awmod@dividend+1,f
  8062  1673                     i1l2953:
  8063  1673  3001               	movlw	1
  8064  1674                     u383_25:
  8065  1674  1003               	clrc
  8066  1675  0CF1               	rrf	i1___awmod@divisor+1,f
  8067  1676  0CF0               	rrf	i1___awmod@divisor,f
  8068  1677  3EFF               	addlw	-1
  8069  1678  1D03               	skipz
  8070  1679  2E74               	goto	u383_25
  8071  167A  3001               	movlw	1
  8072  167B  02F5               	subwf	i1___awmod@counter,f
  8073  167C  1D03               	btfss	3,2
  8074  167D  2E65               	goto	i1l2949
  8075  167E                     i1l2957:
  8076  167E  0876               	movf	i1___awmod@sign,w
  8077  167F  1903               	btfsc	3,2
  8078  1680  2E86               	goto	i1l2961
  8079  1681  09F2               	comf	i1___awmod@dividend,f
  8080  1682  09F3               	comf	i1___awmod@dividend+1,f
  8081  1683  0AF2               	incf	i1___awmod@dividend,f
  8082  1684  1903               	skipnz
  8083  1685  0AF3               	incf	i1___awmod@dividend+1,f
  8084  1686                     i1l2961:
  8085  1686  0873               	movf	i1___awmod@dividend+1,w
  8086  1687  00F1               	movwf	?i1___awmod+1
  8087  1688  0872               	movf	i1___awmod@dividend,w
  8088  1689  00F0               	movwf	?i1___awmod
  8089  168A  0008               	return
  8090  168B                     __end_ofi1___awmod:
  8091                           
  8092                           	psect	text44
  8093  16E0                     __ptext44:	
  8094 ;; *************** function i1___awdiv *****************
  8095 ;; Defined at:
  8096 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  divisor         2    0[COMMON] int 
  8099 ;;  dividend        2    2[COMMON] int 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  quotient        2    7[COMMON] int 
  8102 ;;  sign            1    6[COMMON] unsigned char 
  8103 ;;  counter         1    5[COMMON] unsigned char 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  2    0[COMMON] int 
  8106 ;; Registers used:
  8107 ;;		wreg, status,2, status,0
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8113 ;;      Params:         4       0       0       0       0
  8114 ;;      Locals:         4       0       0       0       0
  8115 ;;      Temps:          1       0       0       0       0
  8116 ;;      Totals:         9       0       0       0       0
  8117 ;;Total ram usage:        9 bytes
  8118 ;; Hardware stack levels used: 1
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		i1_UartCurMove
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           
  8127                           ;psect for function i1___awdiv
  8128  16E0                     i1___awdiv:
  8129                           
  8130                           ;incstack = 0
  8131 ;; hardware stack exceeded
  8132                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  8133  16E0  01F6               	clrf	i1___awdiv@sign
  8134  16E1  1FF1               	btfss	i1___awdiv@divisor+1,7
  8135  16E2  2EEA               	goto	i1l2891
  8136  16E3  09F0               	comf	i1___awdiv@divisor,f
  8137  16E4  09F1               	comf	i1___awdiv@divisor+1,f
  8138  16E5  0AF0               	incf	i1___awdiv@divisor,f
  8139  16E6  1903               	skipnz
  8140  16E7  0AF1               	incf	i1___awdiv@divisor+1,f
  8141  16E8  01F6               	clrf	i1___awdiv@sign
  8142  16E9  0AF6               	incf	i1___awdiv@sign,f
  8143  16EA                     i1l2891:
  8144  16EA  1FF3               	btfss	i1___awdiv@dividend+1,7
  8145  16EB  2EF5               	goto	i1l2897
  8146  16EC  09F2               	comf	i1___awdiv@dividend,f
  8147  16ED  09F3               	comf	i1___awdiv@dividend+1,f
  8148  16EE  0AF2               	incf	i1___awdiv@dividend,f
  8149  16EF  1903               	skipnz
  8150  16F0  0AF3               	incf	i1___awdiv@dividend+1,f
  8151  16F1  3001               	movlw	1
  8152  16F2  00F4               	movwf	??i1___awdiv
  8153  16F3  0874               	movf	??i1___awdiv,w
  8154  16F4  06F6               	xorwf	i1___awdiv@sign,f
  8155  16F5                     i1l2897:
  8156  16F5  01F7               	clrf	i1___awdiv@quotient
  8157  16F6  01F8               	clrf	i1___awdiv@quotient+1
  8158  16F7  0870               	movf	i1___awdiv@divisor,w
  8159  16F8  0471               	iorwf	i1___awdiv@divisor+1,w
  8160  16F9  1903               	btfsc	3,2
  8161  16FA  2F2C               	goto	i1l2919
  8162  16FB  01F5               	clrf	i1___awdiv@counter
  8163  16FC  0AF5               	incf	i1___awdiv@counter,f
  8164  16FD                     i1l2907:
  8165  16FD  1BF1               	btfsc	i1___awdiv@divisor+1,7
  8166  16FE  2F0B               	goto	i1l2909
  8167  16FF  3001               	movlw	1
  8168  1700                     u370_25:
  8169  1700  1003               	clrc
  8170  1701  0DF0               	rlf	i1___awdiv@divisor,f
  8171  1702  0DF1               	rlf	i1___awdiv@divisor+1,f
  8172  1703  3EFF               	addlw	-1
  8173  1704  1D03               	skipz
  8174  1705  2F00               	goto	u370_25
  8175  1706  3001               	movlw	1
  8176  1707  00F4               	movwf	??i1___awdiv
  8177  1708  0874               	movf	??i1___awdiv,w
  8178  1709  07F5               	addwf	i1___awdiv@counter,f
  8179  170A  2EFD               	goto	i1l2907
  8180  170B                     i1l2909:
  8181  170B  3001               	movlw	1
  8182  170C                     u372_25:
  8183  170C  1003               	clrc
  8184  170D  0DF7               	rlf	i1___awdiv@quotient,f
  8185  170E  0DF8               	rlf	i1___awdiv@quotient+1,f
  8186  170F  3EFF               	addlw	-1
  8187  1710  1D03               	skipz
  8188  1711  2F0C               	goto	u372_25
  8189  1712  0871               	movf	i1___awdiv@divisor+1,w
  8190  1713  0273               	subwf	i1___awdiv@dividend+1,w
  8191  1714  1D03               	skipz
  8192  1715  2F18               	goto	u373_25
  8193  1716  0870               	movf	i1___awdiv@divisor,w
  8194  1717  0272               	subwf	i1___awdiv@dividend,w
  8195  1718                     u373_25:
  8196  1718  1C03               	skipc
  8197  1719  2F21               	goto	i1l2915
  8198  171A  0870               	movf	i1___awdiv@divisor,w
  8199  171B  02F2               	subwf	i1___awdiv@dividend,f
  8200  171C  0871               	movf	i1___awdiv@divisor+1,w
  8201  171D  1C03               	skipc
  8202  171E  03F3               	decf	i1___awdiv@dividend+1,f
  8203  171F  02F3               	subwf	i1___awdiv@dividend+1,f
  8204  1720  1477               	bsf	i1___awdiv@quotient,0
  8205  1721                     i1l2915:
  8206  1721  3001               	movlw	1
  8207  1722                     u374_25:
  8208  1722  1003               	clrc
  8209  1723  0CF1               	rrf	i1___awdiv@divisor+1,f
  8210  1724  0CF0               	rrf	i1___awdiv@divisor,f
  8211  1725  3EFF               	addlw	-1
  8212  1726  1D03               	skipz
  8213  1727  2F22               	goto	u374_25
  8214  1728  3001               	movlw	1
  8215  1729  02F5               	subwf	i1___awdiv@counter,f
  8216  172A  1D03               	btfss	3,2
  8217  172B  2F0B               	goto	i1l2909
  8218  172C                     i1l2919:
  8219  172C  0876               	movf	i1___awdiv@sign,w
  8220  172D  1903               	btfsc	3,2
  8221  172E  2F34               	goto	i1l2923
  8222  172F  09F7               	comf	i1___awdiv@quotient,f
  8223  1730  09F8               	comf	i1___awdiv@quotient+1,f
  8224  1731  0AF7               	incf	i1___awdiv@quotient,f
  8225  1732  1903               	skipnz
  8226  1733  0AF8               	incf	i1___awdiv@quotient+1,f
  8227  1734                     i1l2923:
  8228  1734  0878               	movf	i1___awdiv@quotient+1,w
  8229  1735  00F1               	movwf	?i1___awdiv+1
  8230  1736  0877               	movf	i1___awdiv@quotient,w
  8231  1737  00F0               	movwf	?i1___awdiv
  8232  1738  0008               	return
  8233  1739                     __end_ofi1___awdiv:
  8234                           
  8235                           	psect	text45
  8236  099E                     __ptext45:	
  8237 ;; *************** function __wipeShape *****************
  8238 ;; Defined at:
  8239 ;;		line 117 in file "tetris.h"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  t               1    wreg     PTR struct Tetris
  8242 ;;		 -> game(32), 
  8243 ;;  shape           1    0[BANK0 ] unsigned char 
  8244 ;;  x               1    1[BANK0 ] unsigned char 
  8245 ;;  y               1    2[BANK0 ] unsigned char 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  t               1    7[BANK0 ] PTR struct Tetris
  8248 ;;		 -> game(32), 
  8249 ;;  p               2   12[BANK0 ] unsigned int 
  8250 ;;  by              2   10[BANK0 ] unsigned int 
  8251 ;;  bx              2    8[BANK0 ] unsigned int 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : B00/0
  8258 ;;		On exit  : 300/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8261 ;;      Params:         0       3       0       0       0
  8262 ;;      Locals:         0       7       0       0       0
  8263 ;;      Temps:          0       4       0       0       0
  8264 ;;      Totals:         0      14       0       0       0
  8265 ;;Total ram usage:       14 bytes
  8266 ;; Hardware stack levels used: 1
  8267 ;; Hardware stack levels required when called: 4
  8268 ;; This function calls:
  8269 ;;		i1__getBlock
  8270 ;;		i1__wipeBlock
  8271 ;; This function is called by:
  8272 ;;		_TetrisMove
  8273 ;;		_TetrisRotate
  8274 ;;		_TetrisNext
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function __wipeShape
  8280  099E                     __wipeShape:
  8281                           
  8282                           ;incstack = 0
  8283 ;; hardware stack exceeded
  8284                           ; Regs used in __wipeShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8285                           ;__wipeShape@t stored from wreg
  8286  099E  00A7               	movwf	__wipeShape@t
  8287                           
  8288                           ;tetris.h: 119: for (uint16_t p=table[shape],bx,by;bx=(uint8_t)(x+p%4),by=(uint8_t)(y+p/
      +                          4%4),p;p>>=4) {
  8289  099F  0820               	movf	__wipeShape@shape,w
  8290  09A0  00A3               	movwf	??__wipeShape
  8291  09A1  0723               	addwf	??__wipeShape,w
  8292  09A2  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  8293  09A3  0084               	movwf	4
  8294  09A4  120A  158A  2000  120A  158A  	fcall	stringdir
  8295  09A9  00AC               	movwf	__wipeShape@p
  8296  09AA  120A  158A  2000  120A  158A  	fcall	stringdir
  8297  09AF  00AD               	movwf	__wipeShape@p+1
  8298  09B0                     i1l3057:
  8299  09B0  3003               	movlw	3
  8300  09B1  052C               	andwf	__wipeShape@p,w
  8301  09B2  00A3               	movwf	??__wipeShape
  8302  09B3  0821               	movf	__wipeShape@x,w
  8303  09B4  0723               	addwf	??__wipeShape,w
  8304  09B5  00A4               	movwf	??__wipeShape+1
  8305  09B6  01A5               	clrf	??__wipeShape+2
  8306  09B7  0824               	movf	??__wipeShape+1,w
  8307  09B8  00A8               	movwf	__wipeShape@bx
  8308  09B9  0825               	movf	??__wipeShape+2,w
  8309  09BA  00A9               	movwf	__wipeShape@bx+1
  8310  09BB  082C               	movf	__wipeShape@p,w
  8311  09BC  00A3               	movwf	??__wipeShape
  8312  09BD  3002               	movlw	2
  8313  09BE                     u406_25:
  8314  09BE  1003               	clrc
  8315  09BF  0CA3               	rrf	??__wipeShape,f
  8316  09C0  3EFF               	addlw	-1
  8317  09C1  1D03               	skipz
  8318  09C2  29BE               	goto	u406_25
  8319  09C3  3003               	movlw	3
  8320  09C4  0523               	andwf	??__wipeShape,w
  8321  09C5  00A4               	movwf	??__wipeShape+1
  8322  09C6  0822               	movf	__wipeShape@y,w
  8323  09C7  0724               	addwf	??__wipeShape+1,w
  8324  09C8  00A5               	movwf	??__wipeShape+2
  8325  09C9  01A6               	clrf	??__wipeShape+3
  8326  09CA  0825               	movf	??__wipeShape+2,w
  8327  09CB  00AA               	movwf	__wipeShape@by
  8328  09CC  0826               	movf	??__wipeShape+3,w
  8329  09CD  00AB               	movwf	__wipeShape@by+1
  8330  09CE  082C               	movf	__wipeShape@p,w
  8331  09CF  042D               	iorwf	__wipeShape@p+1,w
  8332  09D0  1903               	btfsc	3,2
  8333  09D1  0008               	return
  8334                           
  8335                           ;tetris.h: 120: if (bx < 10 && by < 20 && !_getBlock(t, bx, by)) {
  8336  09D2  3000               	movlw	0
  8337  09D3  0229               	subwf	__wipeShape@bx+1,w
  8338  09D4  300A               	movlw	10
  8339  09D5  1903               	skipnz
  8340  09D6  0228               	subwf	__wipeShape@bx,w
  8341  09D7  1803               	skipnc
  8342  09D8  29FB               	goto	i1l3055
  8343  09D9  3000               	movlw	0
  8344  09DA  022B               	subwf	__wipeShape@by+1,w
  8345  09DB  3014               	movlw	20
  8346  09DC  1903               	skipnz
  8347  09DD  022A               	subwf	__wipeShape@by,w
  8348  09DE  1803               	skipnc
  8349  09DF  29FB               	goto	i1l3055
  8350  09E0  0828               	movf	__wipeShape@bx,w
  8351  09E1  00A3               	movwf	??__wipeShape
  8352  09E2  0823               	movf	??__wipeShape,w
  8353  09E3  00F4               	movwf	i1__getBlock@x
  8354  09E4  082A               	movf	__wipeShape@by,w
  8355  09E5  00A4               	movwf	??__wipeShape+1
  8356  09E6  0824               	movf	??__wipeShape+1,w
  8357  09E7  00F5               	movwf	i1__getBlock@y
  8358  09E8  0827               	movf	__wipeShape@t,w
  8359  09E9  160A  118A  25A0  120A  158A  	fcall	i1__getBlock
  8360  09EE  3A00               	xorlw	0
  8361  09EF  1D03               	skipz
  8362  09F0  29FB               	goto	i1l3055
  8363                           
  8364                           ;tetris.h: 121: _wipeBlock(bx, by);
  8365  09F1  082A               	movf	__wipeShape@by,w
  8366  09F2  00A3               	movwf	??__wipeShape
  8367  09F3  0823               	movf	??__wipeShape,w
  8368  09F4  00FA               	movwf	i1__wipeBlock@y
  8369  09F5  0828               	movf	__wipeShape@bx,w
  8370  09F6  160A  118A  234E  120A  158A  	fcall	i1__wipeBlock
  8371  09FB                     i1l3055:
  8372  09FB  3004               	movlw	4
  8373  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  8374  09FD                     u405_25:
  8375  09FD  1003               	clrc
  8376  09FE  0CAD               	rrf	__wipeShape@p+1,f
  8377  09FF  0CAC               	rrf	__wipeShape@p,f
  8378  0A00  3EFF               	addlw	-1
  8379  0A01  1D03               	skipz
  8380  0A02  29FD               	goto	u405_25
  8381  0A03  29B0               	goto	i1l3057
  8382  0A04                     __end_of__wipeShape:
  8383                           
  8384                           	psect	text46
  8385  134E                     __ptext46:	
  8386 ;; *************** function i1__wipeBlock *****************
  8387 ;; Defined at:
  8388 ;;		line 103 in file "tetris.h"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  x               1    wreg     unsigned char 
  8391 ;;  y               1   10[COMMON] unsigned char 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  x               1   13[COMMON] unsigned char 
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  1    wreg      void 
  8396 ;; Registers used:
  8397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 300/0
  8400 ;;		On exit  : 200/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8403 ;;      Params:         1       0       0       0       0
  8404 ;;      Locals:         1       0       0       0       0
  8405 ;;      Temps:          2       0       0       0       0
  8406 ;;      Totals:         4       0       0       0       0
  8407 ;;Total ram usage:        4 bytes
  8408 ;; Hardware stack levels used: 1
  8409 ;; Hardware stack levels required when called: 3
  8410 ;; This function calls:
  8411 ;;		i1_UartCurSet
  8412 ;;		i1_UartSendString
  8413 ;; This function is called by:
  8414 ;;		__wipeShape
  8415 ;;		i1__shapeNext
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           
  8420                           ;psect for function i1__wipeBlock
  8421  134E                     i1__wipeBlock:
  8422                           
  8423                           ;incstack = 0
  8424 ;; hardware stack exceeded
  8425                           ; Regs used in i1__wipeBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8426                           ;i1__wipeBlock@x stored from wreg
  8427  134E  00FD               	movwf	i1__wipeBlock@x
  8428                           
  8429                           ;tetris.h: 104: UartCurSet(2 * x + 24, y + 2);
  8430  134F  087A               	movf	i1__wipeBlock@y,w
  8431  1350  3E02               	addlw	2
  8432  1351  00FB               	movwf	??i1__wipeBlock
  8433  1352  087B               	movf	??i1__wipeBlock,w
  8434  1353  00F7               	movwf	i1UartCurSet@y
  8435  1354  087D               	movf	i1__wipeBlock@x,w
  8436  1355  00FC               	movwf	??i1__wipeBlock+1
  8437  1356  077C               	addwf	??i1__wipeBlock+1,w
  8438  1357  3E18               	addlw	24
  8439  1358  120A  158A  233A  160A  118A  	fcall	i1_UartCurSet
  8440                           
  8441                           ;tetris.h: 105: UartSendString("  ");
  8442  135D  3086               	movlw	(low (((STR_13+18)-__stringbase)| (0+32768)))& (0+255)
  8443  135E  160A  118A  23B9   	fcall	i1_UartSendString
  8444  1361  0008               	return
  8445  1362                     __end_ofi1__wipeBlock:
  8446                           
  8447                           	psect	text47
  8448  0B3A                     __ptext47:	
  8449 ;; *************** function i1_UartCurSet *****************
  8450 ;; Defined at:
  8451 ;;		line 93 in file "uart.h"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  x               1    wreg     unsigned char 
  8454 ;;  y               1    7[COMMON] unsigned char 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  x               1    9[COMMON] unsigned char 
  8457 ;; Return value:  Size  Location     Type
  8458 ;;                  1    wreg      void 
  8459 ;; Registers used:
  8460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 300/0
  8463 ;;		On exit  : 300/100
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8466 ;;      Params:         1       0       0       0       0
  8467 ;;      Locals:         1       0       0       0       0
  8468 ;;      Temps:          1       0       0       0       0
  8469 ;;      Totals:         3       0       0       0       0
  8470 ;;Total ram usage:        3 bytes
  8471 ;; Hardware stack levels used: 1
  8472 ;; Hardware stack levels required when called: 2
  8473 ;; This function calls:
  8474 ;;		i1_UartSendChar
  8475 ;;		i1_UartSendString
  8476 ;;		i1___lbdiv
  8477 ;;		i1___lbmod
  8478 ;; This function is called by:
  8479 ;;		_TetrisMove
  8480 ;;		_TetrisNext
  8481 ;;		i1_UIClearGame
  8482 ;;		i1__drawBlock
  8483 ;;		i1__wipeBlock
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function i1_UartCurSet
  8489  0B3A                     i1_UartCurSet:
  8490                           
  8491                           ;incstack = 0
  8492 ;; hardware stack exceeded
  8493                           ; Regs used in i1_UartCurSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8494                           ;i1UartCurSet@x stored from wreg
  8495  0B3A  00F9               	movwf	i1UartCurSet@x
  8496                           
  8497                           ;uart.h: 94: UartSendString("\033[");
  8498  0B3B  30DD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  8499  0B3C  160A  118A  23B9  120A  158A  	fcall	i1_UartSendString
  8500                           
  8501                           ;uart.h: 95: if (y / 10) UartSendChar(y / 10 + '0');
  8502  0B41  300A               	movlw	10
  8503  0B42  00F8               	movwf	??i1_UartCurSet
  8504  0B43  0878               	movf	??i1_UartCurSet,w
  8505  0B44  00F0               	movwf	i1___lbdiv@divisor
  8506  0B45  0877               	movf	i1UartCurSet@y,w
  8507  0B46  160A  118A  2412  120A  158A  	fcall	i1___lbdiv
  8508  0B4B  3A00               	xorlw	0
  8509  0B4C  1903               	skipnz
  8510  0B4D  2B5E               	goto	i1l88
  8511  0B4E  300A               	movlw	10
  8512  0B4F  00F8               	movwf	??i1_UartCurSet
  8513  0B50  0878               	movf	??i1_UartCurSet,w
  8514  0B51  00F0               	movwf	i1___lbdiv@divisor
  8515  0B52  0877               	movf	i1UartCurSet@y,w
  8516  0B53  160A  118A  2412  120A  158A  	fcall	i1___lbdiv
  8517  0B58  3E30               	addlw	48
  8518  0B59  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  8519  0B5E                     i1l88:
  8520                           
  8521                           ;uart.h: 96: UartSendChar(y % 10 + '0');
  8522  0B5E  300A               	movlw	10
  8523  0B5F  00F8               	movwf	??i1_UartCurSet
  8524  0B60  0878               	movf	??i1_UartCurSet,w
  8525  0B61  00F0               	movwf	i1___lbmod@divisor
  8526  0B62  0877               	movf	i1UartCurSet@y,w
  8527  0B63  160A  118A  2454  120A  158A  	fcall	i1___lbmod
  8528  0B68  3E30               	addlw	48
  8529  0B69  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  8530                           
  8531                           ;uart.h: 97: UartSendChar(';');
  8532  0B6E  303B               	movlw	59
  8533  0B6F  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  8534                           
  8535                           ;uart.h: 98: if (x / 10) UartSendChar(x / 10 + '0');
  8536  0B74  300A               	movlw	10
  8537  0B75  00F8               	movwf	??i1_UartCurSet
  8538  0B76  0878               	movf	??i1_UartCurSet,w
  8539  0B77  00F0               	movwf	i1___lbdiv@divisor
  8540  0B78  0879               	movf	i1UartCurSet@x,w
  8541  0B79  160A  118A  2412  120A  158A  	fcall	i1___lbdiv
  8542  0B7E  3A00               	xorlw	0
  8543  0B7F  1903               	skipnz
  8544  0B80  2B91               	goto	i1l89
  8545  0B81  300A               	movlw	10
  8546  0B82  00F8               	movwf	??i1_UartCurSet
  8547  0B83  0878               	movf	??i1_UartCurSet,w
  8548  0B84  00F0               	movwf	i1___lbdiv@divisor
  8549  0B85  0879               	movf	i1UartCurSet@x,w
  8550  0B86  160A  118A  2412  120A  158A  	fcall	i1___lbdiv
  8551  0B8B  3E30               	addlw	48
  8552  0B8C  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  8553  0B91                     i1l89:
  8554                           
  8555                           ;uart.h: 99: UartSendChar(x % 10 + '0');
  8556  0B91  300A               	movlw	10
  8557  0B92  00F8               	movwf	??i1_UartCurSet
  8558  0B93  0878               	movf	??i1_UartCurSet,w
  8559  0B94  00F0               	movwf	i1___lbmod@divisor
  8560  0B95  0879               	movf	i1UartCurSet@x,w
  8561  0B96  160A  118A  2454  120A  158A  	fcall	i1___lbmod
  8562  0B9B  3E30               	addlw	48
  8563  0B9C  160A  118A  22C1  120A  158A  	fcall	i1_UartSendChar
  8564                           
  8565                           ;uart.h: 100: UartSendChar('H');
  8566  0BA1  3048               	movlw	72
  8567  0BA2  160A  118A  22C1   	fcall	i1_UartSendChar
  8568  0BA5  0008               	return
  8569  0BA6                     __end_ofi1_UartCurSet:
  8570                           
  8571                           	psect	text48
  8572  1454                     __ptext48:	
  8573 ;; *************** function i1___lbmod *****************
  8574 ;; Defined at:
  8575 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbmod.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;  dividend        1    wreg     unsigned char 
  8578 ;;  divisor         1    0[COMMON] unsigned char 
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;  dividend        1    4[COMMON] unsigned char 
  8581 ;;  rem             1    6[COMMON] unsigned char 
  8582 ;;  counter         1    5[COMMON] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  1    wreg      unsigned char 
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8592 ;;      Params:         1       0       0       0       0
  8593 ;;      Locals:         3       0       0       0       0
  8594 ;;      Temps:          3       0       0       0       0
  8595 ;;      Totals:         7       0       0       0       0
  8596 ;;Total ram usage:        7 bytes
  8597 ;; Hardware stack levels used: 1
  8598 ;; This function calls:
  8599 ;;		Nothing
  8600 ;; This function is called by:
  8601 ;;		i1_UartCurSet
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           
  8606                           ;psect for function i1___lbmod
  8607  1454                     i1___lbmod:
  8608                           
  8609                           ;incstack = 0
  8610 ;; hardware stack exceeded
  8611                           ; Regs used in i1___lbmod: [wreg+status,2+status,0]
  8612                           ;i1___lbmod@dividend stored from wreg
  8613  1454  00F4               	movwf	i1___lbmod@dividend
  8614  1455  3008               	movlw	8
  8615  1456  00F1               	movwf	??i1___lbmod
  8616  1457  0871               	movf	??i1___lbmod,w
  8617  1458  00F5               	movwf	i1___lbmod@counter
  8618  1459  01F6               	clrf	i1___lbmod@rem
  8619  145A                     i1l2579:
  8620  145A  0874               	movf	i1___lbmod@dividend,w
  8621  145B  00F1               	movwf	??i1___lbmod
  8622  145C  3007               	movlw	7
  8623  145D                     u299_25:
  8624  145D  1003               	clrc
  8625  145E  0CF1               	rrf	??i1___lbmod,f
  8626  145F  3EFF               	addlw	-1
  8627  1460  1D03               	skipz
  8628  1461  2C5D               	goto	u299_25
  8629  1462  0876               	movf	i1___lbmod@rem,w
  8630  1463  00F2               	movwf	??i1___lbmod+1
  8631  1464  0772               	addwf	??i1___lbmod+1,w
  8632  1465  0471               	iorwf	??i1___lbmod,w
  8633  1466  00F3               	movwf	??i1___lbmod+2
  8634  1467  0873               	movf	??i1___lbmod+2,w
  8635  1468  00F6               	movwf	i1___lbmod@rem
  8636  1469  1003               	clrc
  8637  146A  0DF4               	rlf	i1___lbmod@dividend,f
  8638  146B  0870               	movf	i1___lbmod@divisor,w
  8639  146C  0276               	subwf	i1___lbmod@rem,w
  8640  146D  1C03               	skipc
  8641  146E  2C71               	goto	i1l860
  8642  146F  0870               	movf	i1___lbmod@divisor,w
  8643  1470  02F6               	subwf	i1___lbmod@rem,f
  8644  1471                     i1l860:
  8645  1471  3001               	movlw	1
  8646  1472  02F5               	subwf	i1___lbmod@counter,f
  8647  1473  1D03               	btfss	3,2
  8648  1474  2C5A               	goto	i1l2579
  8649  1475  0876               	movf	i1___lbmod@rem,w
  8650  1476  0008               	return
  8651  1477                     __end_ofi1___lbmod:
  8652                           
  8653                           	psect	text49
  8654  1412                     __ptext49:	
  8655 ;; *************** function i1___lbdiv *****************
  8656 ;; Defined at:
  8657 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbdiv.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  dividend        1    wreg     unsigned char 
  8660 ;;  divisor         1    0[COMMON] unsigned char 
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;  dividend        1    2[COMMON] unsigned char 
  8663 ;;  quotient        1    4[COMMON] unsigned char 
  8664 ;;  counter         1    3[COMMON] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      unsigned char 
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8674 ;;      Params:         1       0       0       0       0
  8675 ;;      Locals:         3       0       0       0       0
  8676 ;;      Temps:          1       0       0       0       0
  8677 ;;      Totals:         5       0       0       0       0
  8678 ;;Total ram usage:        5 bytes
  8679 ;; Hardware stack levels used: 1
  8680 ;; This function calls:
  8681 ;;		Nothing
  8682 ;; This function is called by:
  8683 ;;		i1_UartCurSet
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function i1___lbdiv
  8689  1412                     i1___lbdiv:
  8690                           
  8691                           ;incstack = 0
  8692 ;; hardware stack exceeded
  8693                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
  8694                           ;i1___lbdiv@dividend stored from wreg
  8695  1412  00F2               	movwf	i1___lbdiv@dividend
  8696  1413  01F4               	clrf	i1___lbdiv@quotient
  8697  1414  0870               	movf	i1___lbdiv@divisor,w
  8698  1415  1903               	btfsc	3,2
  8699  1416  2C31               	goto	i1l2571
  8700  1417  01F3               	clrf	i1___lbdiv@counter
  8701  1418  0AF3               	incf	i1___lbdiv@counter,f
  8702  1419                     i1l2559:
  8703  1419  1BF0               	btfsc	i1___lbdiv@divisor,7
  8704  141A  2C22               	goto	i1l2561
  8705  141B  1003               	clrc
  8706  141C  0DF0               	rlf	i1___lbdiv@divisor,f
  8707  141D  3001               	movlw	1
  8708  141E  00F1               	movwf	??i1___lbdiv
  8709  141F  0871               	movf	??i1___lbdiv,w
  8710  1420  07F3               	addwf	i1___lbdiv@counter,f
  8711  1421  2C19               	goto	i1l2559
  8712  1422                     i1l2561:
  8713  1422  1003               	clrc
  8714  1423  0DF4               	rlf	i1___lbdiv@quotient,f
  8715  1424  0870               	movf	i1___lbdiv@divisor,w
  8716  1425  0272               	subwf	i1___lbdiv@dividend,w
  8717  1426  1C03               	skipc
  8718  1427  2C2C               	goto	L9
  8719  1428  0870               	movf	i1___lbdiv@divisor,w
  8720  1429  02F2               	subwf	i1___lbdiv@dividend,f
  8721  142A  1474               	bsf	i1___lbdiv@quotient,0
  8722  142B  1003               	clrc
  8723  142C                     L9:
  8724  142C  0CF0               	rrf	i1___lbdiv@divisor,f
  8725  142D  3001               	movlw	1
  8726  142E  02F3               	subwf	i1___lbdiv@counter,f
  8727  142F  1D03               	btfss	3,2
  8728  1430  2C22               	goto	i1l2561
  8729  1431                     i1l2571:
  8730  1431  0874               	movf	i1___lbdiv@quotient,w
  8731  1432  0008               	return
  8732  1433                     __end_ofi1___lbdiv:
  8733                           
  8734                           	psect	text50
  8735  13B9                     __ptext50:	
  8736 ;; *************** function i1_UartSendString *****************
  8737 ;; Defined at:
  8738 ;;		line 69 in file "uart.h"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  str             1    wreg     PTR const unsigned char 
  8741 ;;		 -> STR_24(3), STR_23(7), STR_22(13), STR_21(4), 
  8742 ;;		 -> STR_20(4), STR_19(4), STR_18(17), STR_17(4), 
  8743 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(21), 
  8744 ;;		 -> STR_12(3), STR_11(22), STR_10(21), STR_9(22), 
  8745 ;;		 -> STR_8(20), STR_7(3), STR_6(2), STR_5(3), 
  8746 ;;		 -> STR_4(3), STR_3(3), STR_2(3), STR_1(3), 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  str             1    2[COMMON] PTR const unsigned char 
  8749 ;;		 -> STR_24(3), STR_23(7), STR_22(13), STR_21(4), 
  8750 ;;		 -> STR_20(4), STR_19(4), STR_18(17), STR_17(4), 
  8751 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(21), 
  8752 ;;		 -> STR_12(3), STR_11(22), STR_10(21), STR_9(22), 
  8753 ;;		 -> STR_8(20), STR_7(3), STR_6(2), STR_5(3), 
  8754 ;;		 -> STR_4(3), STR_3(3), STR_2(3), STR_1(3), 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  1    wreg      void 
  8757 ;; Registers used:
  8758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 200/0
  8761 ;;		On exit  : 200/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8764 ;;      Params:         0       0       0       0       0
  8765 ;;      Locals:         1       0       0       0       0
  8766 ;;      Temps:          1       0       0       0       0
  8767 ;;      Totals:         2       0       0       0       0
  8768 ;;Total ram usage:        2 bytes
  8769 ;; Hardware stack levels used: 1
  8770 ;; Hardware stack levels required when called: 1
  8771 ;; This function calls:
  8772 ;;		i1_UartSendChar
  8773 ;; This function is called by:
  8774 ;;		i1_UartCurSet
  8775 ;;		i1_UartCurMove
  8776 ;;		i1_UIClearGame
  8777 ;;		i1__drawBlock
  8778 ;;		i1__wipeBlock
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           
  8783                           ;psect for function i1_UartSendString
  8784  13B9                     i1_UartSendString:
  8785                           
  8786                           ;incstack = 0
  8787 ;; hardware stack exceeded
  8788                           ; Regs used in i1_UartSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8789                           ;i1UartSendString@str stored from wreg
  8790  13B9  00F2               	movwf	i1UartSendString@str
  8791  13BA                     i1l2525:	
  8792                           ;uart.h: 70: while (*str) {
  8793                           
  8794  13BA  0872               	movf	i1UartSendString@str,w
  8795  13BB  0084               	movwf	4
  8796  13BC  120A  158A  2000  160A  118A  	fcall	stringdir
  8797  13C1  3A00               	xorlw	0
  8798  13C2  1903               	btfsc	3,2
  8799  13C3  0008               	return
  8800                           
  8801                           ;uart.h: 71: UartSendChar(*str);
  8802  13C4  0872               	movf	i1UartSendString@str,w
  8803  13C5  0084               	movwf	4
  8804  13C6  120A  158A  2000  160A  118A  	fcall	stringdir
  8805  13CB  160A  118A  22C1  160A  118A  	fcall	i1_UartSendChar
  8806                           
  8807                           ;uart.h: 72: str++;
  8808  13D0  3001               	movlw	1
  8809  13D1  00F1               	movwf	??i1_UartSendString
  8810  13D2  0871               	movf	??i1_UartSendString,w
  8811  13D3  07F2               	addwf	i1UartSendString@str,f
  8812  13D4  2BBA               	goto	i1l2525
  8813  13D5                     __end_ofi1_UartSendString:
  8814                           
  8815                           	psect	text51
  8816  12C1                     __ptext51:	
  8817 ;; *************** function i1_UartSendChar *****************
  8818 ;; Defined at:
  8819 ;;		line 54 in file "uart.h"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;  ch              1    wreg     unsigned char 
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  ch              1    0[COMMON] unsigned char 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      void 
  8826 ;; Registers used:
  8827 ;;		wreg
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 300/100
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8833 ;;      Params:         0       0       0       0       0
  8834 ;;      Locals:         1       0       0       0       0
  8835 ;;      Temps:          0       0       0       0       0
  8836 ;;      Totals:         1       0       0       0       0
  8837 ;;Total ram usage:        1 bytes
  8838 ;; Hardware stack levels used: 1
  8839 ;; This function calls:
  8840 ;;		Nothing
  8841 ;; This function is called by:
  8842 ;;		_TetrisMove
  8843 ;;		_TetrisNext
  8844 ;;		i1_UartSendString
  8845 ;;		i1_UartCurSet
  8846 ;;		i1_UartCurMove
  8847 ;; This function uses a non-reentrant model
  8848 ;;
  8849                           
  8850                           
  8851                           ;psect for function i1_UartSendChar
  8852  12C1                     i1_UartSendChar:
  8853                           
  8854                           ;incstack = 0
  8855 ;; hardware stack exceeded
  8856                           ; Regs used in i1_UartSendChar: [wreg]
  8857                           ;i1UartSendChar@ch stored from wreg
  8858  12C1  00F0               	movwf	i1UartSendChar@ch
  8859  12C2                     i1l58:	
  8860                           ;uart.h: 55: while (!TXIF);
  8861                           
  8862  12C2  1283               	bcf	3,5	;RP0=0, select bank0
  8863  12C3  1303               	bcf	3,6	;RP1=0, select bank0
  8864  12C4  1E0C               	btfss	12,4	;volatile
  8865  12C5  2AC2               	goto	i1l58
  8866                           
  8867                           ;uart.h: 56: TXREG = ch;
  8868  12C6  0870               	movf	i1UartSendChar@ch,w
  8869  12C7  0099               	movwf	25	;volatile
  8870  12C8                     i1l61:	
  8871                           ;uart.h: 60: while (!TRMT);
  8872                           
  8873  12C8  1683               	bsf	3,5	;RP0=1, select bank1
  8874  12C9  1898               	btfsc	24,1	;volatile
  8875  12CA  0008               	return
  8876  12CB  2AC8               	goto	i1l61
  8877  12CC                     __end_ofi1_UartSendChar:
  8878                           
  8879                           	psect	text52
  8880  15A0                     __ptext52:	
  8881 ;; *************** function i1__getBlock *****************
  8882 ;; Defined at:
  8883 ;;		line 76 in file "tetris.h"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  t               1    wreg     PTR struct Tetris
  8886 ;;		 -> game(32), 
  8887 ;;  x               1    4[COMMON] unsigned char 
  8888 ;;  y               1    5[COMMON] unsigned char 
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;  t               1    9[COMMON] PTR struct Tetris
  8891 ;;		 -> game(32), 
  8892 ;;  n               1   10[COMMON] unsigned char 
  8893 ;; Return value:  Size  Location     Type
  8894 ;;                  1    wreg      unsigned char 
  8895 ;; Registers used:
  8896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 300/0
  8899 ;;		On exit  : 300/0
  8900 ;;		Unchanged: 300/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8902 ;;      Params:         2       0       0       0       0
  8903 ;;      Locals:         2       0       0       0       0
  8904 ;;      Temps:          3       0       0       0       0
  8905 ;;      Totals:         7       0       0       0       0
  8906 ;;Total ram usage:        7 bytes
  8907 ;; Hardware stack levels used: 1
  8908 ;; Hardware stack levels required when called: 1
  8909 ;; This function calls:
  8910 ;;		i1___bmul
  8911 ;; This function is called by:
  8912 ;;		__wipeShape
  8913 ;;		_TetrisMove
  8914 ;;		_TetrisRotate
  8915 ;;		_TetrisNext
  8916 ;;		i1__drawShape
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function i1__getBlock
  8922  15A0                     i1__getBlock:
  8923                           
  8924                           ;incstack = 0
  8925 ;; hardware stack exceeded
  8926                           ; Regs used in i1__getBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8927                           ;i1__getBlock@t stored from wreg
  8928  15A0  00F9               	movwf	i1__getBlock@t
  8929                           
  8930                           ;tetris.h: 77: if (x < 10 && y < 20) {
  8931  15A1  300A               	movlw	10
  8932  15A2  0274               	subwf	i1__getBlock@x,w
  8933  15A3  1803               	skipnc
  8934  15A4  2DD3               	goto	i1l2875
  8935  15A5  3014               	movlw	20
  8936  15A6  0275               	subwf	i1__getBlock@y,w
  8937  15A7  1803               	skipnc
  8938  15A8  2DD3               	goto	i1l2875
  8939                           
  8940                           ;tetris.h: 78: uint8_t n = 10 * y + x;
  8941  15A9  300A               	movlw	10
  8942  15AA  00F6               	movwf	??i1__getBlock
  8943  15AB  0876               	movf	??i1__getBlock,w
  8944  15AC  00F0               	movwf	i1___bmul@multiplicand
  8945  15AD  0875               	movf	i1__getBlock@y,w
  8946  15AE  160A  118A  231A  160A  118A  	fcall	i1___bmul
  8947  15B3  0774               	addwf	i1__getBlock@x,w
  8948  15B4  00F7               	movwf	??i1__getBlock+1
  8949  15B5  0877               	movf	??i1__getBlock+1,w
  8950  15B6  00FA               	movwf	i1__getBlock@n
  8951                           
  8952                           ;tetris.h: 79: return (t->map[n / 8] >> (n % 8)) & 1;
  8953  15B7  087A               	movf	i1__getBlock@n,w
  8954  15B8  00F6               	movwf	??i1__getBlock
  8955  15B9  3003               	movlw	3
  8956  15BA                     u365_25:
  8957  15BA  1003               	clrc
  8958  15BB  0CF6               	rrf	??i1__getBlock,f
  8959  15BC  3EFF               	addlw	-1
  8960  15BD  1D03               	skipz
  8961  15BE  2DBA               	goto	u365_25
  8962  15BF  0876               	movf	??i1__getBlock,w
  8963  15C0  0779               	addwf	i1__getBlock@t,w
  8964  15C1  00F7               	movwf	??i1__getBlock+1
  8965  15C2  0877               	movf	??i1__getBlock+1,w
  8966  15C3  0084               	movwf	4
  8967  15C4  1383               	bcf	3,7	;select IRP bank0
  8968  15C5  0800               	movf	0,w
  8969  15C6  00F8               	movwf	??i1__getBlock+2
  8970  15C7  087A               	movf	i1__getBlock@n,w
  8971  15C8  3907               	andlw	7
  8972  15C9  3E01               	addlw	1
  8973  15CA  2DCD               	goto	u366_24
  8974  15CB                     u366_25:
  8975  15CB  1003               	clrc
  8976  15CC  0CF8               	rrf	??i1__getBlock+2,f
  8977  15CD                     u366_24:
  8978  15CD  3EFF               	addlw	-1
  8979  15CE  1D03               	skipz
  8980  15CF  2DCB               	goto	u366_25
  8981  15D0  0878               	movf	??i1__getBlock+2,w
  8982  15D1  3901               	andlw	1
  8983  15D2  0008               	return
  8984  15D3                     i1l2875:
  8985                           
  8986                           ;tetris.h: 80: };tetris.h: 81: return 0;
  8987  15D3  3000               	movlw	0
  8988  15D4  0008               	return
  8989  15D5                     __end_ofi1__getBlock:
  8990                           
  8991                           	psect	text53
  8992  156B                     __ptext53:	
  8993 ;; *************** function __setBlock *****************
  8994 ;; Defined at:
  8995 ;;		line 91 in file "tetris.h"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;  t               1    wreg     PTR struct Tetris
  8998 ;;		 -> game(32), 
  8999 ;;  x               1    4[COMMON] unsigned char 
  9000 ;;  y               1    5[COMMON] unsigned char 
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  t               1   11[COMMON] PTR struct Tetris
  9003 ;;		 -> game(32), 
  9004 ;;  n               1   10[COMMON] unsigned char 
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9009 ;; Tracked objects:
  9010 ;;		On entry : 300/0
  9011 ;;		On exit  : 300/0
  9012 ;;		Unchanged: 300/0
  9013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9014 ;;      Params:         2       0       0       0       0
  9015 ;;      Locals:         2       0       0       0       0
  9016 ;;      Temps:          4       0       0       0       0
  9017 ;;      Totals:         8       0       0       0       0
  9018 ;;Total ram usage:        8 bytes
  9019 ;; Hardware stack levels used: 1
  9020 ;; Hardware stack levels required when called: 1
  9021 ;; This function calls:
  9022 ;;		i1___bmul
  9023 ;; This function is called by:
  9024 ;;		_TetrisMove
  9025 ;;		_TetrisRotate
  9026 ;;		_TetrisNext
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           
  9031                           ;psect for function __setBlock
  9032  156B                     __setBlock:
  9033                           
  9034                           ;incstack = 0
  9035 ;; hardware stack exceeded
  9036                           ; Regs used in __setBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9037                           ;__setBlock@t stored from wreg
  9038  156B  00FB               	movwf	__setBlock@t
  9039                           
  9040                           ;tetris.h: 92: if (x < 10 && y < 20) {
  9041  156C  300A               	movlw	10
  9042  156D  0274               	subwf	__setBlock@x,w
  9043  156E  1803               	skipnc
  9044  156F  0008               	return
  9045  1570  3014               	movlw	20
  9046  1571  0275               	subwf	__setBlock@y,w
  9047  1572  1803               	skipnc
  9048  1573  0008               	return
  9049                           
  9050                           ;tetris.h: 93: uint8_t n = 10 * y + x;
  9051  1574  300A               	movlw	10
  9052  1575  00F6               	movwf	??__setBlock
  9053  1576  0876               	movf	??__setBlock,w
  9054  1577  00F0               	movwf	i1___bmul@multiplicand
  9055  1578  0875               	movf	__setBlock@y,w
  9056  1579  160A  118A  231A  160A  118A  	fcall	i1___bmul
  9057  157E  0774               	addwf	__setBlock@x,w
  9058  157F  00F7               	movwf	??__setBlock+1
  9059  1580  0877               	movf	??__setBlock+1,w
  9060  1581  00FA               	movwf	__setBlock@n
  9061                           
  9062                           ;tetris.h: 94: t->map[n / 8] |= (1 << n % 8);
  9063  1582  3001               	movlw	1
  9064  1583  00F6               	movwf	??__setBlock
  9065  1584  087A               	movf	__setBlock@n,w
  9066  1585  3907               	andlw	7
  9067  1586  3E01               	addlw	1
  9068  1587  2D8A               	goto	u400_24
  9069  1588                     u400_25:
  9070  1588  1003               	clrc
  9071  1589  0DF6               	rlf	??__setBlock,f
  9072  158A                     u400_24:
  9073  158A  3EFF               	addlw	-1
  9074  158B  1D03               	skipz
  9075  158C  2D88               	goto	u400_25
  9076  158D  0876               	movf	??__setBlock,w
  9077  158E  00F7               	movwf	??__setBlock+1
  9078  158F  087A               	movf	__setBlock@n,w
  9079  1590  00F8               	movwf	??__setBlock+2
  9080  1591  3003               	movlw	3
  9081  1592                     u401_25:
  9082  1592  1003               	clrc
  9083  1593  0CF8               	rrf	??__setBlock+2,f
  9084  1594  3EFF               	addlw	-1
  9085  1595  1D03               	skipz
  9086  1596  2D92               	goto	u401_25
  9087  1597  0878               	movf	??__setBlock+2,w
  9088  1598  077B               	addwf	__setBlock@t,w
  9089  1599  00F9               	movwf	??__setBlock+3
  9090  159A  0879               	movf	??__setBlock+3,w
  9091  159B  0084               	movwf	4
  9092  159C  0877               	movf	??__setBlock+1,w
  9093  159D  1383               	bcf	3,7	;select IRP bank0
  9094  159E  0480               	iorwf	0,f
  9095  159F  0008               	return
  9096  15A0                     __end_of__setBlock:
  9097                           
  9098                           	psect	text54
  9099  160A                     __ptext54:	
  9100 ;; *************** function __clrBlock *****************
  9101 ;; Defined at:
  9102 ;;		line 84 in file "tetris.h"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;  t               1    wreg     PTR struct Tetris
  9105 ;;		 -> game(32), 
  9106 ;;  x               1    4[COMMON] unsigned char 
  9107 ;;  y               1    5[COMMON] unsigned char 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  t               1   10[COMMON] PTR struct Tetris
  9110 ;;		 -> game(32), 
  9111 ;;  n               1   11[COMMON] unsigned char 
  9112 ;; Return value:  Size  Location     Type
  9113 ;;                  1    wreg      void 
  9114 ;; Registers used:
  9115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9116 ;; Tracked objects:
  9117 ;;		On entry : 300/0
  9118 ;;		On exit  : 300/0
  9119 ;;		Unchanged: 300/0
  9120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9121 ;;      Params:         2       0       0       0       0
  9122 ;;      Locals:         2       0       0       0       0
  9123 ;;      Temps:          4       0       0       0       0
  9124 ;;      Totals:         8       0       0       0       0
  9125 ;;Total ram usage:        8 bytes
  9126 ;; Hardware stack levels used: 1
  9127 ;; Hardware stack levels required when called: 1
  9128 ;; This function calls:
  9129 ;;		i1___bmul
  9130 ;; This function is called by:
  9131 ;;		_TetrisMove
  9132 ;;		_TetrisRotate
  9133 ;;		_TetrisNext
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function __clrBlock
  9139  160A                     __clrBlock:
  9140                           
  9141                           ;incstack = 0
  9142 ;; hardware stack exceeded
  9143                           ; Regs used in __clrBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9144                           ;__clrBlock@t stored from wreg
  9145  160A  00FA               	movwf	__clrBlock@t
  9146                           
  9147                           ;tetris.h: 85: if (x < 10 && y < 20) {
  9148  160B  300A               	movlw	10
  9149  160C  0274               	subwf	__clrBlock@x,w
  9150  160D  1803               	skipnc
  9151  160E  0008               	return
  9152  160F  3014               	movlw	20
  9153  1610  0275               	subwf	__clrBlock@y,w
  9154  1611  1803               	skipnc
  9155  1612  0008               	return
  9156                           
  9157                           ;tetris.h: 86: uint8_t n = 10 * y + x;
  9158  1613  300A               	movlw	10
  9159  1614  00F6               	movwf	??__clrBlock
  9160  1615  0876               	movf	??__clrBlock,w
  9161  1616  00F0               	movwf	i1___bmul@multiplicand
  9162  1617  0875               	movf	__clrBlock@y,w
  9163  1618  160A  118A  231A  160A  118A  	fcall	i1___bmul
  9164  161D  0774               	addwf	__clrBlock@x,w
  9165  161E  00F7               	movwf	??__clrBlock+1
  9166  161F  0877               	movf	??__clrBlock+1,w
  9167  1620  00FB               	movwf	__clrBlock@n
  9168                           
  9169                           ;tetris.h: 87: t->map[n / 8] &= ~(1 << n % 8);
  9170  1621  3001               	movlw	1
  9171  1622  00F6               	movwf	??__clrBlock
  9172  1623  087B               	movf	__clrBlock@n,w
  9173  1624  3907               	andlw	7
  9174  1625  3E01               	addlw	1
  9175  1626  2E29               	goto	u396_24
  9176  1627                     u396_25:
  9177  1627  1003               	clrc
  9178  1628  0DF6               	rlf	??__clrBlock,f
  9179  1629                     u396_24:
  9180  1629  3EFF               	addlw	-1
  9181  162A  1D03               	skipz
  9182  162B  2E27               	goto	u396_25
  9183  162C  0876               	movf	??__clrBlock,w
  9184  162D  3AFF               	xorlw	255
  9185  162E  00F7               	movwf	??__clrBlock+1
  9186  162F  087B               	movf	__clrBlock@n,w
  9187  1630  00F8               	movwf	??__clrBlock+2
  9188  1631  3003               	movlw	3
  9189  1632                     u397_25:
  9190  1632  1003               	clrc
  9191  1633  0CF8               	rrf	??__clrBlock+2,f
  9192  1634  3EFF               	addlw	-1
  9193  1635  1D03               	skipz
  9194  1636  2E32               	goto	u397_25
  9195  1637  0878               	movf	??__clrBlock+2,w
  9196  1638  077A               	addwf	__clrBlock@t,w
  9197  1639  00F9               	movwf	??__clrBlock+3
  9198  163A  0879               	movf	??__clrBlock+3,w
  9199  163B  0084               	movwf	4
  9200  163C  0877               	movf	??__clrBlock+1,w
  9201  163D  1383               	bcf	3,7	;select IRP bank0
  9202  163E  0580               	andwf	0,f
  9203  163F  0008               	return
  9204  1640                     __end_of__clrBlock:
  9205                           
  9206                           	psect	text55
  9207  131A                     __ptext55:	
  9208 ;; *************** function i1___bmul *****************
  9209 ;; Defined at:
  9210 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  multiplier      1    wreg     unsigned char 
  9213 ;;  multiplicand    1    0[COMMON] unsigned char 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;  multiplier      1    3[COMMON] unsigned char 
  9216 ;;  product         1    2[COMMON] unsigned char 
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      unsigned char 
  9219 ;; Registers used:
  9220 ;;		wreg, status,2, status,0
  9221 ;; Tracked objects:
  9222 ;;		On entry : 300/0
  9223 ;;		On exit  : 300/0
  9224 ;;		Unchanged: 300/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9226 ;;      Params:         1       0       0       0       0
  9227 ;;      Locals:         2       0       0       0       0
  9228 ;;      Temps:          1       0       0       0       0
  9229 ;;      Totals:         4       0       0       0       0
  9230 ;;Total ram usage:        4 bytes
  9231 ;; Hardware stack levels used: 1
  9232 ;; This function calls:
  9233 ;;		Nothing
  9234 ;; This function is called by:
  9235 ;;		__clrBlock
  9236 ;;		__setBlock
  9237 ;;		i1__getBlock
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function i1___bmul
  9243  131A                     i1___bmul:
  9244                           
  9245                           ;incstack = 0
  9246 ;; hardware stack exceeded
  9247                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9248                           ;i1___bmul@multiplier stored from wreg
  9249  131A  00F3               	movwf	i1___bmul@multiplier
  9250  131B  01F2               	clrf	i1___bmul@product
  9251  131C                     i1l2723:
  9252  131C  1C73               	btfss	i1___bmul@multiplier,0
  9253  131D  2B22               	goto	i1l2727
  9254  131E  0870               	movf	i1___bmul@multiplicand,w
  9255  131F  00F1               	movwf	??i1___bmul
  9256  1320  0871               	movf	??i1___bmul,w
  9257  1321  07F2               	addwf	i1___bmul@product,f
  9258  1322                     i1l2727:
  9259  1322  1003               	clrc
  9260  1323  0DF0               	rlf	i1___bmul@multiplicand,f
  9261  1324  1003               	clrc
  9262  1325  0CF3               	rrf	i1___bmul@multiplier,f
  9263  1326  0873               	movf	i1___bmul@multiplier,w
  9264  1327  1D03               	btfss	3,2
  9265  1328  2B1C               	goto	i1l2723
  9266  1329  0872               	movf	i1___bmul@product,w
  9267  132A  0008               	return
  9268  132B                     __end_ofi1___bmul:
  9269                           
  9270                           	psect	text56
  9271  168B                     __ptext56:	
  9272 ;; *************** function _QueuePush *****************
  9273 ;; Defined at:
  9274 ;;		line 62 in file "queue.h"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  q               1    wreg     PTR struct Queue
  9277 ;;		 -> randset(3), 
  9278 ;;  i               1    7[COMMON] unsigned char 
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;  q               1   11[COMMON] PTR struct Queue
  9281 ;;		 -> randset(3), 
  9282 ;; Return value:  Size  Location     Type
  9283 ;;                  1    wreg      unsigned char 
  9284 ;; Registers used:
  9285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9286 ;; Tracked objects:
  9287 ;;		On entry : 300/0
  9288 ;;		On exit  : 0/0
  9289 ;;		Unchanged: 0/0
  9290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9291 ;;      Params:         1       0       0       0       0
  9292 ;;      Locals:         1       0       0       0       0
  9293 ;;      Temps:          3       0       0       0       0
  9294 ;;      Totals:         5       0       0       0       0
  9295 ;;Total ram usage:        5 bytes
  9296 ;; Hardware stack levels used: 1
  9297 ;; Hardware stack levels required when called: 1
  9298 ;; This function calls:
  9299 ;;		i1_QueueLength
  9300 ;;		i1__next
  9301 ;; This function is called by:
  9302 ;;		_isr
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           
  9307                           ;psect for function _QueuePush
  9308  168B                     _QueuePush:
  9309                           
  9310                           ;incstack = 0
  9311 ;; hardware stack exceeded
  9312                           ; Regs used in _QueuePush: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9313                           ;QueuePush@q stored from wreg
  9314  168B  00FB               	movwf	QueuePush@q
  9315                           
  9316                           ;queue.h: 63: if (QueueLength(q) < 15) {
  9317  168C  087B               	movf	QueuePush@q,w
  9318  168D  160A  118A  24E9  160A  118A  	fcall	i1_QueueLength
  9319  1692  00F8               	movwf	??_QueuePush
  9320  1693  300F               	movlw	15
  9321  1694  0278               	subwf	??_QueuePush,w
  9322  1695  1803               	skipnc
  9323  1696  0008               	return
  9324                           
  9325                           ;queue.h: 64: q->_data &= ~(1 << (q->ht&15));
  9326  1697  087B               	movf	QueuePush@q,w
  9327  1698  3E02               	addlw	2
  9328  1699  0084               	movwf	4
  9329  169A  1383               	bcf	3,7	;select IRP bank0
  9330  169B  0800               	movf	0,w
  9331  169C  390F               	andlw	15
  9332  169D  00F8               	movwf	??_QueuePush
  9333  169E  0AF8               	incf	??_QueuePush,f
  9334  169F  3001               	movlw	1
  9335  16A0  00F9               	movwf	??_QueuePush+1
  9336  16A1  3000               	movlw	0
  9337  16A2  00FA               	movwf	??_QueuePush+2
  9338  16A3  2EA7               	goto	u465_24
  9339  16A4                     u465_25:
  9340  16A4  1003               	clrc
  9341  16A5  0DF9               	rlf	??_QueuePush+1,f
  9342  16A6  0DFA               	rlf	??_QueuePush+2,f
  9343  16A7                     u465_24:
  9344  16A7  0BF8               	decfsz	??_QueuePush,f
  9345  16A8  2EA4               	goto	u465_25
  9346  16A9  09F9               	comf	??_QueuePush+1,f
  9347  16AA  09FA               	comf	??_QueuePush+2,f
  9348  16AB  087B               	movf	QueuePush@q,w
  9349  16AC  0084               	movwf	4
  9350  16AD  0879               	movf	??_QueuePush+1,w
  9351  16AE  0580               	andwf	0,f
  9352  16AF  0A84               	incf	4,f
  9353  16B0  087A               	movf	??_QueuePush+2,w
  9354  16B1  0580               	andwf	0,f
  9355                           
  9356                           ;queue.h: 65: q->_data |= (i & 1) << (q->ht&15);
  9357  16B2  087B               	movf	QueuePush@q,w
  9358  16B3  3E02               	addlw	2
  9359  16B4  0084               	movwf	4
  9360  16B5  0800               	movf	0,w
  9361  16B6  390F               	andlw	15
  9362  16B7  00F8               	movwf	??_QueuePush
  9363  16B8  0AF8               	incf	??_QueuePush,f
  9364  16B9  0877               	movf	QueuePush@i,w
  9365  16BA  3901               	andlw	1
  9366  16BB  00F9               	movwf	??_QueuePush+1
  9367  16BC  01FA               	clrf	??_QueuePush+2
  9368  16BD  2EC1               	goto	u466_24
  9369  16BE                     u466_25:
  9370  16BE  1003               	clrc
  9371  16BF  0DF9               	rlf	??_QueuePush+1,f
  9372  16C0  0DFA               	rlf	??_QueuePush+2,f
  9373  16C1                     u466_24:
  9374  16C1  0BF8               	decfsz	??_QueuePush,f
  9375  16C2  2EBE               	goto	u466_25
  9376  16C3  087B               	movf	QueuePush@q,w
  9377  16C4  0084               	movwf	4
  9378  16C5  0879               	movf	??_QueuePush+1,w
  9379  16C6  0480               	iorwf	0,f
  9380  16C7  0A84               	incf	4,f
  9381  16C8  087A               	movf	??_QueuePush+2,w
  9382  16C9  0480               	iorwf	0,f
  9383                           
  9384                           ;queue.h: 66: q->ht = _next(q->ht & 15) + (q->ht&15);
  9385  16CA  087B               	movf	QueuePush@q,w
  9386  16CB  3E02               	addlw	2
  9387  16CC  0084               	movwf	4
  9388  16CD  300F               	movlw	15
  9389  16CE  0500               	andwf	0,w
  9390  16CF  00F8               	movwf	??_QueuePush
  9391  16D0  087B               	movf	QueuePush@q,w
  9392  16D1  3E02               	addlw	2
  9393  16D2  0084               	movwf	4
  9394  16D3  0800               	movf	0,w
  9395  16D4  390F               	andlw	15
  9396  16D5  160A  118A  22D7   	fcall	i1__next
  9397  16D8  0778               	addwf	??_QueuePush,w
  9398  16D9  00F9               	movwf	??_QueuePush+1
  9399  16DA  087B               	movf	QueuePush@q,w
  9400  16DB  3E02               	addlw	2
  9401  16DC  0084               	movwf	4
  9402  16DD  0879               	movf	??_QueuePush+1,w
  9403  16DE  0080               	movwf	0
  9404  16DF  0008               	return
  9405  16E0                     __end_of_QueuePush:
  9406                           
  9407                           	psect	text57
  9408  12D7                     __ptext57:	
  9409 ;; *************** function i1__next *****************
  9410 ;; Defined at:
  9411 ;;		line 50 in file "queue.h"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  n               1    wreg     unsigned char 
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  n               1    1[COMMON] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      unsigned char 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0
  9420 ;; Tracked objects:
  9421 ;;		On entry : 800/0
  9422 ;;		On exit  : 800/0
  9423 ;;		Unchanged: 800/0
  9424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9425 ;;      Params:         0       0       0       0       0
  9426 ;;      Locals:         1       0       0       0       0
  9427 ;;      Temps:          1       0       0       0       0
  9428 ;;      Totals:         2       0       0       0       0
  9429 ;;Total ram usage:        2 bytes
  9430 ;; Hardware stack levels used: 1
  9431 ;; This function calls:
  9432 ;;		Nothing
  9433 ;; This function is called by:
  9434 ;;		_QueuePush
  9435 ;;		i1_QueuePop
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           
  9440                           ;psect for function i1__next
  9441  12D7                     i1__next:
  9442                           
  9443                           ;incstack = 0
  9444 ;; hardware stack exceeded
  9445                           ; Regs used in i1__next: [wreg+status,2+status,0]
  9446                           ;i1__next@n stored from wreg
  9447  12D7  00F1               	movwf	i1__next@n
  9448                           
  9449                           ;queue.h: 51: n++;
  9450  12D8  3001               	movlw	1
  9451  12D9  00F0               	movwf	??i1__next
  9452  12DA  0870               	movf	??i1__next,w
  9453  12DB  07F1               	addwf	i1__next@n,f
  9454                           
  9455                           ;queue.h: 52: if (n > 15) return 0;
  9456  12DC  3010               	movlw	16
  9457  12DD  0271               	subwf	i1__next@n,w
  9458  12DE  1C03               	skipc
  9459  12DF  2AE2               	goto	i1l2533
  9460  12E0  3000               	movlw	0
  9461  12E1  0008               	return
  9462  12E2                     i1l2533:
  9463                           
  9464                           ;queue.h: 53: return n;
  9465  12E2  0871               	movf	i1__next@n,w
  9466  12E3  0008               	return
  9467  12E4                     __end_ofi1__next:
  9468                           
  9469                           	psect	text58
  9470  14E9                     __ptext58:	
  9471 ;; *************** function i1_QueueLength *****************
  9472 ;; Defined at:
  9473 ;;		line 56 in file "queue.h"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;  q               1    wreg     PTR struct Queue
  9476 ;;		 -> randset(3), 
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;  q               1    5[COMMON] PTR struct Queue
  9479 ;;		 -> randset(3), 
  9480 ;;  length          1    6[COMMON] char 
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      unsigned char 
  9483 ;; Registers used:
  9484 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9490 ;;      Params:         0       0       0       0       0
  9491 ;;      Locals:         4       0       0       0       0
  9492 ;;      Temps:          3       0       0       0       0
  9493 ;;      Totals:         7       0       0       0       0
  9494 ;;Total ram usage:        7 bytes
  9495 ;; Hardware stack levels used: 1
  9496 ;; This function calls:
  9497 ;;		Nothing
  9498 ;; This function is called by:
  9499 ;;		_QueuePush
  9500 ;;		_isr
  9501 ;;		i1_QueuePop
  9502 ;; This function uses a non-reentrant model
  9503 ;;
  9504                           
  9505                           
  9506                           ;psect for function i1_QueueLength
  9507  14E9                     i1_QueueLength:
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in i1_QueueLength: [wreg-fsr0h+status,2+status,0]
  9511                           ;i1QueueLength@q stored from wreg
  9512  14E9  00F5               	movwf	i1QueueLength@q
  9513                           
  9514                           ;queue.h: 58: int8_t length = (q->ht & 15) - (q->ht>>4);
  9515  14EA  0875               	movf	i1QueueLength@q,w
  9516  14EB  3E02               	addlw	2
  9517  14EC  0084               	movwf	4
  9518  14ED  300F               	movlw	15
  9519  14EE  1383               	bcf	3,7	;select IRP bank0
  9520  14EF  0500               	andwf	0,w
  9521  14F0  00F0               	movwf	??i1_QueueLength
  9522  14F1  0875               	movf	i1QueueLength@q,w
  9523  14F2  3E02               	addlw	2
  9524  14F3  0084               	movwf	4
  9525  14F4  0800               	movf	0,w
  9526  14F5  00F1               	movwf	??i1_QueueLength+1
  9527  14F6  3004               	movlw	4
  9528  14F7                     u292_25:
  9529  14F7  1003               	clrc
  9530  14F8  0CF1               	rrf	??i1_QueueLength+1,f
  9531  14F9  3EFF               	addlw	-1
  9532  14FA  1D03               	skipz
  9533  14FB  2CF7               	goto	u292_25
  9534  14FC  0871               	movf	??i1_QueueLength+1,w
  9535  14FD  0270               	subwf	??i1_QueueLength,w
  9536  14FE  00F2               	movwf	??i1_QueueLength+2
  9537  14FF  0872               	movf	??i1_QueueLength+2,w
  9538  1500  00F6               	movwf	i1QueueLength@length
  9539                           
  9540                           ;queue.h: 59: return length >= 0 ? length : length + 16;
  9541  1501  1FF6               	btfss	i1QueueLength@length,7
  9542  1502  2D0C               	goto	i1l2543
  9543  1503  3010               	movlw	16
  9544  1504  0776               	addwf	i1QueueLength@length,w
  9545  1505  00F3               	movwf	i1_QueueLength$117
  9546  1506  01F4               	clrf	i1_QueueLength$117+1
  9547  1507  1803               	skipnc
  9548  1508  0AF4               	incf	i1_QueueLength$117+1,f
  9549  1509  1BF6               	btfsc	i1QueueLength@length,7
  9550  150A  03F4               	decf	i1_QueueLength$117+1,f
  9551  150B  2D11               	goto	i1l2545
  9552  150C                     i1l2543:
  9553  150C  0876               	movf	i1QueueLength@length,w
  9554  150D  00F3               	movwf	i1_QueueLength$117
  9555  150E  01F4               	clrf	i1_QueueLength$117+1
  9556  150F  1BF3               	btfsc	i1_QueueLength$117,7
  9557  1510  03F4               	decf	i1_QueueLength$117+1,f
  9558  1511                     i1l2545:
  9559  1511  0873               	movf	i1_QueueLength$117,w
  9560  1512  0008               	return
  9561  1513                     __end_ofi1_QueueLength:
  9562                           
  9563                           	psect	text59
  9564  12AC                     __ptext59:	
  9565 ;; *************** function _AdcVoltL *****************
  9566 ;; Defined at:
  9567 ;;		line 58 in file "adc.h"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;		None
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  1    wreg      unsigned char 
  9574 ;; Registers used:
  9575 ;;		wreg, status,2, status,0, pclath, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 300/0
  9578 ;;		On exit  : 300/100
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9581 ;;      Params:         0       0       0       0       0
  9582 ;;      Locals:         0       0       0       0       0
  9583 ;;      Temps:          0       0       0       0       0
  9584 ;;      Totals:         0       0       0       0       0
  9585 ;;Total ram usage:        0 bytes
  9586 ;; Hardware stack levels used: 1
  9587 ;; Hardware stack levels required when called: 1
  9588 ;; This function calls:
  9589 ;;		__AdcWait
  9590 ;; This function is called by:
  9591 ;;		_isr
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _AdcVoltL
  9597  12AC                     _AdcVoltL:
  9598                           
  9599                           ;adc.h: 59: _AdcWait();
  9600                           
  9601                           ;incstack = 0
  9602 ;; hardware stack exceeded
  9603                           ; Regs used in _AdcVoltL: [wreg+status,2+status,0+pclath+cstack]
  9604  12AC  160A  118A  22B2   	fcall	__AdcWait
  9605                           
  9606                           ;adc.h: 60: return ADRESL;
  9607  12AF  1683               	bsf	3,5	;RP0=1, select bank1
  9608  12B0  081E               	movf	30,w	;volatile
  9609  12B1  0008               	return
  9610  12B2                     __end_of_AdcVoltL:
  9611                           
  9612                           	psect	text60
  9613  12B2                     __ptext60:	
  9614 ;; *************** function __AdcWait *****************
  9615 ;; Defined at:
  9616 ;;		line 49 in file "adc.h"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		None
  9625 ;; Tracked objects:
  9626 ;;		On entry : 300/0
  9627 ;;		On exit  : 200/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9630 ;;      Params:         0       0       0       0       0
  9631 ;;      Locals:         0       0       0       0       0
  9632 ;;      Temps:          0       0       0       0       0
  9633 ;;      Totals:         0       0       0       0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used: 1
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_AdcVoltL
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function __AdcWait
  9645  12B2                     __AdcWait:
  9646  12B2                     i1l164:	
  9647                           ;adc.h: 50: while (!ADIF && !ADIE);
  9648                           
  9649                           ;incstack = 0
  9650 ;; hardware stack exceeded
  9651                           ; Regs used in __AdcWait: []
  9652                           
  9653  12B2  1283               	bcf	3,5	;RP0=0, select bank0
  9654  12B3  1B0C               	btfsc	12,6	;volatile
  9655  12B4  0008               	return
  9656  12B5  1683               	bsf	3,5	;RP0=1, select bank1
  9657  12B6  1B0C               	btfsc	12,6	;volatile
  9658  12B7  0008               	return
  9659  12B8  2AB2               	goto	i1l164
  9660  12B9                     __end_of__AdcWait:
  9661  007E                     btemp	set	126	;btemp
  9662  007E                     wtemp0	set	126
  9663                           
  9664                           	psect	config
  9665                           
  9666                           ;Config register CONFIG @ 0x2007
  9667                           ;	Oscillator Selection bits
  9668                           ;	FOSC = XT, XT oscillator
  9669                           ;	Watchdog Timer Enable bit
  9670                           ;	WDTE = OFF, WDT disabled
  9671                           ;	Power-up Timer Enable bit
  9672                           ;	PWRTE = OFF, PWRT disabled
  9673                           ;	Brown-out Reset Enable bit
  9674                           ;	BOREN = OFF, BOR disabled
  9675                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  9676                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  9677                           ;	Data EEPROM Memory Code Protection bit
  9678                           ;	CPD = OFF, Data EEPROM code protection off
  9679                           ;	Flash Program Memory Write Enable bits
  9680                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  9681                           ;	In-Circuit Debugger Mode bit
  9682                           ;	DEBUG = 0x1, unprogrammed default
  9683                           ;	Flash Program Memory Code Protection bit
  9684                           ;	CP = OFF, Code protection off
  9685  2007                     	org	8199
  9686  2007  3F39               	dw	16185

Data Sizes:
    Strings     175
    Constant    50
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      66
    BANK1            80     43      78
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _drawShape@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    i1__shapeNext@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    i1__drawShape@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    _wipeShape@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    i1__getBlock@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    game.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    TetrisNext@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    TetrisNext@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    TetrisRotate@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    TetrisRotate@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    TetrisMove@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    TetrisMove@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    TetrisInit@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    TetrisInit@randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    TetrisInit@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    _shapeNext@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    _shapeNext@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    _wipeShape@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    _drawShape@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    _setBlock@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    _setBlock@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    _clrBlock@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    _clrBlock@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    S51Tetris$randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    _getBlock@t.randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    _getBlock@t	PTR struct Tetris size(1) Largest target is 33
		 -> game(BANK1[32]), 

    _randShape@randset	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    QueuePop@q	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    QueuePush@q	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    QueueLength@q	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    QueueInit@q	PTR struct Queue size(1) Largest target is 3
		 -> randset(BANK1[3]), 

    UartSendString@str	PTR const unsigned char  size(1) Largest target is 22
		 -> STR_24(CODE[3]), STR_23(CODE[7]), STR_22(CODE[13]), STR_21(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[17]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[21]), 
		 -> STR_12(CODE[3]), STR_11(CODE[22]), STR_10(CODE[21]), STR_9(CODE[22]), 
		 -> STR_8(CODE[20]), STR_7(CODE[3]), STR_6(CODE[2]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UIClearGame
    i1_UIClearGame->i1_UartCurMove
    i1__shapeNext->i1__drawBlock
    i1__shapeNext->i1__wipeBlock
    i1__randShape->i1_QueuePop
    i1_QueuePop->i1_QueueLength
    i1__drawShape->i1__drawBlock
    i1__drawBlock->i1_UartCurSet
    i1_UartCurMove->i1___awdiv
    __wipeShape->i1__wipeBlock
    i1__wipeBlock->i1_UartCurSet
    i1_UartCurSet->i1___lbmod
    i1_UartSendString->i1_UartSendChar
    i1__getBlock->i1___bmul
    __setBlock->i1___bmul
    __clrBlock->i1___bmul
    _QueuePush->i1_QueueLength

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_TetrisNext
    _TetrisRotate->__wipeShape
    _TetrisNext->i1__shapeNext
    i1__shapeNext->i1__randShape
    i1__randShape->i1_QueuePop
    _TetrisMove->__wipeShape
    _TetrisMove->i1__drawShape

Critical Paths under _main in BANK1

    _main->_TetrisInit
    _setup->_LedInit
    _setup->_QueueInit
    _setup->_UartInit
    __drawShape->__drawBlock
    __getBlock->___bmul
    _UIPageMainToGame->_UIClearGame
    _UIClearGame->_UartCurMove
    _UartCurMove->___awdiv
    _UIPageMain->_UartSendUTF8
    _UartSendUTF8->_UartSendChar
    _TetrisInit->__shapeNext
    __shapeNext->__randShape
    __wipeBlock->_UartCurSet
    __randShape->_QueuePop
    _QueuePop->_QueueLength
    __drawBlock->_UartCurSet
    _UartCurSet->___lbmod
    _UartSendString->_UartSendChar

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   32221
                                             40 BANK1      3     3      0
                         _TetrisInit
                         _UIPageMain
                   _UIPageMainToGame
                         __drawShape
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0      71
                                              1 BANK1      1     1      0
                              _AdcGo
                            _AdcInit
                            _LedInit
                          _QueueInit
                           _UartInit
 ---------------------------------------------------------------------------------
 (2) _UartInit                                             1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _QueueInit                                            1     1      0      71
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _LedInit                                              1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __drawShape                                          14    11      3    5024
                                             14 BANK1     14    11      3
                         __drawBlock
                          __getBlock
 ---------------------------------------------------------------------------------
 (2) __getBlock                                            7     5      2     973
                                              4 BANK1      7     5      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     199
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UIPageMainToGame                                     7     7      0   14912
                                             15 BANK1      7     7      0
                        _UIClearGame
                        _UartCurMove
                         _UartCurSet
                     _UartSendString
                       _UartSendUTF8
 ---------------------------------------------------------------------------------
 (2) _UIClearGame                                          2     2      0    6642
                                             13 BANK1      2     2      0
                        _UartCurMove
                         _UartCurSet
                     _UartSendString
 ---------------------------------------------------------------------------------
 (2) _UartCurMove                                          4     3      1    3365
                                              9 BANK1      4     3      1
                       _UartSendChar
                     _UartSendString
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1148
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _UIPageMain                                          14    14      0    2870
                                              4 BANK1     14    14      0
                        _UartCurShow
                       _UartSendChar
                     _UartSendString
                       _UartSendUTF8
 ---------------------------------------------------------------------------------
 (2) _UartSendUTF8                                         3     1      2    1466
                                              1 BANK1      3     1      2
                       _UartSendChar
 ---------------------------------------------------------------------------------
 (2) _UartCurShow                                          1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _TetrisInit                                           3     2      1    9344
                                             37 BANK1      3     2      1
                         __randShape
                         __shapeNext
 ---------------------------------------------------------------------------------
 (2) __shapeNext                                          12    12      0    8306
                                             25 BANK1     12    12      0
                         __drawBlock
                         __randShape
                         __wipeBlock
 ---------------------------------------------------------------------------------
 (3) __wipeBlock                                           4     3      1    3333
                                             10 BANK1      4     3      1
                         _UartCurSet
                     _UartSendString
 ---------------------------------------------------------------------------------
 (3) __randShape                                           7     7      0     848
                                             18 BANK1      7     7      0
                              _AdcGo
                           _QueuePop
 ---------------------------------------------------------------------------------
 (4) _QueuePop                                            11    11      0     497
                                              7 BANK1     11    11      0
                        _QueueLength
                              __next
 ---------------------------------------------------------------------------------
 (5) __next                                                2     2      0      45
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (5) _QueueLength                                          7     7      0     216
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __drawBlock                                           4     3      1    3359
                                             10 BANK1      4     3      1
                         _UartCurSet
                     _UartSendString
 ---------------------------------------------------------------------------------
 (3) _UartCurSet                                           3     2      1    2467
                                              7 BANK1      3     2      1
                       _UartSendChar
                     _UartSendString
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              7     6      1     425
                                              0 BANK1      7     6      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     694
                                              0 BANK1      5     4      1
 ---------------------------------------------------------------------------------
 (3) _UartSendString                                       2     2      0     742
                                              1 BANK1      2     2      0
                       _UartSendChar
 ---------------------------------------------------------------------------------
 (4) _UartSendChar                                         1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0   35532
                                             56 BANK0      7     7      0
                           _AdcVoltL
                          _QueuePush
                         _TetrisMove
                         _TetrisNext
                       _TetrisRotate
                            i1_AdcGo
                      i1_QueueLength
                      i1_UIClearGame
 ---------------------------------------------------------------------------------
 (8) i1_UIClearGame                                        2     2      0    2684
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                      i1_UartCurMove
                       i1_UartCurSet
                   i1_UartSendString
 ---------------------------------------------------------------------------------
 (8) _TetrisRotate                                        35    35      0    6541
                                             14 BANK0      1     1      0
                          __clrBlock
                          __setBlock
                         __wipeShape
                        i1__getBlock
 ---------------------------------------------------------------------------------
 (8) _TetrisNext                                          32    32      0   14413
                                             26 BANK0     30    30      0
                          __clrBlock
                          __setBlock
                         __wipeShape
                      i1_UartCurMove
                       i1_UartCurSet
                     i1_UartSendChar
                       i1__drawShape
                        i1__getBlock
                       i1__shapeNext
 ---------------------------------------------------------------------------------
 (9) i1__shapeNext                                        12    12      0    3378
                                             14 BANK0     12    12      0
                       i1__drawBlock
                       i1__randShape
                       i1__wipeBlock
 ---------------------------------------------------------------------------------
 (10) i1__randShape                                        7     7      0     632
                                              9 COMMON     2     2      0
                                              9 BANK0      5     5      0
                            i1_AdcGo
                         i1_QueuePop
 ---------------------------------------------------------------------------------
 (11) i1_QueuePop                                         11    11      0     335
                                              7 COMMON     2     2      0
                                              0 BANK0      9     9      0
                      i1_QueueLength
                            i1__next
 ---------------------------------------------------------------------------------
 (8) i1_AdcGo                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TetrisMove                                          31    30      1   11080
                                             14 BANK0     31    30      1
                          __clrBlock
                          __setBlock
                         __wipeShape
                      i1_UartCurMove
                       i1_UartCurSet
                     i1_UartSendChar
                       i1__drawShape
                        i1__getBlock
 ---------------------------------------------------------------------------------
 (9) i1__drawShape                                        14    11      3    2152
                                              0 BANK0     14    11      3
                       i1__drawBlock
                        i1__getBlock
 ---------------------------------------------------------------------------------
 (10) i1__drawBlock                                        4     3      1    1017
                                             10 COMMON     4     3      1
                       i1_UartCurSet
                   i1_UartSendString
 ---------------------------------------------------------------------------------
 (9) i1_UartCurMove                                        4     3      1    1695
                                              9 COMMON     4     3      1
                     i1_UartSendChar
                   i1_UartSendString
                          i1___awdiv
                          i1___awmod
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     504
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1___awdiv                                           9     5      4     716
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) __wipeShape                                          14    11      3    2740
                                              0 BANK0     14    11      3
                        i1__getBlock
                       i1__wipeBlock
 ---------------------------------------------------------------------------------
 (10) i1__wipeBlock                                        4     3      1    1017
                                             10 COMMON     4     3      1
                       i1_UartCurSet
                   i1_UartSendString
 ---------------------------------------------------------------------------------
 (9) i1_UartCurSet                                         3     2      1     854
                                              7 COMMON     3     2      1
                     i1_UartSendChar
                   i1_UartSendString
                          i1___lbdiv
                          i1___lbmod
 ---------------------------------------------------------------------------------
 (10) i1___lbmod                                           7     6      1     211
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (10) i1___lbdiv                                           5     4      1     266
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (9) i1_UartSendString                                     2     2      0      67
                                              1 COMMON     2     2      0
                     i1_UartSendChar
 ---------------------------------------------------------------------------------
 (10) i1_UartSendChar                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1__getBlock                                          7     5      2     689
                                              4 COMMON     7     5      2
                           i1___bmul
 ---------------------------------------------------------------------------------
 (9) __setBlock                                            8     6      2     857
                                              4 COMMON     8     6      2
                           i1___bmul
 ---------------------------------------------------------------------------------
 (9) __clrBlock                                            8     6      2     724
                                              4 COMMON     8     6      2
                           i1___bmul
 ---------------------------------------------------------------------------------
 (10) i1___bmul                                            4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _QueuePush                                            5     4      1     458
                                              7 COMMON     5     4      1
                           _AdcVoltL (ARG)
                      i1_QueueLength
                            i1__next
 ---------------------------------------------------------------------------------
 (12) i1__next                                             2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) i1_QueueLength                                        7     7      0     135
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (8) _AdcVoltL                                             0     0      0       0
                           __AdcWait
 ---------------------------------------------------------------------------------
 (9) __AdcWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TetrisInit
     __randShape
       _AdcGo
       _QueuePop
         _QueueLength
         __next
     __shapeNext
       __drawBlock
         _UartCurSet
           _UartSendChar
           _UartSendString
             _UartSendChar
           ___lbdiv
           ___lbmod
         _UartSendString
       __randShape
       __wipeBlock
         _UartCurSet
         _UartSendString
   _UIPageMain
     _UartCurShow
     _UartSendChar
     _UartSendString
     _UartSendUTF8
       _UartSendChar
   _UIPageMainToGame
     _UIClearGame
       _UartCurMove
         _UartSendChar
         _UartSendString
         ___awdiv
         ___awmod
       _UartCurSet
       _UartSendString
     _UartCurMove
     _UartCurSet
     _UartSendString
     _UartSendUTF8
   __drawShape
     __drawBlock
     __getBlock
       ___bmul
   _setup
     _AdcGo
     _AdcInit
     _LedInit
     _QueueInit
     _UartInit

 _isr (ROOT)
   _AdcVoltL
     __AdcWait
   _QueuePush
     _AdcVoltL (ARG)
     i1_QueueLength (ARG)
     i1__next (ARG)
   _TetrisMove
     __clrBlock
       i1___bmul
     __setBlock
       i1___bmul
     __wipeShape
       i1__getBlock
         i1___bmul
       i1__wipeBlock
         i1_UartCurSet
           i1_UartSendChar
           i1_UartSendString
             i1_UartSendChar
           i1___lbdiv
           i1___lbmod
         i1_UartSendString
     i1_UartCurMove
       i1_UartSendChar
       i1_UartSendString
       i1___awdiv
       i1___awmod
     i1_UartCurSet
     i1_UartSendChar
     i1__drawShape
       i1__drawBlock
         i1_UartCurSet
         i1_UartSendString
       i1__getBlock
     i1__getBlock
   _TetrisNext
     __clrBlock
     __setBlock
     __wipeShape
     i1_UartCurMove
     i1_UartCurSet
     i1_UartSendChar
     i1__drawShape
     i1__getBlock
     i1__shapeNext
       i1__drawBlock
       i1__randShape
         i1_AdcGo
         i1_QueuePop
           i1_QueueLength
           i1__next
       i1__wipeBlock
   _TetrisRotate
     __clrBlock
     __setBlock
     __wipeShape
     i1__getBlock
   i1_AdcGo
   i1_QueueLength
   i1_UIClearGame
     i1_UartCurMove
     i1_UartCurSet
     i1_UartSendString

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      9E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      42       5       82.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     2B      4E       7       97.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      9E      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Dec 27 20:30:55 2022

        ?i1_UartSendString 0070                i1QueuePop@q 0078    __size_of_UartSendString 001D  
                        pc 0002      __size_ofi1__drawBlock 0014             ___bmul@product 00A2  
    __size_ofi1__drawShape 0066                         l61 12ED                         l58 12E6  
       ??i1_UartSendString 0071                         l94 0F08                         l88 0BCA  
                       l96 0F46                         l89 0BFD                         l98 0F9C  
             ___awdiv@sign 00A6                 _UIPageMain 04FD                         fsr 0004  
            i1QueuePop@ret 0077                        l100 0FDD                        l420 156A  
                      l860 1494                i1__getBlock 15A0                        _key 005F  
                      _isr 0C12                        fsr0 0004                        indf 0000  
           i1QueueLength@q 0075               ___awmod@sign 00A6      __size_ofi1__randShape 006A  
                     l3011 14B7                       l3101 0753                       l3005 14A5  
                     l3111 079F                       l3103 071C                       l3113 0770  
                     l3105 075B                       l3025 1608                       l3303 0594  
                     l3073 0681                       l2507 147D                       l3075 0683  
                     l3331 05BD                       l3235 0518                       l2453 13D7  
                     l2461 12FC                       l2605 1745                       l3093 06E6  
                     l3085 06AE                       l3069 0674                       l3317 05A8  
                     l3309 05A3                       l3261 0556                       l2471 1536  
                     l3095 0708                       l3087 06D2                       l2623 07B1  
                     l2473 153B                       l3345 05D1                       l3337 05CC  
                     l3281 057A                       l3249 053D                       l2641 07D2  
                     l3409 0CBA                       l3371 05F6                       l3275 056B  
                     l2651 07F3                       l3451 0D4D                       l3365 05F5  
                     l2629 07BC                       l3429 0D08                       l2813 1333  
                     l2487 143A                       l3359 05E6                       l2655 07FB  
                     l2647 07E8                       l2639 07C4                       l2671 08FF  
                     l2743 0F1F                       l2489 1443                       l3393 062F  
                     l3289 057F                       l3377 0604                       l2681 0913  
                     l3465 0D62                       l2809 132D                       l2499 1452  
                     l2667 08F8                       l2755 0FB6                       l2781 17D4  
                     l2765 179F                       l2693 0934                       l2685 0921  
                     l2679 0905                       l3479 0D87                       l2793 17DB  
                     l2689 092C                       l3497 0996                       l2787 17DA  
                     l2779 17BE                       l3499 094B                       _ADIE 0466  
                     _ADIF 0066                       ?_isr 0070                       STR_1 08E2  
                     STR_2 08E2                       STR_3 08E2                       STR_6 08E5  
                     STR_7 08DF                       STR_8 088E                       STR_9 084E  
                     u3105 1788                       u3070 1771                       u3055 1753  
                     u3080 1772                       u3064 1763                       u4200 073A  
                     u3065 1760                       u3145 07C7                       u4124 06BE  
                     u4125 06BB                       u3165 07D3                       u3245 0908  
                     u3095 177B                       u4135 06CB                       u3175 07DF  
                     u4225 0740                       u3185 07E9                       u3265 0919  
                     u3514 17E6                       u4154 06F6                       u3515 17E4  
                     u4235 0754                       u4155 06F3                       u3275 0922  
                     u2805 1521                       u4165 0701                       u4254 0784  
                     u4190 0739                       u3535 17F8                       u4255 0781  
                     u4184 0730                       u4185 072D                       u3474 17AA  
                     u3475 17A8                       u4275 078C                       u4285 07A0  
                     u2875 1480                       _RCIE 0465                       _RCIF 0065  
                     i1l61 12C8                       u3925 15EF                       u3934 1602  
                     u3935 1600                       i1l58 12C2                       u4915 0997  
                     u4925 0959                       i1l94 0DDD                       i1l88 0B5E  
                     i1l96 0E1B                       i1l89 0B91                       i1l98 0E71  
          __end_ofi1_AdcGo 12A9                       _TRMT 04C1                       _TXIF 0064  
    __size_ofi1__shapeNext 0157                       _game 00CB                       _flag 0061  
                     _main 153F            __end_of_AdcInit 08EE              i1___lbmod@rem 0076  
           ?i1_QueueLength 0070                       btemp 007E               i1__drawBlock 1362  
          __end_ofi1__next 12E4                       start 0012               i1__drawShape 0A04  
    __end_ofi1_UIClearGame 14E9   __end_of_UIPageMainToGame 0DAA            __end_of_LedInit 130B  
        ___bmul@multiplier 00A3      __size_ofi1__wipeBlock 0014                      ??_isr 0058  
      i1__randShape@rotate 0029                      ?_main 0070             i1___awdiv@sign 0076  
             i1__randShape 0AD0            __end_of___awdiv 0800            __end_of___lbdiv 1454  
                    STR_10 0864                      STR_11 0838                      STR_20 08C7  
                    STR_12 08DF                      STR_21 08D7                      STR_13 0879  
                    STR_14 08DB                      STR_22 08B3                      STR_15 08CB  
                    STR_23 08C0                      STR_24 088B                      STR_16 08C7  
                    STR_17 08CF                      STR_18 08A2                      STR_19 08D3  
          __end_of___awmod 0939            __end_of___lbmod 149A              i1__getBlock@n 007A  
            i1__getBlock@t 0079              i1__getBlock@x 0074              i1__getBlock@y 0075  
          ___awdiv@divisor 00A0                      i1l100 0EB2                      i1l164 12B2  
                    i1l454 0C98                      i1l860 1471            ___awdiv@counter 00A5  
                    _RCREG 001A                      _RCSTA 0018                      _SPBRG 0099  
                    _PORTC 0007                      _PORTD 0008                      _AdcGo 12A9  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TXREG 0019                      _TXSTA 0098  
             i1__shapeNext 03A6             i1___awmod@sign 0076                      __next 12F1  
                    _table 0806                      _setup 13F2           __end_of_AdcVoltL 12B2  
         __end_ofi1___bmul 132B                      isr@rc 005E                      pclath 000A  
          ??i1_UartCurMove 007A               UIClearGame@i 00AE                      status 0003  
                    wtemp0 007E         __size_ofi1___awdiv 0059         __size_ofi1___lbdiv 0021  
       __size_ofi1___awmod 004B         __size_ofi1___lbmod 0023            ___lbdiv@divisor 00A0  
             i1__wipeBlock 134E            ___lbdiv@counter 00A3                ?i1_QueuePop 0070  
          __initialization 0015           __end_of__AdcWait 12B9               __end_of_main 156B  
              ?_UIPageMain 0070               __drawBlock@x 00AD               __drawBlock@y 00AA  
                   ??_main 00C8       i1__randShape@randset 002A                     ?_AdcGo 0070  
         __end_of_UartInit 131A               __drawShape@p 00BA               __drawShape@t 00B5  
             __drawShape@x 00AF               __drawShape@y 00B0                  ??i1_AdcGo 0070  
         __end_of_QueuePop 179B                     ?__next 0070                     _ADCON0 001F  
                   _ADCON1 009F                  ??_AdcInit 00A0                     _ADRESL 009E  
         ___awdiv@dividend 00A2                     ?_setup 0070                  ??i1__next 0070  
                   i1l3123 0DF4                     i1l3205 04F4                     i1l3055 09FB  
                   i1l3135 0E8B                     i1l3151 0A16                     i1l3207 04C5  
                   i1l3057 09B0                     i1l3163 03C8                     i1l2533 12E2  
                   i1l2525 13BA                     i1l3149 0A61                     i1l3181 0426  
                   i1l2543 150C                     i1l2711 0A76                     i1l3167 03D5  
                   i1l2545 1511                     i1l2561 1422                     i1l3169 03D7  
                   i1l2723 131C                     i1l2571 1431                     i1l3531 0265  
                   i1l3515 0205                     i1l3195 04A7                     i1l3187 043A  
                   i1l3179 0402                     i1l3541 029A                     i1l3525 0226  
                   i1l3197 0470                     i1l3189 045C                     i1l2727 1322  
                   i1l2559 1419                     i1l3535 027A                     i1l3543 02A1  
                   i1l3199 04B0                     i1l3553 02E3                     i1l2841 0AF5  
                   i1l3713 0043                     i1l2579 145A                     i1l2923 1734  
                   i1l2915 1721                     i1l2907 16FD                     i1l3547 02CE  
                   i1l2843 0B0C                     i1l2827 0AD4                     i1l2909 170B  
                   i1l3581 0376                     i1l2919 172C                     i1l2935 164A  
                   i1l3567 0330                     i1l3559 0322                     i1l2855 0B13  
                   i1l3751 0147                     i1l3735 00EB                     i1l3719 0082  
                   i1l3823 14DF                     i1l2961 1686                     i1l2953 1673  
                   i1l2849 0B12                     i1l3761 0162                     i1l3745 0108  
                   i1l3737 00A0                     i1l3817 14CC                     i1l2875 15D3  
                   i1l2891 16EA                     i1l2947 1657                     i1l2939 1651  
                   i1l3587 0377                     i1l3763 0186                     i1l3739 00F3  
                   i1l3851 0C58                     i1l2949 1665                     i1l2957 167E  
                   i1l3781 01CE                     i1l3837 0C3E                     i1l3775 01CD  
                   i1l3767 018B                     i1l3871 0C80                     i1l3855 0C63  
                   i1l3863 0C75                     i1l2897 16F5                     i1l3865 0C76  
                   i1l3859 0C6A                     i1l3867 0C78                     i1l3875 0C85  
                   i1l3879 0C8D                     u400_24 158A                     u400_25 1588  
                   _INTCON 000B                     u401_25 1592            ??i1_QueueLength 0070  
                   u405_25 09FD                     u501_25 029B                     u333_25 0A86  
                   u334_24 0A96                     u406_25 09BE                     u502_25 02AF  
                   u334_25 0A93                     u335_20 0AA4                     u511_25 007B  
                   u336_20 0AA5                     u360_24 0B20                     u440_25 0A24  
                   u504_25 031B                     u360_25 0B1E                     u520_25 0140  
                   u512_25 0055                     u505_25 02F5                     u337_25 0AAE  
                   u521_25 011A                     u370_25 1700                     u338_25 0ABD  
                   u362_25 0B32                     u450_25 0455                     u356_24 0AE1  
                   u452_24 0484                     u292_25 14F7                     u372_25 170C  
                   u380_25 165A                     u356_25 0ADF                     u452_25 0481  
                   u453_20 048D                     u365_25 15BA                     u373_25 1718  
                   u461_25 04E1                     u525_25 017F                     u517_25 00EC  
                   u533_25 0C1D                     u454_20 048E                     u366_24 15CD  
                   u446_24 0412                     u366_25 15CB                     u374_25 1722  
                   u382_25 166B                     u462_25 04F6                     u446_25 040F  
                   u526_25 0165                     u518_25 00B2                     u383_25 1674  
                   u439_25 0A63                     u447_25 041F                     u456_25 0494  
                   u465_24 16A7                     u449_24 044A                     u465_25 16A4  
                   u457_25 04A9                     u449_25 0447                     u466_24 16C1  
                   u466_25 16BE                     u459_24 04D9                     u299_25 145D  
                   u459_25 04D6                     u396_24 1629                     u396_25 1627  
                   u397_25 1632                     u495_25 025E                     u496_25 0238  
                ??_LedInit 00A0              ??_UartCurMove 00AA              ??_UartCurShow 00A0  
           i1UIClearGame@i 0020                 _UartCurSet 0BA6                     ___bmul 132B  
           _UartSendString 13D5                  ??___awdiv 00A4                  ??___lbdiv 00A1  
                ??___awmod 00A4                  ??___lbmod 00A1           i1UartSendChar@ch 0070  
         ___awdiv@quotient 00A7            ___awmod@divisor 00A0      UIPageMainToGame@i_200 00B5  
    UIPageMainToGame@i_192 00B2      UIPageMainToGame@i_194 00B3      UIPageMainToGame@i_197 00B4  
          ___awmod@counter 00A5          TetrisInit@randset 00C5                 _TetrisInit 139E  
               _TetrisNext 0025                 _TetrisMove 01FD          __end_ofi1___awdiv 1739  
        __end_ofi1___lbdiv 1433          __end_ofi1___awmod 168B          __end_ofi1___lbmod 1477  
           i1__drawBlock@x 007D             i1__drawBlock@y 007A           __shapeNext@p_287 00BE  
         __shapeNext@p_288 00C0           __shapeNext@p_289 00C2                     saved_w 007E  
       __size_of_QueueInit 000B         __size_of_QueuePush 0055        __size_ofi1_QueuePop 0066  
               QueueInit@q 00A0             i1__drawShape@p 002C             i1__drawShape@t 0027  
           i1__drawShape@x 0021             i1__drawShape@y 0022           ___lbdiv@dividend 00A2  
               QueuePush@i 0077                 QueuePush@q 007B           ??i1_UartSendChar 0070  
          ___lbmod@divisor 00A0        __size_of_UIPageMain 0155    __end_of__initialization 0021  
          ___lbmod@counter 00A5              ??_QueueLength 00A0         __size_of__clrBlock 0036  
       __size_of__getBlock 0035               ?_UIClearGame 0070     __end_of_UartSendString 13F2  
            __end_of_AdcGo 12AC        ___bmul@multiplicand 00A0            _QueueLength$117 00A3  
           __pcstackCOMMON 0070               __randShape@i 00B5        __end_of_UartCurMove 1000  
            __end_of__next 12FE        __end_of_UartCurShow 0004              __end_of_table 0838  
            __end_of_setup 1412         __size_of__setBlock 0035                  ?_AdcVoltL 0070  
         ___lbdiv@quotient 00A4                  ?i1___bmul 0070                 __drawBlock 1376  
             ?i1__getBlock 0074                 __drawShape 0939                    ??_AdcGo 00A0  
__size_ofi1_UartSendString 001C                    ??__next 00A0           i1___bmul@product 0072  
                  ??_setup 00A1                  ?__AdcWait 0070                 __pbssBANK0 005F  
               __pbssBANK1 00CB                 __randShape 179B               __shapeNext@p 00BC  
             __shapeNext@t 00C4              ?_UartSendUTF8 00A1              __drawShape@bx 00B6  
            __drawShape@by 00B8                ?_UartCurSet 00A7              ?_UartSendChar 0070  
          ?_UartSendString 0070                 __shapeNext 0652                  ?_UartInit 0070  
          TetrisNext@p_372 0055            TetrisNext@p_375 004E            TetrisNext@p_378 0050  
               __pmaintext 153F          ?_UIPageMainToGame 0070          __end_of_QueueInit 12D7  
        __end_of_QueuePush 16E0                    ?___bmul 00A0        __end_of_QueueLength 153F  
                ?_QueuePop 0070         ??_UIPageMainToGame 00AF                 __pintentry 0004  
           i1__randShape@i 002B           __randShape@i_212 00B6            TetrisMove@p_322 0045  
          TetrisMove@p_319 004A                 ??_AdcVoltL 0070                UartCurSet@x 00A9  
              UartCurSet@y 00A7                 ??i1___bmul 0071                ?_TetrisInit 00C5  
               __wipeBlock 138A           __randShape@shape 00B8                ?_TetrisNext 0070  
              ?_TetrisMove 002E          __end_of__clrBlock 1640         i1___awdiv@dividend 0072  
        __end_of__getBlock 160A                 __wipeShape 099E                    i1_AdcGo 12A7  
                  _AdcInit 08E7                 ??__AdcWait 0070                 __stringtab 0800  
                  i1__next 12D7          __end_of__setBlock 15A0                    _LedInit 12FE  
           ??_UartSendUTF8 00A3                _UartCurMove 0ED5             ??_UartSendChar 00A0  
              _UartCurShow 0003               ??i1_QueuePop 0020         i1___awdiv@quotient 0077  
               ??_UartInit 00A0             i1__shapeNext@p 0031             i1__shapeNext@t 0039  
          __size_of___bmul 0011                    ___awdiv 07A7                    ___lbdiv 1433  
               ??_QueuePop 00A7                    ___awmod 08EE                    ___lbmod 1477  
       i1__shapeNext@p_287 0033         i1__shapeNext@p_288 0035         i1__shapeNext@p_289 0037  
             ??_UIPageMain 00A4                    __next@n 00A1                    __ptext1 13F2  
                  __ptext2 130B                    __ptext3 12CC                    __ptext4 12FE  
                  __ptext5 08E7                    __ptext6 0939                    __ptext7 15D5  
                  __ptext8 132B                    __ptext9 0CA3                ?__drawBlock 00AA  
             __wipeBlock@x 00AD               __wipeBlock@y 00AA         __randShape@randset 00B7  
              ?__drawShape 00AE         i1___lbdiv@dividend 0072               __size_of_isr 0091  
            ?_TetrisRotate 0070           ___awmod@dividend 00A2                    _randset 00EB  
      i1___bmul@multiplier 0073        __size_of_UartCurSet 006C     __size_ofi1_UIClearGame 0029  
             __wipeShape@p 002C               __wipeShape@t 0027               __wipeShape@x 0021  
             __wipeShape@y 0022         __end_ofi1_QueuePop 0AD0                    clrloop0 12BA  
     end_of_initialization 0021                ?__randShape 0070         __end_of_UIPageMain 0652  
              _QueueLength 1513              UartSendUTF8@a 00A3              UartSendUTF8@b 00A1  
            UartSendUTF8@c 00A2                TetrisInit@t 00C7      __end_ofi1_UartCurMove 0ED5  
              TetrisNext@i 0053                TetrisNext@j 0054                TetrisNext@p 004C  
              TetrisNext@t 0057                TetrisNext@y 0052                TetrisMove@i 0048  
              TetrisMove@j 0049                TetrisMove@p 0043                TetrisMove@t 004C  
              TetrisMove@x 0047        __size_of_TetrisInit 001B        __size_of_TetrisNext 01D8  
      __size_of_TetrisMove 01A9                ?__shapeNext 0070         i1___lbdiv@quotient 0074  
     __size_of_UIClearGame 0026            i1__drawShape@bx 0028            i1__drawShape@by 002A  
              QueuePop@ret 00B0                ?__wipeBlock 00AA             ??_TetrisRotate 007E  
              ?__wipeShape 0020             i1__wipeBlock@x 007D             i1__wipeBlock@y 007A  
            ?i1_UartCurSet 0077           ___lbmod@dividend 00A4       __size_ofi1__getBlock 0035  
         i1_UartSendString 13B9                  i1___awdiv 16E0                  i1___lbdiv 1412  
                i1___awmod 1640                  i1___lbmod 1454                  i1__next@n 0071  
              ___lbmod@rem 00A6      __end_ofi1_QueueLength 1513          QueueLength@length 00A6  
      __size_of__drawBlock 0014        __size_of__drawShape 0065         i1__randShape@i_212 002C  
            i1_UIClearGame 14C0         i1__randShape@shape 002D                __clrBlock@n 007B  
              __clrBlock@t 007A                __clrBlock@x 0074                __clrBlock@y 0075  
           __end_of___bmul 133C                __getBlock@n 00A9                __getBlock@t 00AA  
              __getBlock@x 00A4                __getBlock@y 00A5        __size_of__randShape 0065  
           _TetrisMove$314 003D             _TetrisMove$327 003F          __size_of_AdcVoltL 0006  
           ??i1_UartCurSet 0078          __size_ofi1___bmul 0011       __end_of_UartSendUTF8 134E  
     __end_of_UartSendChar 12F1        start_initialization 0015                __end_of_isr 0CA3  
               ?i1___awdiv 0070                 ?i1___lbdiv 0070        __size_of__shapeNext 0155  
               ?i1___awmod 0070                 ?i1___lbmod 0070          UartSendString@str 00A2  
         ??_UartSendString 00A1          __size_of__AdcWait 0007              ?i1__drawBlock 007A  
            ?i1__drawShape 0020        __size_of__wipeBlock 0014               ??_UartCurSet 00A8  
           ?i1_UIClearGame 0070        __size_of__wipeShape 0066                   ??___bmul 00A1  
        __size_of_UartInit 000F         i1___awmod@dividend 0072                  _QueueInit 12CC  
                _QueuePush 168B          __size_of_QueuePop 0062              ?i1__randShape 0070  
          UartCurShow@show 0070                UIPageMain@i 00A6                UIPageMain@j 00A7  
                QueuePop@q 00B1               ??_TetrisInit 00C6               ??_TetrisNext 003A  
             ??_TetrisMove 002F           __drawShape@shape 00AE  __size_of_UIPageMainToGame 0107  
                ___latbits 0002              __pcstackBANK0 0020              ?i1__shapeNext 0070  
            __pcstackBANK1 00A0        TetrisMove@direction 002E                   ?i1_AdcGo 0070  
                __clrBlock 160A         __end_of_UartCurSet 0C12                  __getBlock 15D5  
        UIPageMainToGame@i 00B1                   ?_AdcInit 0070                   ?i1__next 0070  
           ??i1__drawBlock 007B                   ?_LedInit 0070                __setBlock@n 007A  
              __setBlock@t 007B                __setBlock@x 0074                __setBlock@y 0075  
           ??i1__drawShape 0023              ?i1__wipeBlock 007A               ?_UartCurMove 00A9  
             ?_UartCurShow 0070       __end_of_TetrisRotate 12A7                  __setBlock 156B  
       __end_of_TetrisInit 13B9         __end_of_TetrisNext 01FD         __end_of_TetrisMove 03A6  
         TetrisNext@bx_373 0042           TetrisNext@bx_376 0044           TetrisNext@by_380 0048  
         TetrisNext@by_374 004A           TetrisNext@by_377 0046                   ?___awdiv 00A0  
                 ?___lbdiv 00A0                   ?___awmod 00A0    __size_ofi1_UartSendChar 000B  
                 ?___lbmod 00A0         i1___lbmod@dividend 0074                 ?_QueueInit 0070  
        i1___awdiv@divisor 0070             ??i1__randShape 0079                 ?_QueuePush 0077  
        i1___awdiv@counter 0075                  __pstrings 0800               ??__drawBlock 00AB  
             ??__drawShape 00B1             __size_of_AdcGo 0003             ??i1__shapeNext 002E  
         TetrisMove@bx_320 0041           TetrisMove@bx_323 0039           TetrisMove@by_321 0037  
         TetrisMove@by_324 003B               UartCurMove@x 00AC               UartCurMove@y 00A9  
              ??i1___awdiv 0074                 ?__clrBlock 0074                ??i1___lbdiv 0071  
              ??i1___awmod 0074                ??i1___lbmod 0071                 ?__getBlock 00A4  
           __size_of__next 000D             __size_of_setup 0020          i1___lbdiv@divisor 0070  
        __randShape@rotate 00B4          i1___lbdiv@counter 0073               ??__randShape 00B2  
        interrupt_function 0004             ??i1__wipeBlock 007B               ?_QueueLength 0070  
          ??i1_UIClearGame 007D                  clear_ram0 12B9      i1___bmul@multiplicand 0070  
     __end_ofi1_UartCurSet 0BA6         __end_of__drawBlock 138A                 ?__setBlock 0074  
             ??__shapeNext 00B9         __end_of__drawShape 099E   __end_ofi1_UartSendString 13D5  
    __size_of_UartSendUTF8 0012      __size_of_UartSendChar 000D                   _AdcVoltL 12AC  
                 i1___bmul 131A                __stringbase 0805               ??__wipeBlock 00AB  
             ??__wipeShape 0023         __end_of__randShape 1800           __size_ofi1_AdcGo 0002  
       __end_of__shapeNext 07A7             i1UartCurMove@x 007C             i1UartCurMove@y 0079  
                 __AdcWait 12B2           __size_of_AdcInit 0007           __size_ofi1__next 000D  
         __size_of_LedInit 000D              ??_UIClearGame 00AD               _UartSendUTF8 133C  
       __end_of__wipeBlock 139E               _UartSendChar 12E4                   _UartInit 130B  
       __end_of__wipeShape 0A04          i1___awmod@divisor 0070                   _QueuePop 1739  
        i1___awmod@counter 0075           __size_of___awdiv 0059           __size_of___lbdiv 0021  
         __size_of___awmod 004B           __size_of___lbmod 0023         i1__drawShape@shape 0020  
              ??_QueueInit 00A0                ??_QueuePush 0078         __end_of__stringtab 0806  
            ??i1__getBlock 0076       __end_ofi1__drawBlock 1376       __end_ofi1__drawShape 0A6A  
         _UIPageMainToGame 0CA3     __size_ofi1_UartCurMove 012B                ??__clrBlock 0076  
                 __ptext10 149A                   __ptext11 0ED5                   __ptext20 179B  
                 __ptext12 08EE                   __ptext21 1739                   __ptext13 07A7  
                 __ptext30 12E4                   __ptext22 12F1                   __ptext14 04FD  
                 __ptext31 0C12                   __ptext23 1513                   __ptext15 133C  
                 __ptext40 0A04                   __ptext32 14C0                   __ptext24 12A9  
                 __ptext16 0003                   __ptext41 1362                   __ptext33 12A6  
                 __ptext25 1376                   __ptext17 139E                ??__getBlock 00A6  
                 __ptext50 13B9                   __ptext42 0DAA                   __ptext34 0025  
                 __ptext26 0BA6                   __ptext18 0652                   __ptext51 12C1  
                 __ptext43 1640                   __ptext35 03A6                   __ptext27 1477  
                 __ptext19 138A                   __ptext60 12B2                   __ptext52 15A0  
                 __ptext44 16E0                   __ptext36 0AD0                   __ptext28 1433  
                 __ptext53 156B                   __ptext45 099E                   __ptext37 0A6A  
                 __ptext29 13D5                   __ptext54 160A                   __ptext46 134E  
                 __ptext38 12A7                   __ptext55 131A                   __ptext47 0B3A  
                 __ptext39 01FD                   __ptext56 168B                   __ptext48 1454  
                 __ptext57 12D7                   __ptext49 1412                   __ptext58 14E9  
                 __ptext59 12AC          i1___lbmod@divisor 0070          i1___lbmod@counter 0075  
    __size_of_TetrisRotate 0001       __end_ofi1__randShape 0B3A              TetrisRotate@t 002E  
            __size_of_main 002C          i1_QueueLength$117 0073                ??__setBlock 0076  
     __end_ofi1__shapeNext 04FD       __size_of_UartCurMove 012B       __size_of_UartCurShow 0001  
            __wipeShape@bx 0028              __wipeShape@by 002A             i1_UartSendChar 12C1  
      __end_of_UIClearGame 14C0              i1UartCurSet@x 0079              i1UartCurSet@y 0077  
     __end_ofi1__wipeBlock 1362        i1QueueLength@length 0076     __size_ofi1_QueueLength 002A  
          UIPageMain@i_166 00B1            UIPageMain@i_182 00B0            UIPageMain@j_170 00A8  
          UIPageMain@j_171 00A9            UIPageMain@j_180 00AF            UIPageMain@j_173 00AA  
          UIPageMain@j_174 00AB            UIPageMain@j_176 00AC            UIPageMain@j_177 00AD  
          UIPageMain@j_179 00AE               _TetrisRotate 12A6        __end_ofi1__getBlock 15D5  
                 intlevel1 0000      __size_ofi1_UartCurSet 006C               TetrisNext@bx 003E  
             TetrisNext@by 0040             UartSendChar@ch 00A0               TetrisMove@bx 0033  
             TetrisMove@by 0035              i1_UartCurMove 0DAA                  stringcode 0800  
   __end_ofi1_UartSendChar 12CC       __size_of_QueueLength 002C        i1UartSendString@str 0072  
             QueueLength@q 00A5           __wipeShape@shape 0020               i1_UartCurSet 0B3A  
                 stringdir 0800                   stringtab 0800             ?i1_UartCurMove 0079  
            i1_QueueLength 14E9                _UIClearGame 149A            ?i1_UartSendChar 0070  
               i1_QueuePop 0A6A  
